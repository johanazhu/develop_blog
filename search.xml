<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2023年的加密货币操作</title>
      <link href="/2023/09/11/2023-09-11-2023%E5%B9%B4%E7%9A%84%E5%8A%A0%E5%AF%86%E8%B4%A7%E5%B8%81%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/09/11/2023-09-11-2023%E5%B9%B4%E7%9A%84%E5%8A%A0%E5%AF%86%E8%B4%A7%E5%B8%81%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>一年前，笔者写了一篇 <a href="https://blog.azhubaby.com/2022/05/15/2022-05-15-%E5%8A%A0%E5%AF%86%E8%B4%A7%E5%B8%81%E9%A2%84%E6%B5%8B%E8%AE%B0%E5%BD%95/">加密货币预测记录</a> 文章，因为去年的加密货币市场是暴跌行情，一整年都在跌啊跌，所以去年我没买，那篇文章贴了一张别人做的刻舟求剑的图：</p><p><img src="https://s2.loli.net/2022/05/15/YHqUFxNjKO3W2bu.jpg" alt="加密货币未来预测"></p><p>现在的价格走势是：</p><table><thead><tr><th></th><th>当前价格</th><th>按上轮跌幅的价格</th></tr></thead><tbody><tr><td>BTC</td><td>25705</td><td>11040</td></tr><tr><td>ETH</td><td>1609</td><td>293</td></tr><tr><td>ADA</td><td>0.248</td><td>0.14</td></tr></tbody></table><p>之前的文章还贴出了一张“<strong>比特币四年一个周期</strong>”的预测图，现在可以填上第三轮历史最低时机、时间跨度和跌幅了</p><table><thead><tr><th>历年高点时机</th><th>历年低点时机</th><th>时间跨度</th><th>跌幅</th></tr></thead><tbody><tr><td>2013年11月：￥8000</td><td>2015年1月：￥900</td><td>14个月</td><td>88.75%</td></tr><tr><td>2017年12月：$20000</td><td>2018年11月：$3200</td><td>11个月</td><td>84%</td></tr><tr><td>2021年11月：$68900</td><td><strong>2022年11月：$15,603</strong></td><td><strong>12个月</strong></td><td><strong>77%</strong></td></tr></tbody></table><p>时间跨度上预测对了，但是低点价位没有在前两次范围内，我想，很大程度上是因为更多的购买者以及机构入场了，他们就持有不卖出，所以历来跌幅比例越来越小。如果这样，下一轮跌幅，大概70%就是极限了</p><p>去年的 ahr999 在十月份之后确实跌到了 0.45 以下，但是我没有入场，其原因是那个时候考虑买房了，短线我是不会做的，所以就一直没买。后来没了机会也一直没后悔，因为房子还没买</p><p>8月底签好了房子，月供做公积金对冲，这几年攒的公积金能顶个两三年，所以现在终于有机会入场了</p><p>回过头看如果去年五月份忍不住买币，到现在都是亏的，熊市周期太难熬了</p><p>这次的美元加息是否会复刻之前的形势，我不确定。按照笔者掌握的信息，美联储会维持加息力度好几年，如果这样的话现在入场就太早了，还是时机，手里还是要留有一定量的现金，等价格真正到了洼地，没钱买才是最痛苦的事情</p><h2 id="笔者的遐想"><a href="#笔者的遐想" class="headerlink" title="笔者的遐想"></a>笔者的遐想</h2><p>按照笔者这一年看《杨世光在金钱爆》（+部分金铁杆内容）的心得，9月份大概率不会加息，而11月份大概会加息最后一次0.5%，如此一来就实现了两次会议加息一码（0.5%）的节奏，即每次会议加息0.25%的节奏。12道金牌下去（连续加息12次），美国再一次伟大。而连续的加息，让第四季度的全球资产行情很差，然后传导再传导，越来越多的人抛售加密货币，而那时，笔者就会入场，什么时候会入场，笔者就再写一篇文章进行说明</p><p>其实就是等，我拿着现金存银行，虽然跑不过通货膨胀，但是我能随时入场，而现在我觉得远没到低点，那就等呗，就这么简单</p>]]></content>
      
      
      <categories>
          
          <category> 理财 </category>
          
          <category> 加密货币 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密货币 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>局域网设备访问WSL项目</title>
      <link href="/2023/08/06/2023-08-06-%E5%B1%80%E5%9F%9F%E7%BD%91%E8%AE%BE%E5%A4%87%E8%AE%BF%E9%97%AEWSL%E9%A1%B9%E7%9B%AE/"/>
      <url>/2023/08/06/2023-08-06-%E5%B1%80%E5%9F%9F%E7%BD%91%E8%AE%BE%E5%A4%87%E8%AE%BF%E9%97%AEWSL%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/--ZHIYUAN/p/17230924.html">https://www.cnblogs.com/--ZHIYUAN/p/17230924.html</a></p><p>查找现有网络适配器及其名称</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-NetAdapter</span></span><br></pre></td></tr></table></figure><p>要创建外部虚拟交换机，请运行以下命令，将 <code>&lt;value&gt;</code> 占位符替换为你自己的值</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">New-VMSwitch</span> <span class="literal">-Name</span> &lt;<span class="built_in">switch-name</span>&gt;  <span class="literal">-NetAdapterName</span> &lt;netadapter<span class="literal">-name</span>&gt;</span><br></pre></td></tr></table></figure><p><code>wsl --shutdown &amp;&amp; wsl</code> 重启 WSL2，搞定。</p><p><a href="https://github.com/MicrosoftDocs/wsl/blob/main/WSL/wsl-config.md">https://github.com/MicrosoftDocs/wsl/blob/main/WSL/wsl-config.md</a></p><p><a href="https://www.bilibili.com/read/cv22613431?spm_id_from=333.999.0.0">https://www.bilibili.com/read/cv22613431?spm_id_from=333.999.0.0</a></p><p><a href="https://space.bilibili.com/1434257">https://space.bilibili.com/1434257</a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/wsl/networking#accessing-a-wsl-2-distribution-from-your-local-area-network-lan">https://learn.microsoft.com/zh-cn/windows/wsl/networking#accessing-a-wsl-2-distribution-from-your-local-area-network-lan</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSL </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现代SEO该做些什么</title>
      <link href="/2023/07/26/2023-07-26-%E7%8E%B0%E4%BB%A3SEO%E8%AF%A5%E5%81%9A%E4%BA%9B%E4%BB%80%E4%B9%88/"/>
      <url>/2023/07/26/2023-07-26-%E7%8E%B0%E4%BB%A3SEO%E8%AF%A5%E5%81%9A%E4%BA%9B%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<p>最近一个月，除了忙公司的事情外，就在做两件事，一是我的婚礼H5，我找来了<a href="http://zhangwenli.com/">羡辙</a>的<a href="https://umeecorn.com/wedding">婚礼H5</a>作模仿对象。因为老婆是平面设计师，所以让她设计（可后来她就找借口不想做了，所以换装那里就用的羡辙的素材。二是对我的 FE 进行了一个SEO优化，以前是没想搞，<a href="https://web.okjike.com/u/a2d6acc1-626f-4d15-a22a-849e88a4c9f0">哥飞</a></p><p>哥飞做的网站：<a href="https://www.threadspage.com/">https://www.threadspage.com/</a></p><p>How to screen shot on windows：<a href="https://www.howtoscreenshotonwindows.net/">https://www.howtoscreenshotonwindows.net/</a></p><p>网友赖嘉伟Gray  ：<a href="https://threadvideodownloader.com/">https://threadvideodownloader.com/</a></p><p>网友phil502：<a href="https://downloader4threads.com/">https://downloader4threads.com/</a></p><p><a href="https://web.okjike.com/u/C6C8DE3A-E89D-4978-9E7D-B2E167D835A9">Airyland </a>在群里分享 <a href="https://ai.sb/?gefei">ai.sb</a></p><p>@AUDI 新站上线当天就拿到了 1000PV。</p><p>@DemoChen 花了两天时间做的 DocHub.wiki ，上线第二天就拿到了1000UV。</p><p>云志：<a href="https://threads2img.com/">threads2img.com</a> </p><p>如何分析：<a href="https://www.aizhan.com/">爱站</a></p><p>similarweb ：<a href="https://www.similarweb.com/">https://www.similarweb.com</a></p><p>以 tool.lu 为例子，查看它的百度权重</p><p><a href="https://baidurank.aizhan.com/baidu/tool.lu/">https://baidurank.aizhan.com/baidu/tool.lu/</a></p><p>再来回顾一下我们的整个过程，我们先在谷歌里随便输入一个“在线工具”关键字，得到了 tool.lu 网站，之后在 similarweb 和 aizhan 上，我们得到了 tool.lu 网站能够拿到排名的一些关键字，大概就是下面这些了：</p><p>时间戳、时间戳转换、ip地址查询、ip查询、ip、时间戳转换器、在线工具、整数分区、视频地址解析、下载地址转换、整数分区计算器、unix时间戳、timestamp、unixtimestamp、在线拆字</p><p>这里的每一个关键字，我们都可以用站长网的关键字优化分析工具查看SEO优化难度。打开 <a href="https://tool.chinaz.com/kwevaluate">https://tool.chinaz.com/kwevaluate</a> ，输入“时间戳”。</p><p><a href="https://tool.chinaz.com/kwevaluate/%E6%97%B6%E9%97%B4%E6%88%B3">https://tool.chinaz.com/kwevaluate/时间戳</a></p><p>可以看到整体优化难度分为86分，不算太难，如果是90以上，那么趁早放弃，换下一个词。</p><p>而且实际查看列表发现，首页也只是子域名而已。</p><p>那么，“时间戳”这个词，如果我们注册一个域名，专门做“时间戳”相关工具的话，假以时日，是有可能上搜索引擎首页，甚至是排到前5前3的。</p><p>时间戳Timestamp在线工具网站</p><p>先从分析开始，谷歌搜索“timestamp”</p><p>接着，我们用关键字密度检测工具 <a href="https://tool.chinaz.com/tools/density.aspx">https://tool.chinaz.com/tools/density.aspx</a> ，查一下每个页面的 timestamp 这个关键字的密度。</p><p>然后看下这几个域名的注册时间：</p><p>unixtimestamp.com 注册于 2003年10月09日</p><p>epochconverter.com 注册于 2007年05月08日</p><p>techtarget.com 注册于 1999年09月15日</p><p>protobuf.dev 注册于 2020年07月02日</p><p>下面我们看下前两个站的反链数量，第一名 unixtimestamp.com ，反向链接400万，引荐域名4900多个</p><p>这里我们选择流量最高的美国来查看，都有哪些关键字。</p><p>可以看到有些关键字虽然搜索量比较大，但是这个网站并没有排到第一。</p><p>拿“utc time”这个词为例，第一名是 <a href="https://www.timeanddate.com/">https://www.timeanddate.com/</a> 的内页，也就是我们文章开头的镇楼图对应的网站</p><p>我们先不管他，我们聚焦到 timestamp 这个词，找长尾词。</p><p>这些长尾词，就是我们需要抓住的，做到我们的网站里的。</p><p>同样的方法，我们找出第三名的长尾词，可以看到，第三名的 timestamp 相关长尾词，基本也是这些。</p><p>我们还可以去谷歌下拉找搜索需求词：</p><p>去谷歌相关搜索找：</p><p>把以上这些地方找到的长尾词都收集起来，按照出现次数排序，去重，我们就得到了我们网站能用的关键词列表。</p><p>然后我们去挑一个合适的域名，最好是com的，没有的话，其它后缀也行。或者加长，如 timestamptool.net 。</p><p>找到合适的域名之后，就要规划全站路径了。我们是后来者，是竞争者，最好的办法是每个语言用一个域名做一个站，那么多语言切换时，直接换不同的域名就行。所以就不需要考虑子域名形式或者子目录形式做多语言。</p><p>那么要做的就是</p><p>/ 首页，根目录，做工具</p><p>h1 是 timestamp把所有长尾词都变成 h2有层级关系的就变成h2下的h3</p><p>/{h2关键字}/ 内页，h2层级目录</p><p>/{h2关键字}/{h3关键字}/ 内页，h2下的h3层级目录</p><p>这样把所有url结构规划好之后，就可以开始做页面了。</p><p>以首页举例：</p><p>要有时间戳多种转换形式：</p><p>1、从数字时间戳转化为年月日时分秒形式；</p><p>2、从年月日时分秒形式转化为时间戳；</p><p>3、每分每秒显示当前时间戳。</p><p>把以上时间戳转化做成模块，在多个页面都可以使用。</p><p>接着首页还需要把所有的h2、h3列出来。</p><p>每一个h2、h3都需要用一两段文字解释一下。</p><p>什么叫都解释一下呢，拿“timestamp sql”为例，我们就需要去告诉用户，在sql中如何获取时间戳，如何转化时间戳，如何使用时间戳。</p><p>然后我们刚才说了，每个h2都需要做内页，还是以“timestamp sql”为例，在这个页面里，你就需要围绕“timestamp sql”去做更详细的解释。基于这个关键字，会有更多的长尾关键字，都要解释到位。</p><p>如果内页页面里需要用到时间戳转换工具，那就引用一下刚才在首页已经做好的模块。</p><p>首页需要有列出所有的内页链接，至少需要h2和h3的链接。</p><p>所有的内页也需要到上一层级，直到首页的链接。</p><p>如h3页面，需要有h2和首页的链接。</p><p>注意制作页面时，注意保持关键字密度，你需要让每个页面的关键字的密度在5%左右，也就是超过之前最大密度4.1%。</p><p>以“timestamp sql”页面为例，这个页面会有很多文字，但“timestamp sql”需要占所有字符的5%左右。</p><p>这里怎么计算呢？“timestamp sql”总共13个字符，5%就是乘以20，也就是你的网页内容至少需要260个字符才行。如果你的网页需要“timestamp sql”出现3次，那么网页总字符需要780个。注意，空格和换行也算字符。</p><p>基于以上方法，把所有页面都做好。然后做好sitemap，就可以提交到搜索引擎了。</p><p>但是，你会发现，以上页面都是静态页面，只要做好了，就几乎不会增加新页面，如果我想让搜索引擎爬虫经常来怎么办？</p><p>可以学下面这两个网站，做动态页面，每一些时间戳都收录进去。时间戳页面url举例 /timestamp/1672502400 。</p><p>可以做一些层级，按年，按月按日分组，每天挑选整点时刻生成页面，将来时刻的页面也可以先生成。</p><p>分组后，可以是这样 /timestamp/2023/01/01/{秒时间戳} 。</p><p>做好之后，就是和时间交朋友了。</p><p>不过，因为我们是挑战者，最好能够做得更漂亮，更好用，让用户能够自发传播。</p><p>另外，站长之家的这个时间戳工具页面 <a href="https://tool.chinaz.com/Tools/unixtime.aspx">https://tool.chinaz.com/Tools/unixtime.aspx</a> ，值得学习。</p><p>工具站又分为两种，一种是纯前端就能实现的，比如json相关的网站，如json.cn，bejson.com等，还有base64编码解码，或者MD5编码，这些都是前端js代码就能实现的，不需要后端。</p><p>还有比如我们可能用过的一些推特视频下载的网站，你在推特上看到一个视频很喜欢，你想下载怎么办？去搜索相关的网站，然后粘贴推特的链接就能下载。它其实是通过在后端服务器里解析推特的网页得到视频地址的，这个就需要后端支持。</p><p>比如，你可以让GPT为你生成一个base64编码、解码的前端代码，然后直接复制出来，部署起来就可以创建一个网站。</p><p>那么怎么找到这些需求呢？一种方法是你自己经常使用的工具，比如我之前在即刻举过的一个例子，就是字数统计的需求。这个需求可能大家很难想到，但实际上很多时候我们就会有这样的需求</p><p>我以前一直使用的是一个国内的设计工作室创建的字数统计网站 etest.com 。我不知道他们是怎么发现这个需求的，但他们很早就做了这个网站，我也用了很多年。我查了一下，他们每个月的访问量应该在30万左右，这对于国内的网站来说，已经算是不错了。</p><p>国外的字数统计工具网站，流量就很大了，比如 wordcounter.net 每个月有700多万访问量， wordcounter.icu 每个月有200多万访问量。所以，你需要自己有这样的需求，或者你知道别人有这个需求，然后你去创建这样的工具站。</p><p>另一种方法是去工具大全类网站看，有哪些工具大全网站。如果你不知道，没关系，直接在谷歌搜索工具大全，或者在线工具，就能找到很多。</p><p>比如说，大家可能比较熟悉的tool.lu网站，那里会列出很多不同的工具，虽然它没有显示每个工具的使用次数，但我们可以直接找他使用次数多的，或者他的热门的，这些都是用户需求比较大的工具，我们就可以模仿他们。</p><p>那么怎么模仿呢？我们刚刚说了，无论你是前端工具还是后端支持工具，一般一个工具，一个页面界面交互都不会特别复杂，一个页面就能完成。</p><p>但是我们创建工具站的话，我们不能只做一个页面，因为别人已经有先发优势了，我们现在的竞争者，他们已经做了好几年了，他们的权重比我们高，他们用内页，我们就不能用内页了。</p><p>我们需要用单独的域名，一个域名只做一个工具。比如说，时间转换，或者说base64编码，我刚才提到的那个不懂编程的朋友，他就做了一个base64编解码的纯前端工具，放在那里，前几年几乎没流量，然后最近几个月突然来了很多流量。</p><p>我们需要专门买一个域名，只做一个关键字。比如说base64编码，我就找一个跟base64相关的域名，比如直接base64.xxx，找一个非主流的后缀也好，或者你前面后面加一点其他单词也好，反正要有一个专门的域名。</p><p>既然我们用一个域名来做一个工具站，那就肯定不是只做一个页面了，而是去扩展关键词。关于扩展关键词的工具，可能大家都有自己喜欢的，这里就不详细介绍了。反正用关键词扩展的话，比如IP查询，你肯定可能关键字就有IP查询、IP转换或者说是IP位置查询这些所有相关的词。</p><p>每一个词做一个页面，因为每一个页面里面都有title，标题有h1，有h2，这些都能增强这个关键词的权重。如果你一个页面做多个关键词的话，那么你都拿不到权重，那么你就需要一个页面专门做一个关键词的权重，然后再把这个页面指向首页，这就相当于是一个网站的内页链接指向到首页，把这个权重再收回到首页里面来。</p><p>这就是我们的单域名单站做单关键词的策略。</p><p>我们需要注重内页的建设，找到更多的关键字，然后一个关键字做一个页面。网站首页，我们通常使用index.html，index是什么？就是索引的意思。</p><p>所以我们的首页需要把我们所有的关键词页面都索引进来。怎么索引？其实就是在首页添加所有内页的链接，然后每一个内页都要指向首页。指向首页的话，你需要用关键字去指向首页，比如说你某一个页面的关键字是IP查询，那么你在那个页面增加一个到首页的链接，一个a标签的链接，链接上面的开头以及链接里面的文字，你就用IP查询，这样权重就到了首页。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;首页网址&quot;</span> <span class="attr">title</span>=<span class="string">&quot;关键字描述&quot;</span>&gt;</span>关键字<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们在做页面的时候，不能浪费每一个html标签，比如title，这个是最重要的，因为搜索引擎在索引我们页面的时候，最主要的就是看你这个title你写了什么，他就认为你这个页面的主要内容是关于什么的，所以title的权重很高。</p><p>这也是为什么我们不能只在首页做一个页面的原因，因为你这个关键词可能有很多，你不可能把所有的关键词都放到首页的title里面去，你只能抽取最重要的几个关键词放进去，其他关键词怎么办？放到别的页面，每一个页面一个title。</p><p>然后还有description，描述的话就是说用你的关键词去描述你的页面，因为我们在搜索引擎搜索的时候，每一个搜索结果基本上它就是三行，一行显示链接，一行显示标题，一行显示描述，所以描述很重要，你需要用关键词去描述你的页面。例如，如果你的网页是关于IP查询的，那么你的描述应该是关于IP查询的相关介绍，以吸引用户点击进入。</p><p>还有什么是非常重要的呢？H1、H2、H3标签。你的每个页面只应放置一个H1标签。H1标签与页面开头的权重几乎相同，也就是说，搜索引擎在查看你的页面主题时，除了查看标题外，更主要的是查看你的H1标签。然后，H2、H3等标签都是用来进一步解释H1标签的内容。</p><p>另外，为什么要在页面中放置图片呢？这个图片也非常重要。因为专门的搜索引擎都有一个图片搜索功能，你可以在那里专门搜索图片。假设你制作的工具或你的站点与图片有关，比如你的工具是生成水印，生成签名或者生成精美图片，生成海报等，那么用户可能会在图片搜索中专门去搜索相关图片。</p><p>因此，如果你的页面上，你所生成的每一个页面或者说每一个功能，每一个内页你都放一张大图，大图的尺寸一定要比A4纸更大，而不是那种200×300这种小图。</p><p>然后，每一个图片的alt和title都要写好。alt属性最早的作用是当你的页面链接有误，网址有问题的情况下，当图片不显示的时候，alt就是一个占位符，告诉用户和搜索引擎这个图片到底是什么。因此，我们也需要清楚地写出alt属性。那么，用户在图片搜索引擎里搜索的时候，alt的权重就会很高，你的图片就能排到前面了。</p><p>然后，我刚才提到，如果有一个内页的话，所有的内页都应该有一个指向首页的链接，怎么写呢？链接的开头一定要写清楚，不仅仅是我们这里的a标签不是自闭合的标签，a标签后面还有一个斜杠a来闭合，中间的内容就是我们的指向首页的关键字。在链接的开头里面，你也可以把关键字写上，或者稍微解释一下关键字都可以。这样，你就把内页的权重传递到了首页。同时，我们刚才说了，首页也要有到所有内页的链接，也要把链接的开头写上你内页的标题。</p><p>那么，网站做好了之后该怎么办呢？搜索引擎的收录是第一步，因为你只有先被搜索引擎收录，才有可能有排名，才有可能在用户搜索的时候被看到，从而带来流量。</p><p>我们需要做什么呢？我们需要尽快让搜索引擎收录我们的网站。如果我们只是把网站放在那里，可能因为搜索引擎很难发现我们的网站，可能需要一个月或两个月才能被收录。</p><p>那么，有没有更快的办法呢？有的，那就是可以找一个高权重的网站，比如说如果在国内，你可以选择知乎专栏，或者是掘金，或者是其他任何一个可以放链接的社区。然后在国外，你可以选择V2EX，或者其他一些高权重的网站。</p><p>同时还有另一种方法，那就是我们可以主动提交网站到搜索引擎的站长工具，如百度站长工具和谷歌的Search Console。</p><h2 id="新上线的网站，如何快速让谷歌收录？做网站为什么要生成几十万个页面？"><a href="#新上线的网站，如何快速让谷歌收录？做网站为什么要生成几十万个页面？" class="headerlink" title="新上线的网站，如何快速让谷歌收录？做网站为什么要生成几十万个页面？"></a>新上线的网站，如何快速让谷歌收录？做网站为什么要生成几十万个页面？</h2><p>新上线的网站，如何快速让谷歌收录？</p><p>答案是去V2EX发帖介绍自己产品，然后留下网站链接。这个方法10年前就有用，现在更有用了，因为V站在谷歌的权重更高了。</p><p>那怎么让搜索引擎知道你有那么多页面呢？</p><p>答案就是内链和网站地图。</p><p>做好这两样，就能让搜索引擎发现你的所有内页。</p><p>又有人问，生成页面目的是什么？</p><p>我答，生成页面是为了给谷歌收录，谷歌收录之后，才有可能把你的页面放进搜索结果里，最终目的当然是为了从搜索引擎里获取流量。</p><p>至于获取到了流量了，怎么变现，就要看你做的是什么网站了。有些可能单纯赚广告费，有些赚会员费，有些赚交易佣金。</p><p>每一个页面，都对应一个关键字，生成几十万个页面的意思就是做了很多关键字页面。</p><p>用户搜索这些关键字时，如果谷歌把我们网站排到前面了，用户就有可能会点进进来。</p><p>一个页面可能一天只能带来10个访问，但如果你有10万个这样的页面，是不是每天就有100万个访问了。</p><h2 id="赖嘉伟Gray"><a href="#赖嘉伟Gray" class="headerlink" title="赖嘉伟Gray"></a>赖嘉伟Gray</h2><p>看完上文，你 Get 到了@赖嘉伟Gray 是怎么操作的吗？我总结一下：</p><p>1、在新鲜事物出现时，迅速抓住机会，分析可能产生的用户需求，分析用户可能会有哪些关键字在谷歌等搜索引擎搜索找到满足需求的网站；</p><p>2、基于关键字去注册域名，快速建站，快速上线，即使功能暂时还没开发出来也没关系，先把网站上线了，先让谷歌收录，尽快参与排名；</p><p>3、通过提交网址到 Google Search Console 中，以及在一些高权重网站留下外链形式，快速让谷歌收录；</p><p>4、当用户通过搜索引擎打开网站后，需要能够真的满足用户的需求，这样用户就会留下来使用，而不是立马关闭页面，去点击另一个搜索结果；</p><p>5、增加更多的真实的外部链接，进一步提升网站权重。</p><p>其实就8个字可以概括，“<strong>离钱越近，单价越高</strong>”，要说明这8个字，我就得给大家讲故事了。</p><h2 id="如何做到通过小产品日入100美元"><a href="#如何做到通过小产品日入100美元" class="headerlink" title="如何做到通过小产品日入100美元"></a>如何做到通过小产品日入100美元</h2><p>如果你想靠纯广告费赚这么多，按照海外 ecpm 3.3 美元计算，需要每天有 30 个 ecpm ，就是3万个广告曝光。</p><p>假设一个页面放3个广告位，每个pv平均能够产生 2 个广告曝光的话，需要1.5万日PV。</p><p>假设一个UV能够产生2个PV的话，需要7500日UV。</p><p>假设每个关键字每天能给你带来100UV的话，你需要找75个这样的关键字。</p><p>找75个关键字很难吗？的确有些难度，那就先找到1个，然后找到5个，然后慢慢越来越多。</p><h2 id="新上线的网站，如何快速让谷歌收录？做网站为什么要生成几十万个页面"><a href="#新上线的网站，如何快速让谷歌收录？做网站为什么要生成几十万个页面" class="headerlink" title="新上线的网站，如何快速让谷歌收录？做网站为什么要生成几十万个页面"></a>新上线的网站，如何快速让谷歌收录？做网站为什么要生成几十万个页面</h2><p>新上线的网站，如何快速让谷歌收录？</p><p>答案是去V2EX发帖介绍自己产品，然后留下网站链接。这个方法10年前就有用，现在更有用了，因为V站在谷歌的权重更高了</p><p>在一个名叫 MoneyHunter 的微信群里，群主说，买了一个老域名，昨天上线新网站，生成了几十万个，今天就被谷歌收录了两千多个页面。</p><p>有人就问，几十万个什么？</p><p>我帮群主回答，是几十万个页面。</p><p>举个例子，16进制的颜色代码 ff0066 这种，你如果给每个颜色生成一个页面，那么就总共可以生成一千六百多万个页面。</p><p>当然实际操作中，不是真的生成这么多个 html 文件。而是用动态页面，根据不同的url路径参数显示不同的页面。</p><p>那怎么让搜索引擎知道你有那么多页面呢？</p><p>答案就是内链和网站地图。</p><p>做好这两样，就能让搜索引擎发现你的所有内页。</p><p>又有人问，生成页面目的是什么？</p><p>我答，生成页面是为了给谷歌收录，谷歌收录之后，才有可能把你的页面放进搜索结果里，最终目的当然是为了从搜索引擎里获取流量。</p><p>然而并不是，打开 <a href="https://colorhexa.com/">colorhexa.com</a> 输入任意一个16进制颜色代码，看看页面显示了什么，再输入另一个颜色代码，看看页面又显示了什么，就知道了我说的生成具体指的是什么了。</p><p>再举一个例子，你做了一个查字典网站，输入任何一个中文汉字，能够给出这个字的解释、读音、组词等信息。</p><p>举例我昨天说的颜色代码网站 colorhexa.com ，每个月100万的访问量，有70万来自于搜索引擎。</p><p>还有 color-hex.com 这个网站每个月访问量在190万，其中有150万来自于搜索引擎。</p><p>为什么搜索引擎愿意给这么多流量给这些网站？<br>谷歌那么聪明，当然是识别到了，用户从搜索结果里点进去之后，真的觉得有用</p><p>![image-20230727145843622](D:\Documents\PicGo Files\image-20230727145843622.png)</p><p>但现在服务器已经白菜价了，几乎很少网站会采用静态页面，尤其是内容越多的站点，越不可能静态化。</p><h2 id="善用大域名"><a href="#善用大域名" class="headerlink" title="善用大域名"></a>善用大域名</h2><p>不打开浏览器，猜一猜是否可以用 support(支持).qq.com 这个域名做自己产品的帮助文档域名？<br>答案当然是可以。<br>那么用这个域名有什么好处呢？<br>有没有发现这个域名很唬人？<br>如果你做的是微信相关的产品，用这个域名是不是看起来更权威一些呢？</p><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p><a href="https://web.okjike.com/originalPost/64ad16757b5daee5430e6f17">https://web.okjike.com/originalPost/64ad16757b5daee5430e6f17</a></p><p>谷歌每天处理的搜索中有15%是从来没有被搜索过的词。<br>2016年，谷歌说每年处理2万亿次搜索，到2023年，应该要有3万亿次以上了。<br>15%就是4500亿，再除以365得到每天是12亿次左右。<br>即使其中有大部分是旧关键字的变种，也还是有很多全新的搜索。<br>这里具体多少比例不清楚，但即使打个1折，也有每天1.2亿次全新的搜索。<br>全新的搜索意味着什么？<br>意味着你只要做个网页上去，只要被收录了，你就能排名第一。<br>那么剩下的问题就是，如何找到每天出现的新词了。<br>考考大家，你会如何自动化的发现新词？</p><p>给大家看看什么是执行力，周末两天就把网站搞出来了。<br>而且做得还挺好。<br><a href="https://threads2img.com/">threads2img.com</a> 是一个生成精美 Threads 卡片的小工具。<br>图二就是生成好的一个例子。<br>（暂时第一版只做了pc端，所以手机端打开界面会乱）</p><p>模仿：<a href="https://poet.so/">https://poet.so/</a></p><h2 id="产品"><a href="#产品" class="headerlink" title="产品"></a>产品</h2><p><a href="https://web.okjike.com/originalPost/649e3191bb0badadbdd517b8">https://web.okjike.com/originalPost/649e3191bb0badadbdd517b8</a></p><p>分享个产品，书法字典，有网站和App，收费方式简单粗暴，免费查看小图，收费查看大图。<br>5月份流量暴涨，达到了150万访问量。<br>关键信息我都截图了，我给大家留作业，请根据这些截图和你自己查询到的信息回答以下几个问题：<br>（哥飞首发于即刻，可加我微信 qiayue）<br>1、估算这个产品的月收入是多少？<br>2、5月份流量暴涨的原因是什么？<br>3、如果要增加收入，这个产品还有哪些优化空间？</p><h3 id="之前建议大家出海，那有人会问，没有爱迪尔怎么办？"><a href="#之前建议大家出海，那有人会问，没有爱迪尔怎么办？" class="headerlink" title="之前建议大家出海，那有人会问，没有爱迪尔怎么办？"></a>之前建议大家出海，那有人会问，没有爱迪尔怎么办？</h3><p><a href="https://web.okjike.com/originalPost/649c087a0496a46ed6cd6717">https://web.okjike.com/originalPost/649c087a0496a46ed6cd6717</a></p><p>之前建议大家出海，那有人会问，没有爱迪尔怎么办？<br>现在我给你一个有效办法，可以去 <a href="https://similarweb.com/">similarweb.com</a> ，先随便扔进去一个你熟悉的网站的域名开始，去查看数据，去看热门受众兴趣点和竞对网站，通过一个域名你能找到10个以上的新域名，之后再点进这10个域名去，再发现10个新域名，不断点进去，看到流量不错的站点，打开网站看看别人到底提供什么服务的。<br>那些太复杂的网站先略过，只看简单的，能够快速实现的。<br>举例，下面我发现的这两个网站，功能都很简单，但是用户真的有需求，只要做好体验，做好SEO，流量就会越来越大。<br><a href="https://shurt.pw/">shurt.pw</a> 月访问量 300 万，解决生成密码的需求。<br><a href="https://wordcounter.icu/">wordcounter.icu</a> 月访问量 260 万，解决字数统计需求。<br>字数统计这个我常用的是国内一个开发者做的 <a href="https://eteste.com/">eteste.com</a> ，月访问量 30 万。</p><p>发3个站，感兴趣的即友可以研究下<br>rentry.org 月访问量 670 万，很简单的工具站，就 2 个页面。这个站还有个域名 rentry.co 月访问量 1040万。</p><p>chatgptfy.com 月访问量 170万，主要流量来自于搜索，你去仔细分析搜索词会有大发现。</p><p>chatgptdownload.org 月访问量 130万，我不提示了，请你去发掘发现。</p><p>我的产品思路：</p><p><a href="https://tools.miku.ac/">https://tools.miku.ac/</a></p><p><a href="https://tools.miku.ac/driver/">https://tools.miku.ac/driver/</a></p><p><a href="https://tools.miku.ac/china_colors/">https://tools.miku.ac/china_colors/</a></p><p><a href="https://tools.miku.ac/yi_ge_ding_lia/">https://tools.miku.ac/yi_ge_ding_lia/</a></p>]]></content>
      
      
      <categories>
          
          <category> 微信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微SEO </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的云服务器初始化做哪些（持续更新）</title>
      <link href="/2023/06/21/2023-06-21-%E6%88%91%E7%9A%84%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E5%81%9A%E5%93%AA%E4%BA%9B/"/>
      <url>/2023/06/21/2023-06-21-%E6%88%91%E7%9A%84%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E5%81%9A%E5%93%AA%E4%BA%9B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>此地禁止大声喧哗</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>三年之期已到，我的阿里云服务器也到期，我的服务要迁移了。思来想去，还是选择了腾讯云，只因我选择过阿里云</p><p>一个身份证可实名三个腾讯云账号，所以如果买三年的低配服务器部署应用，阿里云三个，腾讯云三个，华为云三个，ucloud 三个，共计 36 年，够程序员的职业生涯了（当然今年阿里、华为云没有三年服务器，三年后不知道还有没有三年服务期）</p><p><img src="https://s2.loli.net/2023/06/02/egoDdSi5OFPIQ2Z.png" alt="个人认证"></p><h2 id="省流"><a href="#省流" class="headerlink" title="省流"></a>省流</h2><p>安装 oh-my-zsh 配置主题，安装自动补全、语法高亮插件</p><p>安装 docker、docker-compose  环境</p><p>iptables 除了 80 443 ssh 端口，其他全禁</p><p>安装 node 环境</p><p>安装 ruby 环境</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>自从有了 vercel 后，我将大多数前端项目都放在那儿，包括五年前端三年面试，博客，个人网站。服务器除了 bilibili录播姬和几个小 node 、ruby on rails demo 外，就没怎么用过，这两年在 v2ex 上看到几篇讲拿到服务器后可以部署哪些服务的帖子</p><ul><li><a href="https://www.v2ex.com/t/914108">好奇问问，自己的服务器，都会用来做什么</a></li><li><a href="https://www.v2ex.com/t/913860">当我拿到一台全新 Linux 服务器我会做什么</a></li></ul><p>就想着也在我的服务器上部署一些服务，这里当作记录</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>进入腾讯云服务器控制台</p><p>![image-20230620143434808](D:\Documents\PicGo Files\image-20230620143434808.png)</p><p>点更多，重置密码，输入新密码</p><p>注意，腾讯云的轻量服务器的初始登录名是 ubuntu试了好几次 root 才发现这个坑）</p><p>![image-20230617084650969](D:\Documents\PicGo Files\image-20230617084650969.png)</p><h3 id="复制该机器的公网-ip"><a href="#复制该机器的公网-ip" class="headerlink" title="复制该机器的公网 ip"></a>复制该机器的公网 ip</h3><p>在本地 hosts 文件里写下 <code>公网ip server1</code> （比如 1.2.3.4 server1）保存即可。</p><blockquote><p>同理，笔者有些项目在 wsl2 只开发，进入 wsl 中， <code> vim /etc/hosts</code>，将  <code>公网ip server1</code> 放入其中即可</p></blockquote><p>这个步骤是为了设置别名，以后通过 ssh 登录服务器，只需要<code>ssh 用户名@serve1</code> 即可，但我们还需要登录密码，所以我们需要复制 ssh 密钥</p><h3 id="复制SSH密钥到目标主机，开启无密码SSH登录"><a href="#复制SSH密钥到目标主机，开启无密码SSH登录" class="headerlink" title="复制SSH密钥到目标主机，开启无密码SSH登录"></a>复制SSH密钥到目标主机，开启无密码SSH登录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id ubuntu@server1</span><br><span class="line"><span class="comment"># 回答 yes </span></span><br><span class="line"><span class="comment"># 输入密码</span></span><br></pre></td></tr></table></figure><p>之后输入 <code>ssh ubuntu@server1</code> ，就不需要登录密码了</p><p>![image-20230617084849141](D:\Documents\PicGo Files\image-20230617084849141.png)</p><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Docker</span></span><br><span class="line">apt install software-properties-common</span><br><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br><span class="line"><span class="comment"># 安装 docker-compose</span></span><br><span class="line">sudo apt install docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 oh-my-zsh 配置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 git vim</span></span><br><span class="line">apt update</span><br><span class="line">apt install -y git vim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 node 环境</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 ruby 环境</span></span><br></pre></td></tr></table></figure><h3 id="Docker-加速"><a href="#Docker-加速" class="headerlink" title="Docker 加速"></a>Docker 加速</h3><p>打开 <a href="https://link.zhihu.com/?target=https://cr.console.aliyun.com/">阿里云容器镜像服务</a> 网页，点击【镜像工具】-【镜像加速器】，然后根据提示加速即可（所有操作要在 root@server1 账户里运行）</p><p>前往 <code>/etc/docker/daemon.json</code> 中写入如下内容（如果文件不存在请新建该文件）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;填入以上链接&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="放开防火墙"><a href="#放开防火墙" class="headerlink" title="放开防火墙"></a>放开防火墙</h3><p>防火墙命令</p><p><a href="https://blog.51cto.com/u_15057832/4537317">https://blog.51cto.com/u_15057832/4537317</a></p><p>先下载 firewall-cmd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">sudo apt install firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看放开的端口</span></span><br><span class="line">firewall-cmd --list-ports</span><br><span class="line"><span class="comment"># 开放的服务</span></span><br><span class="line">firewall-cmd --list-services</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关掉 firewall 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure><p>添加指定端口</p><p>比如我们现在要打开对外2356/tcp端口，可以使用下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --add-port=2356/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br><span class="line">firewall-cmd --list-ports <span class="comment">#2356/tcp</span></span><br></pre></td></tr></table></figure><h2 id="安装软件-1"><a href="#安装软件-1" class="headerlink" title="安装软件"></a>安装软件</h2><p>数据统计和分析工具：matomo</p><p>生成短链并统计点击：polr</p><p>wechaty：聊天机器人</p><p>windmark.pro 编写</p><p>blog 挂了一个博客<br>rssant 订阅 rss 源每天摸鱼用的<br>syncthing 同步文件，家里和公司电脑的笔记等<br>frp 在公司远程自己电脑用的<br>rustdesk 远程连接，和朋友一起用的<br>memos 一个碎片化的备忘录<br>alist 聚合网盘用的<br>artalk 一个自部署的评论程序给博客用的<br>excalidraw 一个自部署的白板<br>portainer 在线管理 docker 程序<br>umami 监测网站访问数据用的<br>vocechat 一个仿 discord 的聊天室，偶尔交流信息会用到<br>包括放了图片和文件用来做 cdn</p><p>服务挂了报警</p><p><a href="https://weibo.com/ttarticle/p/show?id=2309404669439416336911">https://weibo.com/ttarticle/p/show?id=2309404669439416336911</a></p><p><a href="https://github.com/easychen/windmark-practice">https://github.com/easychen/windmark-practice</a></p><p>数据统计和分析工具：matomo</p><p>生成短链并统计点击：polr</p><p>wechaty：聊天机器人</p><p>windmark.pro 编写</p><p>内网穿透：</p><p>RSSHub：订阅 rss</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/366883774">我的云服务器初始化脚本</a></li><li><a href="https://www.v2ex.com/t/914108">好奇问问，自己的服务器，都会用来做什么</a></li><li><a href="https://www.v2ex.com/t/913860">当我拿到一台全新 Linux 服务器我会做什么</a></li><li><a href="https://weibo.com/ttarticle/p/show?id=2309404669439416336911">云服务器都99一年了，除了买来吃灰，你还能用来装这些免费云软件</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vite + React + TypeScript 最佳实践（2023）</title>
      <link href="/2023/05/22/2023-05-22-Vite+React+TypeScript%20%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
      <url>/2023/05/22/2023-05-22-Vite+React+TypeScript%20%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<p>做个最佳实践，然后弄出个模板</p><p>一个 React+ TS + Vite + tailwind 开箱即用的mobile开发模板</p><p>一个 React+ TS + Vite + <a href="https://ui.shadcn.com/">Radix UI</a> 开箱即用的后台开发模板</p><p><a href="https://github.com/ywanzhou/vue3-template">https://github.com/ywanzhou/vue3-template</a></p><p><a href="https://github.com/Murked/vue-tailwind-admin">https://github.com/Murked/vue-tailwind-admin</a></p><p>vue-element-admin：</p><p>我也弄一个 react-element-admin</p><p>前言：我的 vscode 配置</p><p>vite：脚手架</p><p>路由：react-router-dom（react router v6实际上已经实现了KeepAlive的功能）</p><p>状态库：zustand</p><p>请求库：axios</p><p>用于请求数据的 hooks 库：swr</p><p>动画库： @react-spring/web</p><p>更优雅的写 className，代替 classnames: clsx</p><p>css 解决方案：sass</p><p>css 格式化: normalize</p><p>获取真正的 vh：vh-check</p><p>icon 库: <a href="https://react-icons.github.io/react-icons/">react-icons</a></p><p>懒加载：React.lazy</p><p>不匹配：<code>&lt;Route path=&quot;*&quot; element=&#123;&lt;NotFound /&gt;&#125; /&gt;</code></p><p>icon 设计：<a href="https://favicon.io/emoji-favicons/">https://favicon.io/emoji-favicons/</a></p><p>svg：<a href="https://tabler-icons.io/">https://tabler-icons.io/</a> ⭐</p><p>svg：<a href="https://www.svgrepo.com/">https://www.svgrepo.com/</a></p><p>eva-icons</p><p>做一个 模版</p><p><a href="https://github.com/saberc8/vue3-vant-template">https://github.com/saberc8/vue3-vant-template</a></p><p>之后的 movie 项目就是基于这个来做</p>]]></content>
      
      
      <categories>
          
          <category> 10X程序员 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>凡人激励五十言</title>
      <link href="/2023/04/24/2023-04-24-%E5%87%A1%E4%BA%BA%E6%BF%80%E5%8A%B150%E8%A8%80/"/>
      <url>/2023/04/24/2023-04-24-%E5%87%A1%E4%BA%BA%E6%BF%80%E5%8A%B150%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<p>当今社会，中美冲突，经济下行。人生已面临生死存亡之际。设立东、西两厂，监视所有心情。东厂负责对抗世界，西厂负责东厂管不了的事情。现收集激励语句，时常读之，三省吾身</p><ol><li>vczh 在知乎问题 <a href="https://www.zhihu.com/question/35864522">如何能以后达到温赵轮三位大神的水平？</a>下的回答：</li></ol><blockquote><p>这十几年我一共做了三件事：</p><p>1、不以赚钱为目的选择学习的内容；</p><p>2、以自己是否能造出轮子来衡量学习的效果；</p><p>3、坚持每天写自己的代码，前 10 年每天至少 6 个小时，不包含学习和工作的时间。</p><p>就做了一点微小的工作，很惭愧，谢谢大家。</p></blockquote><ol start="2"><li><p>1.理论知识学的刚刚好就行不用从第一页开始看</p><p>2.明确目标，代入学会的情景，把目标具体化比如为了能在女朋友生日上谈这首曲子</p><p>3.找3个以上学习资源，从不同观点学习，如果走了弯路还有别的资源可以救回来</p><p>4.制定学习计划，把要学的东西拆分学再组合到一起练习</p><p>5.多实践，模仿做几个练习，最后再自己做一个教程上没有的东西</p><p>6.复盘失败</p><p>7.教给别人（展哥）</p></li><li><p>小说动笔于二〇一四年中。廿年前写过两三千字的短篇，坐下一小时即完成一篇，艳情、鬼怪、科幻，刊发在八卦周刊上，赚稿费，过日子，从没认真对待自己的作品。到了五十一岁才开始写长篇，既然为的不再是稿费，总得认真一些，是前所未有地认真，不管每夜多晚上床睡觉，翌晨八点必起床，坐到书桌前，写完一千字再忙其他。有时候只写出几百字，甚至几十字，甚至几个字，但仍坚持每天写，因有一回跟杨照在台北的国家音乐厅吃晚饭时，他提醒我：“必须每天写，停下来了便会永远停下来。”我向来敬佩这位大哥，听他的，果然有效。（马家辉）</p></li><li><p>我们总是高估技术的短期效应，而低估他们的长期影响力（李开复）</p></li><li><p>自信、坚强、认真、宽容（老板八字真言）</p></li><li><p>不平则鸣，有骨气；不平则怨，没出息（李敖）</p></li><li><p>生活上要知足，学习上要不知足，工作上要知不足（季羡林）</p></li><li><p>如果你有强烈的好奇心，祝贺你，你的智力胃口很好！</p></li><li><p>得一个后果不算严重的慢性病，是确保健康长寿的最好方式。</p></li><li><p><strong>要努力</strong>。换句文绉绉的表示法，就是：<strong>万事无他，唯手熟尔</strong>。（<a href="https://mp.weixin.qq.com/s/QvXIDpyrpiOmvEhcOUUmxQ">天生不聪明</a>）</p></li><li><p>真正的有趣是你觉得世界有趣，而假的有趣是你只觉得自己有趣</p></li><li><p>你还很年轻，将来你会遇到很多人，经历很多事，得到很多，也会失去很多，但无论如何，有两样东西，你绝不能丢弃，一个叫良心，一个叫理想。（当年明月）</p></li><li><p>成功只有一个——按照自己的方式，去度过人生（当年明月）</p></li><li><p>比较是万恶之源，而恶会受到到惩罚（老瑜）</p></li><li><p>优于别人，并不高贵，真正的高贵应该是优于过去的自己（海明威）</p></li><li><p>人境遇的改变往往是非线性的。积累和等待的过程很难熬，这是很多人无法改变的原因之一</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 10X程序员 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 激励 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的 VScode 配置</title>
      <link href="/2023/03/08/2023-03-08-%E6%88%91%E7%9A%84vscode%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/03/08/2023-03-08-%E6%88%91%E7%9A%84vscode%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要是为了记录自己的 VSCode 配置，万一哪一天电脑重置，方便自己配置</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>JetBrains Mono，前往<a href="www.jetbrains.com/lp/mono/">字体官网</a>，下载并安装字体</p><p>进入 VSCode 中，<code>ctrl + ,</code> 打开设置面板，在  Editor: Font Family 栏添加字体：<code>JetBrains Mono, Fira Code, Consolas, &#39;Courier New</code></p><p>或者是打开 <code>settings.json</code> 中，在其中填入</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">...</span><br><span class="line"><span class="attr">&quot;editor.fontFamily&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JetBrains Mono, Fira Code, Consolas, &#x27;Courier New&#x27;, monospace&quot;</span><span class="punctuation">,</span></span><br><span class="line">...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>推荐在 json 中配置（后续也会在这个json中配置）</p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>主题：Dark Molokai Theme</p><p>在插件市场中收缩Dark Molokai Theme，或者去<a href="marketplace.visualstudio.com/items?itemName=nonylene.dark-molokai-theme">官网</a> 安装主题，并在 <code>settings.json</code> 中配置主题</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;workbench.colorTheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Dark (Molokai)&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.fontFamily&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JetBrains Mono, Fira Code, Consolas, &#x27;Courier New&#x27;, monospace&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="界面布局"><a href="#界面布局" class="headerlink" title="界面布局"></a>界面布局</h2><p>看到几个大佬的 activityBar 都放在屏幕右边，因为这样一来，编辑器就不会因为我们切换sidebar 的可见而左右跳动，同样在 <code>settings.json</code> 中配置屏幕位置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;workbench.colorTheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Dark (Molokai)&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;workbench.sideBar.location&quot;</span><span class="punctuation">:</span> <span class="string">&quot;right&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.fontFamily&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JetBrains Mono, Fira Code, Consolas, &#x27;Courier New&#x27;, monospace&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="在-VSCode-中集成-GitBash"><a href="#在-VSCode-中集成-GitBash" class="headerlink" title="在 VSCode 中集成 GitBash"></a>在 VSCode 中集成 GitBash</h2><p>同样，在 <code>settings.json</code> 中配置，将配置中的 <code>bash.path</code> 更换为自己的路径，window 中需要<code>\\</code> 表示，配置如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;workbench.colorTheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Dark (Molokai)&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;workbench.sideBar.location&quot;</span><span class="punctuation">:</span> <span class="string">&quot;right&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.fontFamily&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JetBrains Mono, Fira Code, Consolas, &#x27;Courier New&#x27;, monospace&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;terminal.integrated.profiles.windows&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bash&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\Development\\Git\\bin\\bash.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;-i&quot;</span><span class="punctuation">,</span> <span class="string">&quot;-l&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;terminal.integrated.defaultProfile.windows&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bash&quot;</span><span class="punctuation">,</span> <span class="comment">// 默认打开 bash</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>改完重启后，再打开终端，你会看到</p><p><img src="https://s2.loli.net/2023/05/26/IhmigUAxl1JEonZ.png" alt="vscode in bash"></p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>Prettier - Code formatter：代码格式化工具，安装好之后。在 <code>settings.json</code> 中配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">...</span><br><span class="line"><span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>EditorConfig for VS Code： EditorConfig </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root = true</span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">charset = utf-8</span><br><span class="line">end_of_line = lf</span><br><span class="line">max_line_length = 80</span><br><span class="line">indent_style = tab</span><br><span class="line">insert_final_newline = true</span><br><span class="line">trim_trailing_whitespace = true</span><br></pre></td></tr></table></figure><p>GitHub Copilot： AI 机器人辅助写代码</p><p>Live Sass Compiler：将写好的 sass 文件转成 css 文件</p><p>VSCode Great Icons：可在文件管理的树目录显示图标</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://space.bilibili.com/4349808/article">方应杭 B站 专栏</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 10X程序员 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>尝试用 WSL2 + Ubuntu 开发</title>
      <link href="/2023/03/02/2023-03-02-%E5%B0%9D%E8%AF%95%E7%94%A8WSL2+Ubuntu%E5%BC%80%E5%8F%91/"/>
      <url>/2023/03/02/2023-03-02-%E5%B0%9D%E8%AF%95%E7%94%A8WSL2+Ubuntu%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>用 WSL2 模拟 Linux 开发环境，然后用 Linux 开发项目，熟悉各种 Linux 系统和命令，为以后成为大神埋下习惯的种子</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>可不看</p></blockquote><p>笔者是 Window 用户，去年真正学 Linux，以前也用过虚拟机开发，也有过各种尝试，但因为各种原因，还是回归 Window 开发</p><p>去年看到方应杭的直播开发，了解到 docker + VS code 的开发模式，而后就写了 <a href="https://blog.azhubaby.com/2022/12/10/2022-12-10-%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E4%BD%93%E9%AA%8C%EF%BC%9Adev-container/">手把手提高开发体验：dev-container</a>，配置好后我没有继续研究，没有马上把环境切换成，直到最近，换电脑，才想着就用 Linux 开发吧</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>什么是 WSL</p><p>Window 中的 Linux 系统，Window 提供的内置虚拟机</p><p>所以我们可以在 Window 中安装 Ubuntu、Centos 等 Linux 系统</p><p>但他的缺点是文件系统和 Window 不一致，但可以共享</p><p>说白了，如果你在 Linux 中操作 Window 中的文件，会卡顿。反之亦然</p><p>WSL、docker、Window 的虚拟机（Hyper-v）的关系相当于，Window 用 Hyper-v 实现了虚拟机，也就是 WSL，window 中的 docker 也是基于此技术来实现容器化的</p><h2 id="省流版"><a href="#省流版" class="headerlink" title="省流版"></a>省流版</h2><p>修改默认安装目录到 D 盘</p><p>更换阿里云软件源</p><p>更新软件</p><p>安装 oh my zsh</p><p>配置 ssh</p><p>node 环境</p><p>ruby 环境</p><h2 id="修改默认安装目录到-D-盘"><a href="#修改默认安装目录到-D-盘" class="headerlink" title="修改默认安装目录到 D 盘"></a>修改默认安装目录到 D 盘</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wsl --<span class="built_in">help</span> <span class="comment"># 查看文档</span></span><br><span class="line">wsl --list <span class="comment"># 查看启动的 wsl 数量</span></span><br><span class="line">wsl --list --verbose <span class="comment"># 列出已安装的 Linux 发行版</span></span><br><span class="line">wsl --set-default-version &lt;Version&gt; <span class="comment"># 设置默认 WSL 版本</span></span><br><span class="line">wsl --set-default &lt;Distribution Name&gt; <span class="comment"># 设置默认 Linux 发行版</span></span><br><span class="line">wsl --shutdown <span class="comment"># 关闭 wsl</span></span><br><span class="line">wsl --<span class="built_in">export</span> &lt;Distribution Name&gt; &lt;FileName&gt; <span class="comment"># 导出</span></span><br><span class="line">wsl --unregister Unbuntu-18.04 <span class="comment"># 注销当前分发版</span></span><br><span class="line">wsl --import &lt;Distribution Name&gt; &lt;InstallLocation&gt; &lt;FileName&gt; <span class="comment"># 导入</span></span><br><span class="line">ubuntu1804 config --default-user johan <span class="comment"># 设置默认登陆用户</span></span><br></pre></td></tr></table></figure><blockquote><p>同理，可以把 docker 也放到 D 盘中</p></blockquote><p>更多命令可以前往<a href="https://learn.microsoft.com/zh-cn/windows/wsl/basic-commands">官网</a>查看</p><h2 id="更换阿里云软件源"><a href="#更换阿里云软件源" class="headerlink" title="更换阿里云软件源"></a>更换阿里云软件源</h2><p>1.备份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure><p>2.修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>将 source.list 文件内容替换成下面的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><h2 id="更新软件"><a href="#更新软件" class="headerlink" title="更新软件"></a>更新软件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt upgrade -y</span><br></pre></td></tr></table></figure><h2 id="安装-oh-my-zsh"><a href="#安装-oh-my-zsh" class="headerlink" title="安装 oh my zsh"></a>安装 oh my zsh</h2><p>安装 zsh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install zsh -y</span><br></pre></td></tr></table></figure><p>安装 ohmyzsh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>安装 ohmyzsh 插件，按照自己的喜好</p><blockquote><p>可以看看 <a href="https://github.com/antfu/dotfiles/blob/main/.zshrc">antfu 的配置</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/denysdovhan/spaceship-prompt.git <span class="string">&quot;<span class="variable">$ZSH_CUSTOM</span>/themes/spaceship-prompt&quot;</span> --depth=1</span><br><span class="line"><span class="built_in">ln</span> -s <span class="string">&quot;<span class="variable">$ZSH_CUSTOM</span>/themes/spaceship-prompt/spaceship.zsh-theme&quot;</span> <span class="string">&quot;<span class="variable">$ZSH_CUSTOM</span>/themes/spaceship.zsh-theme&quot;</span></span><br></pre></td></tr></table></figure><p>进入 <code>.zshrc</code> 文件，并修改成<code>ZSH_THEME=&quot;spaceship&quot;</code>，并让配置立马生效 <code>source ~/.zshrc</code></p><p>将 ohmyzsh 设置为默认编辑器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s $(<span class="built_in">which</span> zsh)</span><br></pre></td></tr></table></figure><h2 id="配置-ssh"><a href="#配置-ssh" class="headerlink" title="配置 ssh"></a>配置 ssh</h2><p>生成 github 公钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;t511069160@qq.com&quot;</span> -f <span class="string">&quot;~/.ssh/id_rsa_github&quot;</span></span><br></pre></td></tr></table></figure><p>生成 gitlab 公钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;XX&quot;</span> -f <span class="string">&quot;~/.ssh/id_rsa_gitlab&quot;</span></span><br></pre></td></tr></table></figure><p>配置 config 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Host github</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_github</span><br><span class="line"></span><br><span class="line">Host 10.110.119.233</span><br><span class="line">HostName 10.110.119.233</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_gitlab</span><br></pre></td></tr></table></figure><p>测试是否配置成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T git@10.110.119.233</span><br></pre></td></tr></table></figure><h2 id="node-环境"><a href="#node-环境" class="headerlink" title="node 环境"></a>node 环境</h2><p>使用 <a href="https://github.com/nvm-sh/nvm">nvm</a> 来控制 node 版本，因为有些老项目还在用 14 版本的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash</span><br></pre></td></tr></table></figure><p>如果说安装失败或者安装很慢，就在 <code>/etc/hosts</code> 中将 <code>raw.githubusercontent.com</code> 域名映射下，具体方法可看<a href="https://github.com/521xueweihan/GitHub520">GitHub520</a></p><p>将配置写进 .nvm 中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="subst">$([ -z <span class="string">&quot;<span class="variable">$&#123;XDG_CONFIG_HOME-&#125;</span>&quot;</span> ] &amp;&amp; printf %s <span class="string">&quot;<span class="variable">$&#123;HOME&#125;</span>/.nvm&quot;</span> || printf %s <span class="string">&quot;<span class="variable">$&#123;XDG_CONFIG_HOME&#125;</span>/nvm&quot;</span>)</span>&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> <span class="comment"># This loads nvm</span></span><br></pre></td></tr></table></figure><p>再让配置立即生效<code>source ~/.zshrc</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nvm --version <span class="comment"># 0.39.3</span></span><br><span class="line">nvm install 16.19.1 <span class="comment"># 下载 16.19.1 版本的 node</span></span><br><span class="line">nvm list <span class="comment"># 查看 node 列表</span></span><br><span class="line">nvm use 16.19.1 <span class="comment"># 使用 16.19.1 版本的 node</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/07/GPZ8kqoJmCjx54d.png" alt="nvm下载"></p><h2 id="ruby-环境"><a href="#ruby-环境" class="headerlink" title="ruby 环境"></a>ruby 环境</h2><p>使用 rvm 来管理 ruby，安装文档参考<a href="https://rvm.io/">官网</a></p><p>安装 GPG keys</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg2 --keyserver keyserver.ubuntu.com --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB</span><br></pre></td></tr></table></figure><p>报错：</p><p><img src="https://s2.loli.net/2023/03/06/wzCd8NLprSuKfbe.png" alt="没有gnupg2库"></p><p>先下载 gnupg2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install grupg2 -y</span><br></pre></td></tr></table></figure><p>grupg2 安装好了，就重新 GPG keys。再安装 rvm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.rvm.io | bash -s stable</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/06/n6VyARw5ZkTapF9.png" alt="安装结果"></p><p>安装好后，我们需要修改 ruby 安装源，来提高安装速度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;ruby_url=https://cache.ruby-china.com/pub/ruby&quot;</span> &gt; /usr/local/rvm/user/db</span><br></pre></td></tr></table></figure><blockquote><p>看截图中的绿色字，RVM 安装的路径</p></blockquote><p>使 rvm 命令生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /usr/local/rvm/scripts/rvm</span><br></pre></td></tr></table></figure><p>此时，<code>rvm -v</code> 就能看到 <code>rvm 1.29.12(latest)...</code></p><p>安装 ruby</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rvm install ruby-3.1.3</span><br><span class="line">rvm list known：<span class="comment">#查看</span></span><br><span class="line">rvm list：<span class="comment">#查看</span></span><br><span class="line">rvm use 3.1.3 --default <span class="comment">#使用 3.13 为默认版本的</span></span><br><span class="line">ruby -v <span class="comment"># ruby 3.1.3p185</span></span><br></pre></td></tr></table></figure><p>安装 rails</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gem install rails --verbose <span class="comment"># --verbose 可以查看进度</span></span><br><span class="line">rails -v <span class="comment"># 7.0.4</span></span><br></pre></td></tr></table></figure><h2 id="遇到的问题（一）"><a href="#遇到的问题（一）" class="headerlink" title="遇到的问题（一）"></a>遇到的问题（一）</h2><p>之前用 <code>curl -sSL https://get.rvm.io | bash -s stable</code> 安装完后，使用<code>gem install rails</code> 说<code>command not found ubuntu</code>，解决不了，后来尝试了各种方法安装，例如下载源码，例如用<code>sudo apt-get install ruby-full</code>，后来都不是很好使</p><p>可怪自己 linux 基础太差，英语又不好，下载完 rvm 后，它已经提示了，让我切换用户并重新登录</p><p><img src="https://s2.loli.net/2023/03/08/59NaFCtPhqEinXR.png" alt="安装完rvm后的提示"></p><p>而我第二次安装的契机是不死心，还是想用 rvm 安装，然后就想到先卸载，再重新安装</p><p>发现了 <code>apt-get purge rvm</code> 、<code>apt-get remove rvm</code> 等命令，第二次安装我用了 sudo 命令，安装地址改成了 <code>/usr/shar/rvm</code></p><p>删除 rvm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get purge rvm</span><br></pre></td></tr></table></figure><p>重新安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.rvm.io | sudo bash -s stable</span><br></pre></td></tr></table></figure><p>第一步，将正在用的用户添加到 rvm 组中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -a -G rvm johan</span><br></pre></td></tr></table></figure><p>第二步，注销-再次登录</p><p>我的办法比较土，先切换到 root，再切回来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br><span class="line">su johan</span><br></pre></td></tr></table></figure><p>第三步，运行生效命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile.d/rvm.sh</span><br></pre></td></tr></table></figure><p>这样就安装成了</p><h2 id="遇到的问题（二）"><a href="#遇到的问题（二）" class="headerlink" title="遇到的问题（二）"></a>遇到的问题（二）</h2><p>因为在 WSL 中开发，但是有时候要用手机来查看样式问题，所以需要在手机端访问，但是 WSL 启动的服务，手机端访问不了。笔者对网络方面的知识不了解，也不想了解。按照<a href="https://juejin.cn/post/7104311213500137479">从局域网访问 WSL2</a> 这篇文章的操作来做</p><p>先开启对应端口防火墙，再将 WSL 上的 ip 、端口映射到本地</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>做事情都要有所目的，当初写 <a href="https://blog.azhubaby.com/2022/12/10/2022-12-10-%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E4%BD%93%E9%AA%8C%EF%BC%9Adev-container/">手把手提高开发体验：dev-container</a> 时，想着把环境配置成一致，方便项目部署。但发现所占内存太大，笔记本（12G）带不动。现如今新电脑（32G）虽然可以用此方法来开发，但笔者的目的变了，笔者现如今想学的是 Linux 、bash，使用 WSL 能随时随地接触它，熟悉它，习惯它</p><p>开发还是用 WSL ，但是写东西，例如写博客之类的还是会依赖于 Windows，所以真不如别人说的还不如买一台 mac 呢</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://learn.microsoft.com/zh-cn/windows/wsl/basic-commands">WSL 的基本命令</a></li><li><a href="https://developer.aliyun.com/article/704603">Ubuntu 更换阿里云软件源</a></li><li><a href="https://setup.hyoban.cc/">hyoban 电脑配置文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 10X程序员 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> wsl </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装 docker 后无法启动</title>
      <link href="/2023/02/13/2023-02-13-%E5%AE%89%E8%A3%85%20docker%20%E5%90%8E%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8/"/>
      <url>/2023/02/13/2023-02-13-%E5%AE%89%E8%A3%85%20docker%20%E5%90%8E%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>好久没写文章了，一部分是忙了，另一部分是过年懒了，还有一部分是在学习 ruby，想搞个前端七天学 ruby 系列文章，敬请期待</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>最近在部署 ruby 项目中，遇到了 docker 19 版本无法在两个容器中互联的问题，后升级 docker 至最新版本（23）解决，但升级完后之后，无法启动</p><p>可惜的很，没截图</p><p>当使用 <code>docker --version</code> 或者 <code>docker ps</code> 时，说没有启动</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to start Docker Application Container Engine.</span><br></pre></td></tr></table></figure><p>通过<code>systemctl status docker</code> 启动 docker，报错</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">failed to start daemon: Error initializing network controller: Error creating default &quot;bridge&quot; network</span><br></pre></td></tr></table></figure><p>没启动 bridge 网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=docker --change-interface=docker0</span><br><span class="line"><span class="comment"># 防火墙加入 docker0</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"><span class="comment"># 重启防火墙</span></span><br></pre></td></tr></table></figure><p>这样 docker 就正常运行了</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://stackoverflow.com/questions/65213831/failed-to-start-daemon-error-initializing-network-controller-error-creating-de">failed to start daemon: Error initializing network controller: Error creating default “bridge” network</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端路由hash、history的实现</title>
      <link href="/2023/01/09/2023-01-09-%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1hash%E3%80%81history%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/01/09/2023-01-09-%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1hash%E3%80%81history%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个坑，已经埋在笔者的待办事项里很久，就好比一滴酱油滴在白色的桌子上，现在有时间了，很想把它“擦掉”</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>前端路由实现有两种，一是 hash，另一种是 histroy。</p><p>hash 原本是为了定位，笔者印象中最开始是 PC 端商城的楼层，点击跳转到某一模块</p><p>history 是 HTML5 新出的 API，它属于 bom。通过 history 对象可以操作浏览器的会话历史以及向前向后跳转</p><p>笔者是 React 开发者，Vue 好久没用了，所以以下内容是以 React 的角度描写</p><p>前端开发——React 全家桶——路由采用第三方库 <a href="https://github.com/remix-run/react-router">react-router</a> 和—— react-router 的底层是 <a href="https://github.com/remix-run/history">history</a> 库</p><p>我们在写 react 的路由写法时，通常为两种，hash 和 history ，使用它的本质是 history 库</p><p>笔者在这里写个简单的</p><h2 id="hash-模式"><a href="#hash-模式" class="headerlink" title="hash 模式"></a>hash 模式</h2><p>它的本质是通过监听hash变化事件来修改路由内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/user&quot;</span>&gt;</span>User<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">onHashChange</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> view = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;view&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">switch</span> (location.<span class="property">hash</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">case</span> <span class="string">&quot;#/home&quot;</span>:</span></span><br><span class="line"><span class="language-javascript">          view.<span class="property">innerHTML</span> = <span class="string">&quot;Home&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">case</span> <span class="string">&quot;#/user&quot;</span>:</span></span><br><span class="line"><span class="language-javascript">          view.<span class="property">innerHTML</span> = <span class="string">&quot;User&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">case</span> <span class="string">&quot;#/about&quot;</span>:</span></span><br><span class="line"><span class="language-javascript">          view.<span class="property">innerHTML</span> = <span class="string">&quot;About&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default</span>:</span></span><br><span class="line"><span class="language-javascript">          view.<span class="property">innerHTML</span> = <span class="string">&quot;Home&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;hashchange&quot;</span>, onHashChange);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/02/13/Rz1TVZwb687qHJ3.gif" alt="hash模式"></p><h2 id="history-模式"><a href="#history-模式" class="headerlink" title="history 模式"></a>history 模式</h2><p>看了 hash 模式，我们会觉得很简单，无非是监听 hash 的变化，现在我们再看 history 模式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/user&quot;</span>&gt;</span>User<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> elements = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;a[href]&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    elements.<span class="title function_">forEach</span>(<span class="function"><span class="params">el</span> =&gt;</span></span></span><br><span class="line"><span class="language-javascript">      el.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> test = el.<span class="title function_">getAttribute</span>(<span class="string">&quot;href&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        history.<span class="title function_">pushState</span>(<span class="literal">null</span>, <span class="literal">null</span>, el.<span class="title function_">getAttribute</span>(<span class="string">&quot;href&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">onPopState</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    );</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">onPopState</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> view = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;view&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">switch</span> (location.<span class="property">pathname</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">case</span> <span class="string">&quot;/home&quot;</span>:</span></span><br><span class="line"><span class="language-javascript">                view.<span class="property">innerHTML</span> = <span class="string">&quot;Home&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">case</span> <span class="string">&quot;/user&quot;</span>:</span></span><br><span class="line"><span class="language-javascript">                view.<span class="property">innerHTML</span> = <span class="string">&quot;User&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">case</span> <span class="string">&quot;/about&quot;</span>:</span></span><br><span class="line"><span class="language-javascript">                view.<span class="property">innerHTML</span> = <span class="string">&quot;About&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">default</span>:</span></span><br><span class="line"><span class="language-javascript">                view.<span class="property">innerHTML</span> = <span class="string">&quot;Home&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;popstate&quot;</span>, onPopState);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>无非是把 hashchange 改成了 popstate，当 history 对象变化时，会出发 onPopState 事件，而我们的 history 模式不想 hash 模式那样，点击hash 对象时（#xx）会自动监听，所以我们遍历监听路由点，点击时实现和 hash 一样的模式，即点击时往历史中添加一条记录</p><p>线上demo：</p><ul><li><a href="https://demo.azhubaby.com/hash&history/hash.html">hash模式</a></li><li><a href="https://demo.azhubaby.com/hash&history/history.html">history模式</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手提高开发体验：dev-container</title>
      <link href="/2022/12/10/2022-12-10-%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E4%BD%93%E9%AA%8C%EF%BC%9Adev-container/"/>
      <url>/2022/12/10/2022-12-10-%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E4%BD%93%E9%AA%8C%EF%BC%9Adev-container/</url>
      
        <content type="html"><![CDATA[<p>之前看过方应杭的<a href="https://www.bilibili.com/video/BV1ZL4y1u7c4/">一期工作流视频</a>，讲他是如何配置开发环境的。讲真，这期视频给我一丝震撼，原来不用虚拟机也能在 linux 上开发，但是它的配置过于复杂，我想配置一套自己的一套开发环境</p><p>视频中的 remote-container 已经更名为 dev-container，而 0.245.2 以上版本的 dev-container 有问题，会报”An error occured setting up the container - Remote Docker”，在 <a href="https://github.com/microsoft/vscode-remote-release/issues/7165">Issues</a> 中有人给出了方法是降级到 0.245.2</p><p>当降级到 0.245.2，就可以愉快的使用 dev-container 了</p><p>现在我们已经成功了 dev-container 插件</p><p>现在我们要做的是，通过 dockerfile 生成一个 linux 容器，并在这个容器中开发</p><h2 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">uname</span> -a</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cat</span> /etc/os-release</span></span><br></pre></td></tr></table></figure><p>我们基于 centos:8 来构建一个镜像，其中，打印系统名和查看系统</p><p><img src="https://s2.loli.net/2022/12/25/4qgzatsyRXcrVo1.png" alt="基于centos的镜像"></p><p>点击添加终端，就进入容器中了，这个容器就是我们基于 vscode 的 dev-container 插件</p><p><img src="https://s2.loli.net/2022/12/25/8M1KUFEDfhBwian.png" alt="vscode中的linux"></p><p>如果只是个裸机，是万万不行的，我们需要安装一些开发环境和应用，提高我们的开发效率</p><h2 id="更新所有包"><a href="#更新所有包" class="headerlink" title="更新所有包"></a>更新所有包</h2><p>在更新包之前，我们要先修改 centos 的镜像源</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> /etc/yum.repos.d/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i <span class="string">&#x27;s/mirrorlist/#mirrorlist/g&#x27;</span> /etc/yum.repos.d/CentOS-*</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i <span class="string">&#x27;s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g&#x27;</span> /etc/yum.repos.d/CentOS-*</span></span><br></pre></td></tr></table></figure><p>修改成国内的镜像，再更新包</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum update -y</span></span><br></pre></td></tr></table></figure><h2 id="下载-vim"><a href="#下载-vim" class="headerlink" title="下载 vim"></a>下载 vim</h2><p>先下载 vim</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum install vim -y</span></span><br></pre></td></tr></table></figure><p>如何配置，怎么配置 vim，介于还处于新手阶段，就常规操作即可，不用配置什么</p><h2 id="下载-oh-my-zsh"><a href="#下载-oh-my-zsh" class="headerlink" title="下载 oh-my-zsh"></a>下载 oh-my-zsh</h2><p>如果冒冒失用它<a href="https://ohmyz.sh/#install">官网</a>的下载链接，会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RUN sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br><span class="line"><span class="comment"># curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused</span></span><br></pre></td></tr></table></figure><p>意思是说 Github 的 raw.githubusercontent.com 域名解析污染，访问不了</p><p>解决方法有不少，如通过修改 hosts 解决此问题，先在 <a href="https://www.ipaddress.com/">ipaddress</a>查询 raw.githubusercontent.com 的真实 IP，在修改 hosts</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure><p>添加<code>199.232.68.133 raw.githubusercontent.com</code></p><p><img src="https://s2.loli.net/2022/12/25/BWoc9CwzLYmlfKr.png" alt="hosts文件"></p><p>重新下载 zsh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/25/nchg7RyxvK3D5Gt.png" alt="zsh安装成功"></p><p>这方法只能在 linux 中使用，如果你要用 dockerfile 中修改 /etc/hosts，就行不通，因为 /etc/hosts 文件是只读的，笔者在这里花了不少时间想解决，但还是没找到解决方法</p><p>还有一种方法是修改下载源，换成国内地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>并将默认命令行修改成 on-my-zsh</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> chsh -s /bin/zsh</span></span><br></pre></td></tr></table></figure><p>但这个方法需要两个前提，一是需要下载 git</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum install git -y</span></span><br></pre></td></tr></table></figure><p>二是因为 centos 8 系统中并未带 chsh 命令工具，会提示 <code>chsh: command not found</code>，原因是系统没有自带的 <code>util-linux-user</code> 工具包导致，所以在执行 chsh 命令前，先安装它</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum install util-linux-user -y</span></span><br></pre></td></tr></table></figure><p>如此，我们就配置好了一个基于 centos 的有 vim、on-my-zsh 的 linux 环境</p><p>完整的 dockerfile 如下所示：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">uname</span> -a</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cat</span> /etc/os-release</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改镜像源</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> /etc/yum.repos.d/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i <span class="string">&#x27;s/mirrorlist/#mirrorlist/g&#x27;</span> /etc/yum.repos.d/CentOS-*</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i <span class="string">&#x27;s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g&#x27;</span> /etc/yum.repos.d/CentOS-*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新系统</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum update -y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># vim</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum install vim -y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chsh</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum install util-linux-user -y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum install git -y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># oh-my-zsh</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum install zsh -y</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh)</span>&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> chsh -s /bin/zsh</span></span><br></pre></td></tr></table></figure><p>光有这些不够，还要下载前端环境、如 node 、pnpm，还有后端环境，笔者最近也对 ruby 很感兴趣，也会在这里安装 ruby 环境</p><h2 id="前端环境"><a href="#前端环境" class="headerlink" title="前端环境"></a>前端环境</h2><p>我们采用 nvm 来控制 node 版本</p><p>安装 nvm 的方式有很多种，像方应杭是下载源码，再拷贝到容器中，如果没有网络限制，也可以用 curl 下载等等，我采用的是 <a href="https://github.com/nvm-sh/nvm#git-install">git install</a></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> NVM_DIR /root/.nvm</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> git <span class="built_in">clone</span> https://github.com/nvm-sh/nvm.git /root/.nvm/</span></span><br><span class="line"><span class="comment"># RUN git checkout v0.39.3</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sh <span class="variable">$&#123;NVM_DIR&#125;</span>/nvm.sh &amp;&amp;\</span></span><br><span class="line"><span class="language-bash"><span class="built_in">echo</span> <span class="string">&#x27;&#x27;</span> &gt;&gt; /root/.zshrc &amp;&amp;\</span></span><br><span class="line"><span class="language-bash"><span class="built_in">echo</span> <span class="string">&#x27;export NVM_DIR=&quot;$HOME/.nvm&quot;&#x27;</span> &gt;&gt; /root/.zshrc &amp;&amp;\</span></span><br><span class="line"><span class="language-bash"><span class="built_in">echo</span> <span class="string">&#x27;[ -s &quot;$&#123;NVM_DIR&#125;/nvm.sh&quot; ] &amp;&amp; &#123; source &quot;$&#123;NVM_DIR&#125;/nvm.sh&quot; &#125;&#x27;</span> &gt;&gt; /root/.zshrc &amp;&amp;\</span></span><br><span class="line"><span class="language-bash"><span class="built_in">echo</span> <span class="string">&#x27;[ -s &quot;$&#123;NVM_DIR&#125;/bash_completion&quot; ] &amp;&amp; &#123; source &quot;$&#123;NVM_DIR&#125;/bash_completion&quot; &#125; &#x27;</span> &gt;&gt; /root/.zshrc</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再通过 nvm 下载最新版本的 node</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> nvm install stable</span></span><br></pre></td></tr></table></figure><p>但是这样会报错，说 <code>nvm: command not found</code>，为什么这样，不求甚解，去找另一种解决方法</p><p>笔者选择先安装个默认版本的 node 和 npm，按照<a href="https://nodejs.org/zh-cn/download/package-manager/">这里</a>的包管理安装</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dnf module install nodejs:16</span></span><br></pre></td></tr></table></figure><blockquote><p>默认<code>dnf module install nodejs</code> 会安装 v10 版本，太低了，最高 16，选新不选久</p></blockquote><p>再下载 pnpm ，将其设为包管理器</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> curl -fsSL https://get.pnpm.io/install.sh | sh -</span></span><br></pre></td></tr></table></figure><p>如此一来，前端的开发环境以及 node 环境就在这个 dockerfile 中了</p><h2 id="ruby-环境"><a href="#ruby-环境" class="headerlink" title="ruby 环境"></a>ruby 环境</h2><p>我找的教程是<a href="https://www.server-world.info/en/note?os=CentOS_Stream_8&p=ruby&f=7">这个</a>，日本人做的，内容很齐全，按照步骤，能运行好环境</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dnf module install ruby:3.0 -y</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> curl https://dl.yarnpkg.com/rpm/yarn.repo &gt; /etc/yum.repos.d/yarn.repo</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dnf -y install ruby-devel rpm-build make gcc gcc-c++ gcc-gdb-plugin libxml2 libxml2-devel mariadb-devel zlib-devel libxslt-devel</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> gem install nokogiri -- --use-system-libraries</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> gem install rails --version=<span class="string">&quot;~&gt;7.0&quot;</span></span></span><br></pre></td></tr></table></figure><p>如此一来，我们的开发环境就初步弄好了，我将它发布到 <a href="https://hub.docker.com/repository/docker/johanbo/oh-my-docker">dockerhub</a> 上，如果有需要，可以以此改造</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇文章花了我不少时间，主要很多 linux 知识点为涉猎过，之前也没在虚拟机上配置 linux 的经验。不过还好，算完成了，如此一来，开发时就可以用 vscode + linux 开发应用了，剩下的就是熟悉它</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p><a href="https://www.bilibili.com/video/BV1ZL4y1u7c4">山竹记账：开发环境</a></p></li><li><p><a href="https://github.com/FrankFang/oh-my-docker">方应杭 Oh My Docker</a></p></li><li><p><a href="https://learnku.com/articles/32793">oh-my-zsh,最好用的 bash，没有之一</a></p></li><li><p><a href="https://realjf.io/docker/docker-modify-hosts/">Dockerfile 实现修改容器 hosts 文件内容</a></p></li><li><p><a href="https://stackoverflow.com/questions/52113738/starting-ssh-agent-on-windows-10-fails-unable-to-start-ssh-agent-service-erro">Starting ssh-agent on Windows 10 fails: “unable to start ssh-agent service, error :1058”</a></p></li><li><p><a href="https://stackoverflow.com/questions/71377715/vs-code-remote-container-using-ssh">VS Code: Remote Container: Using SSH</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发体验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> 开发体验 </tag>
            
            <tag> dev-container </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从面试题到插件机制的小思考</title>
      <link href="/2022/10/09/2022-10-09-%E4%BB%8E%E9%9D%A2%E8%AF%95%E9%A2%98%E5%88%B0%E6%8F%92%E4%BB%B6%E6%9C%BA%E5%88%B6%E7%9A%84%E5%B0%8F%E6%80%9D%E8%80%83/"/>
      <url>/2022/10/09/2022-10-09-%E4%BB%8E%E9%9D%A2%E8%AF%95%E9%A2%98%E5%88%B0%E6%8F%92%E4%BB%B6%E6%9C%BA%E5%88%B6%E7%9A%84%E5%B0%8F%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<p>起初是因为一道面试题，这个面试题是去年遇到的，即如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Operator</span> &#123;...&#125;</span><br><span class="line"><span class="keyword">var</span> op = <span class="keyword">new</span> <span class="title class_">Operator</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">op.<span class="title function_">add</span>(<span class="number">3</span>).<span class="title function_">minus</span>(<span class="number">2</span>).<span class="title function_">multi</span>(<span class="number">2</span>).<span class="title function_">division</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>写出 Operator 中的代码，当初不会写，因为完全没遇到过笔试写这类题目。当然，这也暴露了我基础薄弱的问题</p><p>现在，可以一解，其实很简单，add、minus、multi、division 都是 Operator 的方法，调用后能返回是因为返回了 this，this 指向调用者，所以还是指向实例（即 op）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Operator</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">initial</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">num</span> = initial</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">add</span>(<span class="params">num</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">num</span> = <span class="variable language_">this</span>.<span class="property">num</span> + num</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">minus</span>(<span class="params">num</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">num</span> = <span class="variable language_">this</span>.<span class="property">num</span> - num</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">multi</span>(<span class="params">num</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">num</span> = <span class="variable language_">this</span>.<span class="property">num</span> * num</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">division</span>(<span class="params">num</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">num</span> = <span class="variable language_">this</span>.<span class="property">num</span> / num</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> op = <span class="keyword">new</span> <span class="title class_">Operator</span>(<span class="number">1</span>)</span><br><span class="line">op.<span class="title function_">add</span>(<span class="number">3</span>).<span class="title function_">minus</span>(<span class="number">2</span>).<span class="title function_">multi</span>(<span class="number">2</span>).<span class="title function_">division</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意，一定要 return，你调用一个方法，不 return，就不会有结果。一般你调用方法总是要有返回值吧</p></blockquote><p>再次提醒，能链式调用的关键在于调用方法后返回 this，this 指向调用者即实例</p><p>而此类又能衍生思考一个问题，库的「插件」机制</p><p>无论是 Chrome 中的插件，还是 PhotoShop 中的插件，还是 Webpack（前端打包库） 中的插件，还是 jQuery、Axios、BetterScroll 等库的插件，在写应用程序时，为了扩展性，我们都会使用“插件思维”，把核心的功能实现出来，再通过插件机制来扩展自身</p><p>多说无益，如果使用插件机制来实现此功能，该如何改造呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Operator</span> &#123;</span><br><span class="line">    plugins = []</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">initial</span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">num</span> = initial   </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">use</span>(<span class="params">plugin</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">plugins</span>.<span class="title function_">push</span>(plugin)</span><br><span class="line">        <span class="variable language_">this</span>[plugin.<span class="property">name</span>] = plugin.<span class="property">exec</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这里加一个方法，调用显示结果</span></span><br><span class="line">    <span class="title function_">result</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">num</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AddPlugin</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;add&#x27;</span>,</span><br><span class="line">    <span class="attr">exec</span>: <span class="keyword">function</span>(<span class="params">num</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">num</span> = <span class="variable language_">this</span>.<span class="property">num</span> + num;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> minusPlugin = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;minus&#x27;</span>,</span><br><span class="line">    <span class="attr">exec</span>: <span class="keyword">function</span>(<span class="params">num</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">num</span> = <span class="variable language_">this</span>.<span class="property">num</span> - num;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> op = <span class="keyword">new</span> <span class="title class_">Operator</span>(<span class="number">5</span>)</span><br><span class="line">op.<span class="title function_">use</span>(<span class="title class_">AddPlugin</span>)</span><br><span class="line">op.<span class="title function_">use</span>(minusPlugin)</span><br><span class="line">op.<span class="title function_">add</span>(<span class="number">5</span>).<span class="title function_">minus</span>(<span class="number">2</span>).<span class="title function_">result</span>() <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><p>我们打印 op 能看到方法 add、minus 都作用到实例上了</p><p><img src="https://s2.loli.net/2022/10/09/dxblWmGMTigBHQ7.png" alt="实例op"></p><p>当然，这只是冰山一角，如果说到如何写库，按照现代 JavaScript 库的写法要考虑的东西还有很多，等笔者对其研究有所收获后，会写一篇</p>]]></content>
      
      
      <categories>
          
          <category> 库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录服务器内存爆炸</title>
      <link href="/2022/09/14/2022-09-14-%E8%AE%B0%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%86%85%E5%AD%98%E7%88%86%E7%82%B8/"/>
      <url>/2022/09/14/2022-09-14-%E8%AE%B0%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%86%85%E5%AD%98%E7%88%86%E7%82%B8/</url>
      
        <content type="html"><![CDATA[<p>最近在准备全栈项目，本想拿以前的项目练练手，一测试，发现有bug。遂修改代码，推到远程仓库，登录服务器，拉代码时，报错，说<code>error: unable to create temporary file: No space left on device</code>，意思是说「无法创建临时文件：设备上没有剩余空间」</p><p>纳尼~~</p><p>我的小服务器上都没挂什么服务啊，为什么会没内存了</p><p>不管怎么样，先查一下</p><p>有人也遇到这样的问题：<a href="https://www.programminghunter.com/article/14451229694/">解决Linux出现“cannot create temp file for here-document: No space left on device”的问题</a></p><blockquote><p>解决方案：</p><p>1、df -h 查看硬盘空间 </p><p>2、top 查看cpu及内存</p><p>3、du -h –max-depth=1 /var/log/* 查看/var/log路径下文件的大小</p><p>4、du -sh /* 查看哪个目录最大</p><p>5、cat /dev/null &gt; /var/log/mongodb/mongod.log 清空mongodb日志文件</p></blockquote><p>使用 <code>df -h</code> 查看硬盘的空间，发现全被<code>/dev/vda1</code> 占据了</p><p><img src="https://s2.loli.net/2022/09/14/Ykadp8mJPDFuwB3.png" alt="查看硬盘空间"></p><p>而后面又有个 overlay，也是 40G，不明白没关系，继续往后步骤找</p><p>第二、三步没啥用，主要是第四步。现在根目录下输入<code>du -sh *</code> ，发现 var 目录占了36个G，不得了</p><p><img src="https://s2.loli.net/2022/09/14/HGjbk1SOQxUnodu.png" alt="查看根目录下的各文件所占内存"></p><p>进入 var 目录查询<code>du -sh *</code>，发现 <code>lib</code> 目录占了 35G</p><p><img src="https://s2.loli.net/2022/09/14/gRdyhVwlabTuZft.png" alt="var目录下的各文件所占内存"></p><p>继续进入 lib 目录，查询<code>du -sh *</code>，发现 <code>docker</code> 目录占了 35G。明白了，问题出在 docker 容器上，也许是镜像，也许是容器，所占的内存太大了</p><p>那就把没用的镜像和容器删除吧</p><p>删到后面发现是启动的 check 酱容器占满了内存，删除了这个容器后，内存就恢复了</p><p><img src="https://s2.loli.net/2022/09/14/rmeZGkUwgRV7iDq.png" alt="删除内存吸盘后的内存"></p><p>check 酱或许是写入了什么错误日志之类的，导致占满了内存。想想，也就不用</p><p>为此，也不去纠结，再说了，这个服务个人感觉并不是很好用，老是报错</p><h2 id="学到的东西"><a href="#学到的东西" class="headerlink" title="学到的东西"></a>学到的东西</h2><p>主要是 linux 的操作</p><p>例如：</p><ul><li><code>df -h</code>：查看硬盘空间 </li><li><code>du -sh *</code>： 查看哪个目录最大</li></ul>]]></content>
      
      
      <categories>
          
          <category> 疑难杂症 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 内部DNS解析失败</title>
      <link href="/2022/08/22/2022-08-22-Docker%E5%86%85%E9%83%A8DNS%E8%A7%A3%E6%9E%90%E5%A4%B1%E8%B4%A5/"/>
      <url>/2022/08/22/2022-08-22-Docker%E5%86%85%E9%83%A8DNS%E8%A7%A3%E6%9E%90%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<p>最近在玩 <a href="https://ftqq.com/">Easy</a> 的开源应用：<a href="https://ckc.ftqq.com/">check 酱</a>，按照它的教程，我启动了云端检测，但出问题了</p><p><img src="https://s2.loli.net/2022/08/23/j7kMZQSdzWYFAsV.png" alt="监听报错"></p><p>提问 Easy</p><p><img src="https://s2.loli.net/2022/08/23/iCHBUmO9wPqe3rV.png" alt="提问 Easy"></p><p>笔者比较菜，不知道他说的 「DNS 解析有问题」 指的是什么？</p><p>我当时的理解是 DNS 不是和域名有关吗，我外网能访问啊</p><p>后来他重要的话说三次之后，我思考了下，想着是我容器内部的 DNS 解析失败，一查，果然是这样</p><p><img src="https://s2.loli.net/2022/08/23/zTZC4985WObc6l1.png" alt="docker容器中ping不通"></p><p>在容器中，能 ping 的通 ip，但是不能 ping 域名</p><p>找了一圈，有让我重启 docker 服务的，有说让我修改<code>/etc/docker/daemon.json</code> 添加 dns 解析的，还有一些指导，但都无济于事</p><p>到最后想到用英文解决，一搜”Docker containers can’t resolve DNS on centos“</p><p>答案就有了——<a href="https://stackoverflow.com/questions/61560943/containers-cannot-resolve-dns-in-centos">Containers cannot resolve DNS in CentOS</a></p><p>原来是防火墙做了拦截，只要把 docker 添加为防火墙的信任接口中就能解决</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=trusted --add-interface=docker0 <span class="comment"># 添加 docker 至信任接口</span></span><br><span class="line">firewall-cmd --reload <span class="comment"># 重载</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/08/23/aPRIfpT6ohHgtvy.png" alt="ping通了"></p><p>如此就解决了，果然，还是要靠英文啊</p><h2 id="Check-酱能做什么"><a href="#Check-酱能做什么" class="headerlink" title="Check 酱能做什么"></a>Check 酱能做什么</h2><p>check 酱是一个通用网页内容监控工具，可以监测网页内容变化，并发送异动到微信</p><p>如果在云端架上服务，那么只要检测数据，满足条件后的就会通知到我的微信</p><p>我会拿它干什么呢？</p><p>我觉得最好的用处就是检测加密货币的数据，当满足某个价格，某个指标后，提醒自己</p><p>减少看盘，回归生活才是正道</p><p>check 酱的 B 站教程合集：<a href="https://www.bilibili.com/video/BV1JY4y1P71b">https://www.bilibili.com/video/BV1JY4y1P71b</a></p><p>付费课程：<a href="https://next.ftqq.com/31">https://next.ftqq.com/31</a></p>]]></content>
      
      
      <categories>
          
          <category> 疑难杂症 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网页长按保存及识别二维码</title>
      <link href="/2022/07/13/2022-07-13-%E7%BD%91%E9%A1%B5%E9%95%BF%E6%8C%89%E4%BF%9D%E5%AD%98%E5%8F%8A%E8%AF%86%E5%88%AB%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
      <url>/2022/07/13/2022-07-13-%E7%BD%91%E9%A1%B5%E9%95%BF%E6%8C%89%E4%BF%9D%E5%AD%98%E5%8F%8A%E8%AF%86%E5%88%AB%E4%BA%8C%E7%BB%B4%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p><a href="http://d.news.163.com/#/h5">网易哒哒</a>的 H5 一向是业界精品，其中不少 H5 会成为爆款，能在朋友圈广泛流传的那种。同时，他们还写了一本很水的书——<a href="https://book.douban.com/subject/35131526/">制造爆款：H5营销策划一本通</a>，草草介绍了下各式各样的H5，但相关的技术文章却都没这么介绍，笔者一直想仿做类似的H5，找来找去，也只找到两篇网易同厂的技术类文章：</p><ul><li><a href="https://musicfe.dev/canvas-snapshot/">高质量前端快照方案：来自页面的「自拍」</a></li><li><a href="https://musicfe.dev/color-quiz/">官方揭秘！你的颜色是这样算出来的</a></li></ul><p>就此，笔者做个简易H5，介绍一下个人认为H5中比较重要的功能点——长按保存图片及识别二维码</p><p>此项目主要用到三个库</p><ul><li><p><a href="https://html2canvas.hertzen.com/">html2canvas</a>：将HTML 转换为 canvas</p></li><li><p><a href="https://github.com/hongru/canvas2image">canvas2image</a>：将 canvas 转换为图片</p></li><li><p><a href="https://www.npmjs.com/package/qrcodejs2">qrcodejs2</a>：生成二维码</p></li></ul><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>设计稿：魔改公司H5中的其中一页</p><p>字体：寻找开源字体，这款不错——<a href="https://github.com/lxgw/LxgwWenKai">LXGW WenKai / 霞鹜文楷</a></p><p>此外，就是布局，笔者在<a href="https://blog.azhubaby.com/2021/12/29/2021-12-22-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B3%95%E9%97%A8%EF%BC%9A%E8%87%AA%E9%80%82%E5%BA%94%E6%96%B9%E6%A1%88%E5%92%8C%E9%AB%98%E6%B8%85%E6%96%B9%E6%A1%88/">移动端法门：自适应方案和高清方案</a> 中阐述过一个观点：</p><blockquote><p>不同的布局方式作用不同，像新闻类的H5，采用 px 为单位，是为了让大手机看到更多的信息；像应用型的H5，采用 rem/vw 为单位，力求在各种手机上能保持一致UI</p></blockquote><p>像营销页面，是希望在各种手机上保持UI一致，理论上采用 rem/vw 是没问题的，但是 ggvswild 在<a href="https://musicfe.dev/canvas-snapshot/">高质量前端快照方案：来自页面的「自拍」</a> 中曾说：</p><blockquote><p>为了给到<code>html2canvas</code>明确的整数计算值，避免因小数舍入而导致的拉伸模糊，建议将布局中使用中使用<code>%</code>、<code>vw</code>、<code>vh</code>或<code>rem</code>等单位的元素样式，统一改为使用<code>px</code></p></blockquote><p>而笔者在实际项目开发时，采用 rem 为单位并没有发现拉伸模糊问题。除此之外，笔者又寻找了几个网易的 H5</p><ul><li><a href="https://st.music.163.com/c/yourposter/m1/index.html">关于你的画</a>，网易云音乐出品，采用 % + js + 绝对定位布局</li><li><a href="https://st.music.163.com/c/gameofthrones">权力的游戏</a>，网易云音乐出品，采用 % + js + 绝对定位布局</li><li><a href="https://st.music.163.com/st-color-quiz/index">测一测属于你的主导色</a>，网易云音乐出品，采用 rem/vw + 绝对定位布局</li><li><a href="https://wp.m.163.com/163/page/news/food_2022/index.html">这100种人生必吃美食，你打卡了哪些</a>，网易哒哒出品，采用 px + 绝对定位布局</li></ul><p>个人总结：在布局上它们都使用绝对定位布局，在长度单位上各有特色，所以做 H5 布局是无所谓用那种方式，只要在截图页不让元素拉伸即可，也就是说如果拉伸模糊了，可查一下此元素的单位是否是小数，至于其他页的布局，习惯用那个就用那个</p><h2 id="实战开始"><a href="#实战开始" class="headerlink" title="实战开始"></a>实战开始</h2><h3 id="字体的运用"><a href="#字体的运用" class="headerlink" title="字体的运用"></a>字体的运用</h3><p>字体「 霞鹜文楷」大约4.4M，太大了，用 <a href="https://github.com/ecomfe/fontmin">fontmin</a> 提取用到的字体，这里我直接使用 <a href="http://ecomfe.github.io/fontmin/#app">Fontmin 的客户端</a>，无它，命令行执行出错，营销页只用到了9个汉字，裁剪后从4.4M减少到 44kb</p><h3 id="二维码功能的实现"><a href="#二维码功能的实现" class="headerlink" title="二维码功能的实现"></a>二维码功能的实现</h3><p>很简单，看文档就能学会</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> qrcode = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;qrcode&quot;</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">QRCode</span>(qrcode, &#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">colorDark</span>: <span class="string">&quot;#000000&quot;</span>,</span><br><span class="line">    <span class="attr">colorLight</span>: <span class="string">&quot;#ffffff&quot;</span>,</span><br><span class="line">    <span class="attr">correctLevel</span>: <span class="title class_">QRCode</span>.<span class="property">CorrectLevel</span>.<span class="property">L</span></span><br><span class="line">&#125;).<span class="title function_">makeCode</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>)</span><br></pre></td></tr></table></figure><h3 id="快照实现"><a href="#快照实现" class="headerlink" title="快照实现"></a>快照实现</h3><p>将 html2canvas 和 canvas2image 结合，将 HTML 转成 base64 图片，而这一功能可以做成一个库：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> convertToImage = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">createBaseCanvas</span>(<span class="params">scale, width, height</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        canvas.<span class="property">width</span> = width * scale;</span><br><span class="line">        canvas.<span class="property">height</span> = height * scale;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> context = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭抗锯齿</span></span><br><span class="line">        context.<span class="property">mozImageSmoothingEnabled</span> = <span class="literal">false</span>;</span><br><span class="line">        context.<span class="property">webkitImageSmoothingEnabled</span> = <span class="literal">false</span>;</span><br><span class="line">        context.<span class="property">msImageSmoothingEnabled</span> = <span class="literal">false</span>;</span><br><span class="line">        context.<span class="property">imageSmoothingEnabled</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        context.<span class="title function_">scale</span>(scale, scale);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> canvas;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">convertToImage</span>(<span class="params">container, options = &#123;&#125;</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> scale = <span class="variable language_">window</span>.<span class="property">devicePixelRatio</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> width = container.<span class="property">offsetWidth</span>;</span><br><span class="line">        <span class="keyword">const</span> height = container.<span class="property">offsetHeight</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> canvas = <span class="title function_">createBaseCanvas</span>(scale, width, height);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> ops = &#123;</span><br><span class="line">            <span class="attr">useCORS</span>: <span class="literal">true</span>, <span class="comment">// 如果截图的内容里有图片,解决文件跨域问题</span></span><br><span class="line">            <span class="attr">allowTaint</span>: <span class="literal">false</span>, <span class="comment">// 是否允许跨源图像污染画布</span></span><br><span class="line">            ...options</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">html2canvas</span>(container, ops).<span class="title function_">then</span>(<span class="function"><span class="params">canvas</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> imageEl = <span class="title class_">Canvas2Image</span>.<span class="title function_">convertToPNG</span>(canvas, canvas.<span class="property">width</span>, canvas.<span class="property">height</span>)</span><br><span class="line">            <span class="keyword">return</span> imageEl</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> convertToImage</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">convertToImage</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#capture&quot;</span>)).<span class="title function_">then</span>(<span class="function">(<span class="params">imageEl</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;save&quot;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(imageEl)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="canvas2image-的坑点"><a href="#canvas2image-的坑点" class="headerlink" title="canvas2image 的坑点"></a>canvas2image 的坑点</h3><ol><li>最新版本（1.4.1）已支持缩放，已解决图片不清晰的问题<ul><li>图片不清晰以前是个大问题，不少博文都有对其说明，目前的版本没看到模糊</li></ul></li><li><a href="https://html2canvas.hertzen.com/features">文档</a>上写支持 <code>background-image:linear-gradient()</code>，但是如果是渐变至透明是不行的</li></ol><p><img src="https://s2.loli.net/2022/07/12/7pAcHuVnzI9ZTEs.png" alt="渐变背景色"></p><p>而我希望呈现这样的样式：</p><p><img src="https://s2.loli.net/2022/07/12/LTm8MA6JezwdaRr.png" alt="背景图"></p><p>背景渐变方案：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, $white, transparent);</span><br></pre></td></tr></table></figure><p>改成背景图：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;../bg.png&#x27;</span>) no-repeat;</span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>文字会出现位移，这个问题至今<a href="https://github.com/niklasvh/html2canvas/issues/2769">一直存在</a>，作者也没有修复</li></ol><p>以上就是所遇到的问题，像跨域之类的问题，随着时间的推移，文档上都有说明，已经不是什么问题</p><p>线上预览地址：<a href="http://azhubaby.com/demo/WeChat/canvas-snapshot/index.html">这里</a></p><h2 id="2023-3-14-更新"><a href="#2023-3-14-更新" class="headerlink" title="2023.3.14 更新"></a>2023.3.14 更新</h2><p>文字会出现位移<a href="https://www.zhihu.com/column/xiaojue">小爝</a> 给出了方案<a href="https://zhuanlan.zhihu.com/p/584639152">html2canvas 文字向下偏移兼容方法</a>，主要改动源码中的两点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var baseline = img.offsetTop - span.offsetTop +2;</span></span><br><span class="line"><span class="keyword">var</span> baseline = <span class="built_in">parseInt</span>(<span class="title function_">getComputedStyle</span>(span,<span class="literal">null</span>).<span class="property">lineHeight</span>,<span class="number">10</span>) - <span class="number">5</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_this.<span class="property">ctx</span>.<span class="property">textBaseline</span> = <span class="string">&#x27;alphabetic&#x27;</span>;</span><br></pre></td></tr></table></figure><p>主要是修正字体的基准位移。给我开了一个思路，找不到解决方案就直接去找源码debugger</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://musicfe.dev/canvas-snapshot/">高质量前端快照方案：来自页面的「自拍」</a></li><li><a href="https://musicfe.dev/color-quiz/">官方揭秘！你的颜色是这样算出来的……</a></li><li><a href="https://github.com/whinc/whinc.github.io/issues/8">H5 实现保存图片的采坑记录</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实战 </category>
          
          <category> 公司项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作中使用 Git 解决问题的场景</title>
      <link href="/2022/07/06/2022-07-06-%E5%B7%A5%E4%BD%9C%E4%B8%AD%E4%BD%BF%E7%94%A8Git%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E7%9A%84%E5%9C%BA%E6%99%AF/"/>
      <url>/2022/07/06/2022-07-06-%E5%B7%A5%E4%BD%9C%E4%B8%AD%E4%BD%BF%E7%94%A8Git%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E7%9A%84%E5%9C%BA%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<p>简单来说，就这七点：</p><ul><li><p>使用 git rebase 让提交记录更加清晰可读</p></li><li><p>使用 git reflog + git reset 跳到任意 commit</p></li><li><p>使用 git cherry-pick 获取指定的 commit</p></li><li><p>使用 git commit –amend 更改提交内容</p></li><li><p>使用 git revert 回滚某次的提交</p></li><li><p>使用 git stash 来暂存文件</p></li><li><p>配置 git alias 提升工作效率</p></li></ul><h2 id="使用-git-rebase-让提交记录更加清晰可读"><a href="#使用-git-rebase-让提交记录更加清晰可读" class="headerlink" title="使用 git rebase 让提交记录更加清晰可读"></a>使用 git rebase 让提交记录更加清晰可读</h2><h3 id="rebase-基本用法"><a href="#rebase-基本用法" class="headerlink" title="rebase 基本用法"></a>rebase 基本用法</h3><p>rebase 翻译为变基，它的作用和 merge 相似，用于把一个分支的修改合并到当前分支</p><p>如下图所示，经过 rebase 后提交历史的变化情况</p><p><img src="https://s2.loli.net/2022/07/01/9qOJUarzbjAsYyN.jpg" alt="rebase"></p><p>不明白单分支的好处，可以在看看知乎的这个问题：<a href="https://www.zhihu.com/question/61283395">Git commits 历史是如何做到如此清爽的？</a></p><p>Vue 的作者尤雨溪就是说：<a href="https://www.zhihu.com/question/61283395/answer/186122300">多用 rebase</a></p><p>具体用法：</p><ul><li>基于 master 分支创建 feature 分支</li><li>在 feature 分支上开发功能点</li><li>master 上也提交了 commit</li><li>在 feature 分支上执行 <code>git rebase master</code>，意为以 master 分支最后的提交作为基点，逐个应用 feature 的每个更改</li></ul><h3 id="git-rebase-VS-git-merge"><a href="#git-rebase-VS-git-merge" class="headerlink" title="git rebase VS git merge"></a>git rebase VS git merge</h3><p>合并分支有两种，即 rebase 、merge</p><p>merge 翻译为合并，即 <code>git merge branchname</code>，即合并分支代码，这种方法会保存每次 commit 的，当你使用 gitk 查看时就发现好几条颜色的线</p><p>另一种是 rebase，即去除一系列的提交记录，“复制”它们，然后在另一个地方逐个放下去</p><p>所以 rebase 的优势就明了了，它能创造更清晰的提交记录</p><p>但 merge 会保留你所有的 commit 的历史时间，当开发人员一多，历史记录就会变得混乱</p><h3 id="rebase-的交互模式"><a href="#rebase-的交互模式" class="headerlink" title="rebase 的交互模式"></a>rebase 的交互模式</h3><p>在开发中，通常会在一个分支上产生很多无效的提交，这种情况下使用 rebase 的交互模式可以把多次 commit 压缩成一次提交，得到一个干净的提交历史</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先看提交</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"><span class="comment"># f9f6f3b commit 3</span></span><br><span class="line"><span class="comment"># 2feb45f commit 2</span></span><br><span class="line"><span class="comment"># 07a3cb6 commit 1</span></span><br><span class="line"><span class="comment"># 我们要修改 2 的话，rebase 到它的下一个 commit，这里是 1</span></span><br><span class="line">git rebase 07a3cb6 -i</span><br><span class="line"><span class="comment"># 然后在打开的对话框里面修改，之后还要一个 rebase continue</span></span><br><span class="line">git rebase -i &lt;base-commit&gt;</span><br><span class="line"><span class="comment"># 或者是 git rebase -i HEAD~2 对最近的两次 commit 进行合并</span></span><br></pre></td></tr></table></figure><blockquote><p>也有人称之为后悔药功能，即你无论写什么 commit，最后都可以修改，无论提交什么，都可以合并，DIY 性强</p></blockquote><h2 id="使用-git-reflog-git-reset-跳到任意-commit"><a href="#使用-git-reflog-git-reset-跳到任意-commit" class="headerlink" title="使用 git reflog + git reset 跳到任意 commit"></a>使用 git reflog + git reset 跳到任意 commit</h2><p>换个说法叫时光机，即通过查找所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作），通过 reset HEAD 跳到指定 commit</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br><span class="line"><span class="comment">#afa2f45 HEAD@&#123;10&#125;: checkout: moving from 今天 to 明天</span></span><br><span class="line"><span class="comment">#4abcda5 HEAD@&#123;11&#125;: commit: 打通1800处仙窍</span></span><br><span class="line"><span class="comment">#de42069 HEAD@&#123;12&#125;: commit: 真言轮经大成</span></span><br><span class="line">git reset HEAD@&#123;10&#125;</span><br><span class="line"><span class="comment"># 或者 git reset --hard afa2f45</span></span><br></pre></td></tr></table></figure><p>如此一来，就回到了 afa2f45 commit 处，熟悉「时间法则」、「时光机」的人都知道，这是回到过去</p><h2 id="使用-git-cherry-pick-获取指定的-commit"><a href="#使用-git-cherry-pick-获取指定的-commit" class="headerlink" title="使用 git cherry-pick 获取指定的 commit"></a>使用 git cherry-pick 获取指定的 commit</h2><p>意为“挑拣”提交，和 merge 合并一个分支的所有提交不同，它会获取某个分支的单个提交，并作为一个新的提交接入到当前分支上</p><p>这个需要故事背景才容易理解</p><p>张三在分支上开发功能，每个功能点提交一次 commit，共六个提交六个功能点（分别是 feature1~feature6），再回到第一个提交点，即他使用 <code>git reset --hard feature1</code> 跳转第一个 commit，在此基础上开发一个新功能，即 feature7，那么如果把 feature7 合并到 feature6 上怎么做？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br><span class="line"><span class="comment"># git reflog 查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）</span></span><br><span class="line"><span class="comment"># 找到 feature7 的 commit 4c97ff3</span></span><br><span class="line"><span class="comment"># 回到 feature6 的 commit cd52afc</span></span><br><span class="line">git reset --hard cd52afc</span><br><span class="line"><span class="comment"># 使用 cherry-pick 拿到 feature7 的代码</span></span><br><span class="line">git cherry-pick 4c97ff3</span><br></pre></td></tr></table></figure><p>具体可看小蝌蚪的这篇 <a href="https://github.com/airuikun/front-core/issues/5">小蝌蚪传记：git 时光穿梭机–女神的侧颜</a> 来体会一二</p><p>简单来说，你的每一次 commit，就是一次记录，可以合并到任意地方。所以开发功能点或者修复 bug 之类，尽量做到一个功能点一个 commit，方便出错时挑拣代码</p><h2 id="使用-git-commit-–amend-更改提交内容"><a href="#使用-git-commit-–amend-更改提交内容" class="headerlink" title="使用 git commit –amend 更改提交内容"></a>使用 git commit –amend 更改提交内容</h2><p>amend 的意思是修正</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 继续改动你的文件</span></span><br><span class="line">git add .</span><br><span class="line">git commit --amend --no-edit</span><br><span class="line"><span class="comment"># 你这次的改动会被添加进最近一次的 commit 中</span></span><br></pre></td></tr></table></figure><p>合并到上次的 commit 中</p><p><code>git commit --amend</code>：弹出让你修改内容</p><p><code>git commit --amend --no-edit</code>：保持上一次的 commit 内容</p><blockquote><p>PS：假如你的代码已经 push 了的话，要慎用，因为会修改提交历史。</p></blockquote><h2 id="使用-git-revert-回滚某次的提交"><a href="#使用-git-revert-回滚某次的提交" class="headerlink" title="使用 git revert 回滚某次的提交"></a>使用 git revert 回滚某次的提交</h2><p>上文提到一个回滚操作：<code>git reset --hard xxx</code>，能回到某次的 commit，除此之外，还有一种则是能撤销某次 commit</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先找到你想撤销的那个 commit hash值</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line">git revert &lt;commit-id&gt;</span><br></pre></td></tr></table></figure><p>这种做法会新建一条 commit 信息，来撤回之前的修改。</p><p>而 git reset 会直接提交记录退回到指定的 commit 上。</p><p>所以就个人开发或个人 feature 分支而言，可以使用 <code>git reset</code> 来回滚代码，但在多人协作的集成分支上，<code>git revert</code> 更适合。这样，提交的历史记录不会被抹去，可以安全地进行撤回</p><h2 id="使用-git-stash-来暂存文件"><a href="#使用-git-stash-来暂存文件" class="headerlink" title="使用 git stash 来暂存文件"></a>使用 git stash 来暂存文件</h2><p>顾名思义，就是把本地的改动暂存起来</p><p>先了解下 git 的四大工作区域</p><h3 id="四大工作区域"><a href="#四大工作区域" class="headerlink" title="四大工作区域"></a>四大工作区域</h3><p><img src="https://s2.loli.net/2022/06/02/PFnpm6MtG8LEeNV.png" alt="Git工作区"></p><ul><li><p>Workspace（工作区）：本地电脑所见的文件和目录</p></li><li><p>Index/Stage（暂存区）：一般存放在 <code>.git</code> 目录下，当你 <code>git add 改动文件</code>，改动的文件就放入在「暂存区」</p></li><li><p>Respository（本地仓库）：当你 <code>git clone 地址</code>，就将远程仓库克隆到本地仓库。它是存在本地的版本库，其中 HEAD 指向最新放入仓库的版本。当你执行 <code>git commit</code>，文件改动就到本地仓库</p></li><li><p>Remote（远程仓库）：类似 Github、Gitlab、码云等放在代码托管平台</p></li></ul><p>常见的场景是你还在开发一个功能点的时候，突然有个线上 bug 需要你紧急修复，这次你可以 git commit 提交到本地仓库，后续通过 <code>git commit --amend </code> 继续在原 commit 上修改内容。但这里还有一种方法，即将代码存在暂存区，等 bug 修复完后，再从暂存区取出</p><p>基本命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git stash <span class="comment"># 将本地的改动暂存</span></span><br><span class="line">git stash save <span class="string">&quot;message&quot;</span> <span class="comment"># 执行存储时，添加备注</span></span><br><span class="line">git stash pop <span class="comment"># 应用最近一次暂存，并删除暂存记录</span></span><br><span class="line">git stash apply <span class="comment">#恢复最近的存储，但不会把存储从存储列表中删除，某人使用第一个存储，即 stash@&#123;0&#125;，如果要使用其他，git stash apply stash@&#123;$num&#125;</span></span><br><span class="line">git stash list <span class="comment"># 查看 stash 了哪些存储</span></span><br><span class="line">git stash clear <span class="comment">#删除所有缓存的 stash</span></span><br><span class="line">git ls-files --stage <span class="comment">#查看 index 暂存区</span></span><br></pre></td></tr></table></figure><h2 id="配置-git-alias-提升工作效率"><a href="#配置-git-alias-提升工作效率" class="headerlink" title="配置 git alias 提升工作效率"></a>配置 git alias 提升工作效率</h2><p>主要是为了简化命令，它的基本用法是 <code>git config --global alias.&lt;简化的字符&gt; 原始命令</code></p><p>如下面的例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.co checkout</span><br><span class="line">git config --global alias.ci commit</span><br><span class="line">git config --global alias.br branch</span><br></pre></td></tr></table></figure><p>当然，另一种方法是在 .gitconfig 文件中设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[<span class="built_in">alias</span>]</span><br><span class="line">st = status -sb</span><br><span class="line">co = checkout</span><br><span class="line">br = branch</span><br><span class="line">mg = merge</span><br><span class="line">ci = commit</span><br><span class="line">ds = diff --staged</span><br><span class="line">dt = difftool</span><br><span class="line">mt = mergetool</span><br><span class="line">last = <span class="built_in">log</span> -1 HEAD</span><br><span class="line">latest = for-each-ref --<span class="built_in">sort</span>=-committerdate --format=\&quot;%(committername)@%(refname:short) [%(committerdate:short)] %(contents)\&quot;</span><br><span class="line"><span class="built_in">ls</span> = <span class="built_in">log</span> --pretty=format:\&quot;%C(yellow)%h %C(blue)%ad %C(red)%d %C(reset)%s %C(green)[%cn]\&quot; --decorate --<span class="built_in">date</span>=short</span><br><span class="line">hist = <span class="built_in">log</span> --pretty=format:\&quot;%C(yellow)%h %C(red)%d %C(reset)%s %C(green)[%an] %C(blue)%ad\&quot; --topo-order --graph --<span class="built_in">date</span>=short</span><br><span class="line"><span class="built_in">type</span> = cat-file -t</span><br><span class="line">dump = cat-file -p</span><br><span class="line">lg = <span class="built_in">log</span> --color --graph --pretty=format:<span class="string">&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27;</span> --abbrev-commit</span><br></pre></td></tr></table></figure><blockquote><p>参考<a href="https://juejin.cn/post/6974184935804534815#heading-6">政采云的配置</a></p></blockquote><h2 id="除此之外"><a href="#除此之外" class="headerlink" title="除此之外"></a>除此之外</h2><p>还有一些不常见却好用的命令</p><ul><li><code>gitk</code>：打开 git 的图形化工具</li><li><code>gitjk</code>：撤消您刚刚在 git 中所做的操作</li><li><code>git help -g</code>：展示帮助信息</li><li><code>cat .git/HEAD</code>：查看分支文件</li><li><code>git fetch --all &amp;&amp; git reset --hard origin/master</code>：回到远程仓库的状态<ul><li>抛弃本地所有的修改，回到远程仓库的状态</li></ul></li><li><code>git push -f origin master</code>：强行获取远程最新代码</li><li><code>git reset --merge</code>：merge 代码后想测回到原来版本</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/airuikun/blog/issues/5">git 时光穿梭机</a></li><li><a href="https://juejin.cn/post/6974184935804534815#heading-6">我在工作中是如何使用 git 的</a></li><li><a href="https://mp.weixin.qq.com/s/DsdXGz8qb3B23Ra10ElKug">程序员必会的六条黄金 Git 命令，让你效率提高百分之百</a></li><li><a href="https://ohshitgit.com/zh">Oh Shit, Git!?!</a></li><li><a href="https://mp.weixin.qq.com/s/S3NuW5W3x1iDDtbfHziDzQ">我是如何使用 git 的？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加密货币预测记录</title>
      <link href="/2022/05/15/2022-05-15-%E5%8A%A0%E5%AF%86%E8%B4%A7%E5%B8%81%E9%A2%84%E6%B5%8B%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/05/15/2022-05-15-%E5%8A%A0%E5%AF%86%E8%B4%A7%E5%B8%81%E9%A2%84%E6%B5%8B%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>虽然有在公众号「随朱波流」写有关理财的文章，但介于这篇文章很可能会被禁掉，所以在个人博客上做备份</p><p>最近LUNA暴跌，从200美元到归零，大概花了3天时间，一个市值高达400亿美元的币种，一个曾今进入前五，最近一年来稳坐前十的币种，就这样崩盘了，伴随而来的是加密货币的崩盘，总市值跌没了5000千万美元（一个礼拜时间）</p><p>具体事情自招财大牛猫描述的很到位：<a href="https://mp.weixin.qq.com/s/4kab_glwqATunNxsYDdxLw">惊天动地</a></p><blockquote><p>有一个韩国团队做的项目叫<strong>UST，这是一个算法稳定币，1:1挂钩美元。</strong>怎么挂钩呢，它采用预言机，通过燃烧另一个叫做LUNA的虚拟币来铸造。</p><p>比如LUNA现在价格5美元，那么要铸造1美元的UST，就要燃烧0.2个LUNA。如果LUNA涨到10美元，那就燃烧0.1个。</p><p>在这个机制下，如果想买UST的人越多，就会燃烧越多的LUNA，从而推高LUNA的价格，这个大家都能理解吧。LUNA过去一年涨了几十倍。</p><p>那怎么刺激大家来买UST呢？韩国团队搞了一个存款项目，只要你存UST进来，<strong>每年固定给你19.8%的利息。</strong>这个收益非常高，因此一经推出就遭到哄抢，UST的锁仓资金一路飙升，最高峰超过了300亿美元。</p><p>看到这里你一定会感到疑问，这19.8%的利息是从哪来的，谁给出？确实，由于贷款的利息不够高（12%左右），贷款资金也远远跟不上存款增长的速度，<strong>整个项目每天都净亏损几百万</strong>。去年底的时候资金池就告急了，韩国团队临时追加了4.5亿进去续命，于是才又拖了半年。</p><p>他们之所以花这个钱，是希望趁着快速扩张的阶段，尽可能的给这个UST创造更多线下应用的场景。比如韩国以及东南亚的一些自动售货机都有支持UST支付的网点，只要需求上去了，盘子就能稳住。</p><p>但无论怎么样19.8%的利息都很难维持，终于到了今年5月初，韩国团队宣布把利息下调到18%，之后每个月动态调整。他们也不敢一口气把利息降的太多，因为一旦降太多，别人不存UST了，选择出售或者兑换等值的LUNA退出，那汹涌的抛盘有可能引发负面螺旋，直接崩盘。</p><p>利息下调后的刚开始几天没啥事，但最近美联储加息，整个加密货币都跌的惨惨的，<strong>终于在前天晚上突然有大资金集中抛售UST，把与美元的钩子打脱掉了。</strong>恐慌逐渐发酵，韩国团队立刻调集资金护盘，想要保住挂钩。</p><p>但雪崩效应逐渐被激发，想逃命的人越来越多，抛盘一波比一波猛，韩国团队库存的20多亿资金很快就打光了，然后就是UST的汇率开始一泻千里。</p><p>截止最新情况，<strong>UST=0.4美元，脱钩60%，LUNA更惨，2天时间从80元跌到2元。</strong>因为这个盘子的规模很大，<strong>UST+LUNA有接近400亿美元的市值</strong>，国外很多人和机构都进行了投资，所以这次爆炸可以说是震惊了整个币圈和金融圈。</p><p>我这两天看戏看的惊心动魄，有很多韩文的帖子，我用软件翻译，大意都是我不想活了，我这辈子的积蓄都完蛋了，我的杠杆爆仓了之类的。</p><p><strong>财富它不会凭空增长，也不会无故消失，它只是不停的在流动。</strong></p></blockquote><p>以及后续文章<a href="https://mp.weixin.qq.com/s/elW2e3crRtPrdu08hZrvfg">保大弃小</a></p><blockquote><p>UST和美元的汇率最低到过0.2，之后触底反弹，一度涨到0.8，之后回落目前在0.6附近。韩国团队围绕UST苦心建设了一整套公链生态，自然不愿意轻易放弃，<strong>他们想出来的办法就是超发LUNA，用这部分LUNA去兑换和烧毁市场上过剩的UST，以挽回汇率。</strong>但LUNA就被砸的很难看，已经从80跌到2毛钱了。</p><p>其实就是<strong>保一个，弃一个</strong>。但这也是没办法的事，因为UST不恢复挂钩LUNA也是必死无疑，等到UST勾回去了，没准LUNA到时候也有机会捞上来。</p></blockquote><p>以及最后的结局——<a href="https://mp.weixin.qq.com/s/WCJdHZ89q4t1r-7SXYXLJA">湮灭</a></p><blockquote><p>UST最新汇率是0.07，已经脱钩美元高达93%，为了拯救UST而疯狂增发的LUNA更惨，跌的只剩1分钱。目前看起来是大的没保住，小的也完蛋，死亡螺旋正在毁灭这两个一周前市值还有400亿美金的项目。</p></blockquote><p>不跌还好，一跌我就来劲了，这几天没怎么写技术文章，一是因为这段时间业务多了，二是加密市场跌出了翔，我，想抄底了。</p><p>于是乎，这几天研究了一轮，再次做一下笔记更新</p><p>有人刻舟求剑的画了这样的图</p><p><img src="https://s2.loli.net/2022/05/15/YHqUFxNjKO3W2bu.jpg" alt="加密货币未来预测"></p><blockquote><p>来源自推特，出自谁未知</p></blockquote><p>周末看了ahr999的微博合集，很多人估计对他的囤币指标有所了解，看完之后，加深了一点我对“<strong>比特币四年一个周期</strong>”的认可度，我扒拉下最近几次加密货币的高点和低点，也来刻舟求剑预测下</p><table><thead><tr><th>历年高点时机</th><th>历年低点时机</th><th>时间跨度</th><th>跌幅</th></tr></thead><tbody><tr><td>2013年11月：￥8000</td><td>2015年1月：￥900</td><td>14个月</td><td>88.75%</td></tr><tr><td>2017年12月：$20000</td><td>2018年11月：$3200</td><td>11个月</td><td>84%</td></tr><tr><td>2021年11月：$68900</td><td>?</td><td>？</td><td>？</td></tr></tbody></table><blockquote><p>而更之前的是从32美元跌到2美元，时间不详，来源ahr999</p></blockquote><p>按照时间跨度来看，下一次的低点节点在2022年的10月——2023年1月；而低点价位在7750——11024；低点的时机和跌幅应该有一定的关系。我个人觉得本轮跌幅不会像以往那么多，就像这次BTC没有如愿涨到10万美元一样</p><p>此外，我还有一个指标，就是ahr999指标，虽然他现在微博被封，但在<a href="https://github.com/hodl-club/hodl-club">github</a>上能找到此前微博的记录，我看完了2020年到2021年的微博，他说的有一点我很赞同——“我们第一个周期能够囤的币，大概会等于我们这辈子能囤的币”</p><p>所以这次熊市我会看两个指标，一个是ahr999，如果跌倒0.45以下，我会进场。另一个是跌破80%，也就是13780点，我大概会在一个星期内打完所有的可投资加密货币的钱</p><p>而我会买什么币</p><p>2022年5月份的想法是</p><ul><li>BTC</li><li>ETH</li><li>ADA</li><li>XHR</li></ul><p>为什么要买这些币，怎么个买入策略？等有空再写吧</p><p>我希望低点时机出现在2023年的1月份，因为这个时候会发年终奖，正好可以入场</p><h2 id="附加阅读"><a href="#附加阅读" class="headerlink" title="附加阅读"></a>附加阅读</h2><ul><li><a href="https://coxxa.github.io/bitcoin-ahr999-HODL/#/gu-shi-san">BTC-比特币-九神-ahr999-囤币指南</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 理财 </category>
          
          <category> 加密货币 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密货币 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vercel 部署 Node 服务</title>
      <link href="/2022/05/06/2022-05-06-vercel%E9%83%A8%E7%BD%B2node%E6%9C%8D%E5%8A%A1/"/>
      <url>/2022/05/06/2022-05-06-vercel%E9%83%A8%E7%BD%B2node%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>之前在写<a href="https://fe.azhubaby.com/HTTP/HTTP%E7%BC%93%E5%AD%98.html">面试常客：HTTP 缓存</a>时，曾经就强缓存和协商缓存写过两个 demo，但缓存要在服务端做，只能贴上代码，不能在网页上感受（虽然我贴了 gif）</p><p>笔者的所有 demo 例子都放在 github page 上，其特点是不需要服务器即可部署静态资源，但它不具备部署服务端应用能力</p><p>最近笔者在了解 CI/CD 方面的知识点，想起了 Vercel，就想着能否将服务端应用架在 vercel 上呢？</p><h2 id="Vercel-是什么"><a href="#Vercel-是什么" class="headerlink" title="Vercel 是什么"></a>Vercel 是什么</h2><p>Vercel 是一个开箱即用的网站托管平台，方便开发者快速部署自己的网站。它在全球都拥有 CND 节点，因此比 Github 官方自带的 github pages 更加稳定，访问速度更快</p><p><a href="https://space.bilibili.com/489667127">Koala 聊开源</a> 曾经对其有过介绍：<a href="https://www.bilibili.com/video/BV1gR4y1u76v">Vercel 与 Next.js：开源全明星团队背后的商业逻辑</a></p><blockquote><p>文字版：<a href="https://juejin.cn/post/7057333396359348255">Vercel 与 Next.js：开源全明星团队背后的商业逻辑</a></p></blockquote><p>简单的说，它能极简部署应用到服务端，且是免费不用买服务器</p><h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p><a href="https://vercel.com/">Vercel 官网</a></p><p><a href="https://vercel.com/workflow">Vercel 工作流官网</a>（网页效果炫酷）</p><h2 id="常见命令行"><a href="#常见命令行" class="headerlink" title="常见命令行"></a>常见命令行</h2><p>将 Vercel 下载到全局（<code>npm i vercel -g</code>），不知道有什么命令就<code>-h</code></p><p><img src="https://s2.loli.net/2022/05/07/zS3fFqLtiQvp6Oc.png" alt="vercel帮助"></p><p>笔者对其了解有限，这里罗列下笔者知道的命令</p><ul><li><code>vercel login</code>：登录 Vercel 账号</li><li><code>vercel dev</code>：本地开启服务</li><li><code>vercel dev --bug</code>：本地开启服务并打印日志</li><li><code>vercel</code>：部署本地资源到 Vercel 上</li><li><code>vercel --prod</code>：更新本地网页</li></ul><blockquote><p>vercel 可以用 vc 来代替，vc 是 Vercel 的缩写</p></blockquote><h2 id="部署静态服务"><a href="#部署静态服务" class="headerlink" title="部署静态服务"></a>部署静态服务</h2><p>我们现在已经对 vercel 有所了解，前文中说到 Vercel 能简化开发者部署服务，那它能简化到什么程度呢？</p><p>这里我们从零部署一个简易静态服务</p><p>本地安装 Vercel</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vercel -g</span><br></pre></td></tr></table></figure><p>登录 Vercel</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vercel login</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/07/Llg3ZO8iywrqEfv.png" alt="vercel login"></p><p>选择好连接的方式后，会在网站弹出</p><p><img src="https://s2.loli.net/2022/05/07/LVWO5CetKbfBHnU.png" alt="vercel 登录成功"></p><p>哟哟，man。what’s your name？</p><p>创建一个 HTML 文件，后续我们要将其上传至 Vercel 服务器上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vercel Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Vercel Demo<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>本地测试一番，输入命令行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vercel dev</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/07/CTj4uopQmbJGe9H.png" alt="vercel dev"></p><p>因为我们这是第一次执行，根目录下没有<code>.vercel</code>，所以要填写一些必要信息，这时你的本地和 Vercel 服务器就绑定好了</p><p>部署服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vercel</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/07/eGn9HSkLqpFsC6l.png" alt="vercel部署"></p><p>在 <a href="https://vercel-sample-ten.vercel.app/">https://vercel-sample-ten.vercel.app/</a> 中能访问到我们的静态服务</p><p>在截图中我们也看到了这句话<code>Deployed to production. Run vercel --prod to overwrite later</code>，后续我们要更新资源，用 <code>vercel --prod</code> 即可</p><p>好了，除去必要的登录，我们就用了三个命令就把本地服务部署到 Vercel 服务器上</p><ul><li><code>vercel dev</code> ：开发时使用，查看应用是否跑得起来</li><li><code>vercel</code>：部署服务</li><li><code>vercel --prod</code>：更新应用（资源）</li></ul><p>可以登录 <a href="https://vercel.com/dashboard">Vercel 后台</a>查看部署情况</p><p><img src="https://s2.loli.net/2022/05/07/5XEJHlWz7QtxwGd.png" alt="vercel 后台"></p><h2 id="部署-Node-服务"><a href="#部署-Node-服务" class="headerlink" title="部署 Node 服务"></a>部署 Node 服务</h2><p>回归主题，最终我们想部署的是 Node 服务，是后端服务，而非前端静态资源服务，这是关键</p><p>同样建立新项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> vercel-koa2</span><br><span class="line"><span class="built_in">cd</span> vercel-koa2</span><br><span class="line">npm init -y</span><br><span class="line">npm i koa -S</span><br><span class="line"><span class="built_in">touch</span> index.js</span><br></pre></td></tr></table></figure><p>编写 <code>index.js</code> 中的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">&#x27;Hello Vercel&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3008</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3008项目启动&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>PS： 3000 端口默认会被 Vercel 使用，所以 Koa 服务要换个端口</p></blockquote><p>使用命令<code>vercel dev</code></p><p><img src="https://s2.loli.net/2022/05/07/z2C9gAl8yEuwtGL.png" alt="vercel koa dev"></p><p>发现给我报错了，理由是 <code>package.json</code> 的 scripts 中没有 build 快捷符，修改之</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>再次使用 <code>vercel dev</code>，node 服务跑起来了</p><p>于是乎我们部署它</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vercel</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/07/NDM5q2vj8LlFTo3.png" alt="vercel 部署失败"></p><p>搞半天没部署上去，后台查看也是无果，呜呼悲哉</p><p>google 后，发现原来还有一个 <a href="https://vercel.com/docs/project-configuration">vercel.json</a>，可以用 vercel.json 配置和覆盖 vercel 默认行为</p><p>下载 <code>@vercel/node</code> 包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @vercel/node -S</span><br></pre></td></tr></table></figure><p>填写配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;builds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;use&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@vercel/node&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>执行 <code>vercel</code> 部署服务</p><p><img src="https://s2.loli.net/2022/05/07/7ErKfp5QbMLjymd.png" alt="vercel koa"></p><p>访问地址：<a href="https://vercel-koa2-t511069160.vercel.app/">https://vercel-koa2-t511069160.vercel.app</a></p><p>至此，就完成了 Koa 服务的部署</p><p>与部署静态资源多了两个步骤</p><p>下载 <code>@vercel/node</code> 和配置 <code>vercel.json</code></p><h2 id="延伸思考"><a href="#延伸思考" class="headerlink" title="延伸思考"></a>延伸思考</h2><p>Vercel 当然不止笔者所说的这一功能，它还可以自定义域名、serverless、全球支持的 CDN 等等</p><p>可以毫不夸张地说，用 Vercel 来代替繁琐的云服务器，配合 Github Action 做 CI/CD，就</p><p>个人开发者或小团队而言，这或许就是神器</p><p>后续笔者也会尝试用 Vercel 部署一些小应用，实践出真理</p><p>附上项目地址：<a href="https://github.com/johanazhu/vercel-demo">https://github.com/johanazhu/vercel-demo</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://tangly1024.com/article/vercel-free-serverless-api">Vercel 搭建 API 服务，无需服务器</a></li><li><a href="https://juejin.cn/post/7057333396359348255">Vercel 与 Next.js：开源全明星团队背后的商业逻辑：文字版</a></li><li><a href="https://www.bilibili.com/video/BV1gR4y1u76v">Vercel 与 Next.js：开源全明星团队背后的商业逻辑：视频版</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎皮扯淡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>奇思妙想库（持续更新）</title>
      <link href="/2022/04/27/2022-04-27-%E5%A5%87%E6%80%9D%E5%A6%99%E6%83%B3%E5%BA%93%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
      <url>/2022/04/27/2022-04-27-%E5%A5%87%E6%80%9D%E5%A6%99%E6%83%B3%E5%BA%93%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>这里记录自己想到的、看到的好玩的东西</p><p>半括号（直角引号）：「」</p><p>怎么打出来，自定义短语</p><p> <a href="https://www.zhihu.com/question/40441569/answer/119880248">https://www.zhihu.com/question/40441569/answer/119880248</a></p><p>或者更直接点：uubd 中找</p><p><a href="https://blog.csdn.net/songyunli1111/article/details/80378450">https://blog.csdn.net/songyunli1111/article/details/80378450</a></p><p>代码格式：diff</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-    require(&#x27;../lib/dev&#x27;)</span></span><br><span class="line"><span class="addition">+    const &#123;</span></span><br><span class="line"><span class="addition">+        dev</span></span><br><span class="line"><span class="addition">+    &#125; = require(&#x27;../lib/dev&#x27;);</span></span><br><span class="line"><span class="addition">+    dev();</span></span><br></pre></td></tr></table></figure><p>内网穿透：ngrok</p>]]></content>
      
      
      <categories>
          
          <category> 碎皮扯淡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎皮扯淡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>疫情期间，我通过项目重学了小程序</title>
      <link href="/2022/04/23/2022-04-23-%E7%96%AB%E6%83%85%E6%9C%9F%E9%97%B4%E6%88%91%E9%80%9A%E8%BF%87%E9%A1%B9%E7%9B%AE%E9%87%8D%E5%AD%A6%E4%BA%86%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
      <url>/2022/04/23/2022-04-23-%E7%96%AB%E6%83%85%E6%9C%9F%E9%97%B4%E6%88%91%E9%80%9A%E8%BF%87%E9%A1%B9%E7%9B%AE%E9%87%8D%E5%AD%A6%E4%BA%86%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这段时间，上海疫情爆发的很严重，3月12日起笔者就被封在小区，至今已有40多天。这期间经历了面试，抢菜，写文章，到现在又捡起了小程序</p><p>笔者近几年用 github 来记录年度计划，并每周设立计划执行</p><p><img src="https://s2.loli.net/2022/04/27/yRuC5HbtcLSWQpg.png" alt="年度计划"></p><p>像前端知识地图、博客、读书还好，都是日常基本功，但是独立作品今年都没有动作，按照进度，上半年怎么也要有一个，于是乎，就想着从想法里拿出一个做成项目</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>一开始我是想弄我的<a href="https://blog.azhubaby.com/2021/09/24/2021-09-24-%E5%AE%9E%E6%88%98%E7%8B%AC%E7%AB%8B%E9%A1%B9%E7%9B%AE%5B%E5%87%A0%E8%A1%8C%E5%AD%97%5D%EF%BC%9A%E4%BB%8E%E6%83%B3%E6%B3%95%E5%88%B0%E4%B8%8A%E7%BA%BF%E5%85%A8%E8%BF%87%E7%A8%8B/">几行字</a>，因为几行字是H5版本，所以想再做一版小程序，但做完之后感觉有点简单，就打算再做一个</p><p>一个机缘巧合的情况下，我想起了三年前尝试做的独立项目——NextDay</p><p><img src="https://s2.loli.net/2022/04/27/XBEjFSIWOYg6a9t.png" alt="邮箱记录"></p><p>想想，这个页面只有一页，但细节多，还有自定义组件，可以从中学习到做一个小程序会碰到的坑，于是乎，我的小程序之旅有一遭没一遭的做了起来</p><p>这里记录笔者做小程序时的困难和解决方案</p><ul><li><p>手画原型</p><ul><li>以<code>NextDay</code> App 为原型展开</li></ul></li><li><p>小程序开发</p><ul><li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/">微信官方文档·小程序</a></li><li><a href="https://developers.weixin.qq.com/community/develop/question">微信开发社区</a></li></ul></li><li><p>自定义导航条</p><ul><li>全屏模式下，导航条不让其出现<code> &quot;navigationStyle&quot;: &quot;custom&quot;</code></li><li>CSS 也要配合的做，不让他上下滑动<code>postion: fixed</code></li></ul></li><li><p>调试接口</p><ul><li>需要授权，拿到 <code>Partner Name</code> 和 <code>Partner Secret</code></li><li>也正是因为它严明要开源，所以<a href="https://github.com/johanazhu/nextday101">开源</a>了</li><li>需要在 header 处加上 Date 和 authorization，authorization 需要加上 <code>md5</code> 加密，可去开源处看代码</li></ul></li><li><p>主页（主画面）设计、功能</p><ul><li>swiper 滑动功能接入。接口返回数据是从前几日到今天，如何在 onload 处显示今日数据？swiper 的current设置为今天</li><li>布局上采用绝对定位，适配单位上采用rpx和百分比</li></ul></li><li><p>引入 npm 包</p><ul><li>返回的接口数据和页面上的数据是不同的，需要我们从中做转换，遂引入 <a href="https://www.npmjs.com/package/dayjs">dayjs</a> 库</li></ul></li><li><p>注册小程序</p><ul><li>小程序流程</li><li>文案</li></ul></li><li><p>阴影处理</p><ul><li>前端这边的设计，text-shadow 属性</li></ul></li><li><p>上拉出现设置和分享</p><ul><li>抽屉组件，点击分享Icon 分享</li></ul></li><li><p>分享给朋友和朋友圈设置</p><ul><li>onShareAppMessage 和 onShareTimeline</li><li>分享给朋友时，采用的图片应该是 <code>5:4</code> 比例尺寸的图，使用接口返回的小图，意味着需要每次加载时需要记住当前的所在组，每次滑动时都需要改变当前的所在组</li></ul></li><li><p>手机适配</p><ul><li>接口图片有多种，有适配浏览屏的图片和普通图片</li><li>wxml 中进行条件判断，这里注意不能加空格</li></ul></li><li><p>接口云端化</p><ul><li>因为 NextDay 的接口是 HTTP 协议，小程序不支持 HTTP 协议的，所以就用云开发做转发</li><li>主要参考资料：<a href="https://developers.weixin.qq.com/community/business/doc/000660b6924c50cb18caf1e705140d">官网微信学堂视频</a></li></ul></li><li><p>代码重构</p><ul><li>文件布局，设计，云开发，小程序文件，小程序中又有组件、npm 包等功能</li><li>接口</li></ul></li><li><p>设计logo</p><ul><li>不用设计，去官网找即可</li></ul></li><li><p>字体改造、字体适配</p><ul><li>需要找到和 App 中一样的字体，比较难，采用<a href="https://www.qiuziti.com/">字体识别</a> 技术，两种字体，数字日期采用<a href="https://developer.harmonyos.com/cn/docs/design/des-guides/font-0000001157868583">华为最细字体</a>，正文描述字体采用日文字体GothicMB（和 App 中一致）</li><li>截图对比，调整大小</li></ul></li><li><p>点击显示下载按钮</p><ul><li>如下所示，找到也没用</li></ul></li><li><p>下载图片功能</p><ul><li>失败，不能下载，图片域名不是 HTTPS，不支持下载，如果把图片放在云函数上免费额度肯定不够，后续再想想需不需要加，有没有必要加</li></ul></li><li><p>设置主页 关于版本、鸣谢</p><ul><li>多一个关于页面，新版本去除，感觉没必要</li></ul></li><li><p>引入自定义组件</p><ul><li>抽屉组件，点击弹出</li><li>设置</li></ul></li><li><p>上拉模糊</p><ul><li>CSS 样式 <code>backdrop-filter</code></li></ul></li><li><p>搜索<code>NextDay</code> 关键字搜索不到</p><ul><li>应该是刚上架不久，又没做推广，所以搜不到</li><li>要全拼<code>NextDay101</code></li></ul></li><li><p>消息提醒</p><ul><li>希望每一天能提示弹出，新的想法，不知道会不会打扰到别人，第一版就没做</li></ul></li></ul><p>如要跑通这个项目，首先要去申请 PartnerName 、 Partner Secret，这样就能跑通项目，具体的答疑已经在 NextDay 的<a href="https://github.com/johanazhu/nextday101">README</a>中回答，如还有其他疑问，可在Issuse 区提出</p><h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><h3 id="GIF动态"><a href="#GIF动态" class="headerlink" title="GIF动态"></a>GIF动态</h3><p><img src="https://s2.loli.net/2022/04/28/tYJXub8ZpBd7mkq.gif" alt="GIF"></p><h3 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h3><p><img src="https://s2.loli.net/2022/04/28/OYUc6k7NhWTHBDo.png" alt="截图1"></p><p><img src="https://s2.loli.net/2022/04/28/htlDHTBIroExyP4.png" alt="scrrenshot2"></p><p><img src="https://s2.loli.net/2022/04/28/LEXDZ469xgyMbU8.png" alt="scrrenshot3"></p><h2 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h2><p><img src="https://s2.loli.net/2022/04/27/2rkuMdWgGhv3now.jpg" alt="小程序码"></p><p>项目地址：<a href="https://github.com/johanazhu/nextday101">https://github.com/johanazhu/nextday101</a></p>]]></content>
      
      
      <categories>
          
          <category> 实战 </category>
          
          <category> 独立项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 独立项目 </tag>
            
            <tag> Nextday </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网红面试题：从输入 url 到看到页面发生了什么</title>
      <link href="/2022/04/15/2022-04-15-%E4%BB%8E%E8%BE%93%E5%85%A5%20url%20%E5%88%B0%E7%9C%8B%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/"/>
      <url>/2022/04/15/2022-04-15-%E4%BB%8E%E8%BE%93%E5%85%A5%20url%20%E5%88%B0%E7%9C%8B%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p>帝王需要约束，所以有了帝王约束力</p></blockquote><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>这题扎眼看上去没问题，无非是 HTTP 请求到浏览器渲染，但可以聊的东西很多。我想它的执行顺序是，用户输入——开始导航——HTTP 请求——浏览器渲染。其中用户输入、开始导航、浏览器渲染是浏览器方面的知识点，HTTP 请求是 HTTP 方面的知识点</p><p>以下就是从输入 url 到看到页面的整个流程图</p><p><img src="https://s2.loli.net/2022/04/26/zv3DJdqoSm4bVsZ.png" alt="从url输入到页面渲染"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>了解”开始导航”之前，需要先知道浏览器架构，简单来说，现代浏览器由 1 个浏览器主进程、1 个 GPU 进程、多个渲染进程、多个插件进程、网络进程、音频进程、存储进程组成</p><p>下图是李兵在<a href="https://time.geekbang.org/column/intro/100033601?tab=intro">《浏览器工作原理与实践》</a>中所示，展示 Chrome 浏览器的架构</p><p><img src="https://s2.loli.net/2022/04/19/gbtMjmGFy1D9aVw.png" alt="目前的浏览器架构"></p><p>以及未来现代浏览器架构示意图：</p><p><img src="https://i.loli.net/2021/04/08/jq7odUmM9nIB5ZA.png" alt="未来现代chrome浏览器架构"></p><p>文章<a href="https://juejin.cn/post/6844903692890537992">现代浏览器内部揭秘</a>中有一张图，是这样描述的</p><p><img src="https://s2.loli.net/2022/04/21/qtVHexO3g6lWfkh.png" alt="现代浏览器内部解密"></p><p>图中表明浏览器主进程包含了 UI 线程、网络线程、存储线程，与李兵的观点有所不同。那以谁为准呢？以时间为准，李兵的专栏是 19 年所写，而《现代浏览器内部解密》是 18 年的文章，站在 2022 年的背景，现代浏览器，UI、网络、存储等都已升级为进程，而非是浏览器主进程中的线程</p><h2 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h2><p>当用户在地址栏中输入一个字符串时，地址栏会判断输入的关键字是搜索内容，还是请求的 URL</p><ul><li><p>如果是搜索内容，地址栏会使用浏览器默认的搜索引擎，合成新的带搜索关键字的 URL</p><ul><li>例如在 chrome 中搜长泽雅美</li><li><img src="https://s2.loli.net/2022/04/21/3ePLAS2T5xvtghf.png" alt="在chrome中搜长泽雅美"></li></ul></li><li><p>如果输入内容符合 URL 规则，例如输入<code>azhubaby.com</code>，那么地址栏会根据规则，把这段内容加上协议合成完成的 URL，如 <code>https://azhubaby.com</code></p></li></ul><p>当用户输入关键字并键入回车之后，意味着当前页面将替换为新的页面，此时浏览器中有个 API——<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/beforeunload_event">beforeunload</a>，它允许页面在离开之前触发是否一个确认对话框。这里使用此 API，可让浏览器不再导航</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听离开页面前的事件</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;beforeunload&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  event.<span class="title function_">preventDefault</span>();</span><br><span class="line">  event.<span class="property">returnValue</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>可在这里看看 beforeunload 的<a href="https://demo.azhubaby.com/beforeunload.html">demo</a></p></blockquote><p>从浏览器架构分工上讲，当用户输入字符串时是 UI 进程（老一点的浏览器是浏览器主进程）在运作</p><h2 id="开始导航"><a href="#开始导航" class="headerlink" title="开始导航"></a>开始导航</h2><p>当敲下 Enter 键时，UI 进程将指挥权交接给了网络进程。网络进程接受请求指令前，会先查找本地缓存是否有缓存。如果有缓存该资源，那么直接返回资源给浏览器进程；如果在缓存中没找到该资源，那么则正式进入 HTTP 请求阶段</p><p>关于 HTTP 缓存方面的知识可以看看这篇——<a href="https://fe.azhubaby.com/HTTP/HTTP%E7%BC%93%E5%AD%98.html">面试常客：HTTP 缓存</a></p><h2 id="HTTP-请求"><a href="#HTTP-请求" class="headerlink" title="HTTP 请求"></a>HTTP 请求</h2><p>之前写过一篇<a href="https://blog.azhubaby.com/2022/04/06/2022-04-06-TCPIP%E5%8D%8F%E8%AE%AE%E5%8F%8A%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%E6%A8%A1%E5%9E%8B/">TCP/IP 协议及网络分层模型</a>，讲述了 TCP/IP 网络分层协议，它就像搭积木一样，每一层需要下一层的支撑，我们的 HTTP 请求是其 HTTP 协议的应用，需要先连接传输层（TCP）以及更底层网络互连层（IP）</p><p><img src="https://s2.loli.net/2022/04/07/KqvUdjkCNDiYTMt.png" alt="TCP/IP 网络分层模型"></p><p>而 IP 从哪里来，通过 DNS， 使其域名 和 IP 做映射</p><p>我们使用倒推法可以理清“路线”：</p><p>HTTP 请求 —— HTTP 协议连接 —— TCP 协议连接 —— IP 协议连接 —— 需要知道 IP——DNS 做<strong>域名/IP</strong>映射</p><p>所以进入 HTTP 请求的第一步是 DNS 解析</p><h3 id="DNS-解析"><a href="#DNS-解析" class="headerlink" title="DNS 解析"></a>DNS 解析</h3><p>这里对 DNS 不做过多概述，简单来说，它的作用是用域名代替 IP 地址，符合人的记忆。输入<code>du.azhubaby.com</code> ，表示 IP 地址 <code>47.102.152.19</code> ，你可以在命令行中 ping 一个域名，来求证一下结果</p><p><img src="https://s2.loli.net/2022/04/21/3uqc4jHa5rEGnZN.png" alt="ping域名"></p><p>HTTP 请求之前的第一步是判断 DNS 中是否有缓存，如果有，直接返回 IP 地址；如果没有，则进行 DNS 解析，并把结果 IP 缓存到 DNS</p><p>有了 IP 地址后，IP 层连接成功，接下来就是 TCP 传输层</p><h3 id="TCP-连接"><a href="#TCP-连接" class="headerlink" title="TCP 连接"></a>TCP 连接</h3><p>这里要看 HTTP 协议的版本，如果是 HTTP/1.1 的话，就要考虑 TCP 队列否饱满，因为 HTTP/1.1 最多允许一个域名连接 6 条 TCP，太多了就要在等待 TCP 队列中排队；如果是 HTTP/2 的话，那就没事，它允许 TCP 并发</p><p>这里还要考虑到如果协议是 HTTPS 协议的话，还需要建立一条 TLS 连接</p><p>等真正 TCP 连接时，就联想到网红面试题：三次握手、四次挥手</p><h3 id="三次握手、四次挥手"><a href="#三次握手、四次挥手" class="headerlink" title="三次握手、四次挥手"></a>三次握手、四次挥手</h3><p>为什么是三次握手和四次挥手，因为只有这样才能让双方（客户端和服务端）知道彼此的接收能力和发送能力是没问题的</p><p><img src="https://s2.loli.net/2022/04/08/x4yNbSPtHfwDILX.png" alt="http-tcp-three-handshakes"></p><p>步骤为：</p><ul><li>客户端提出建立连接，发出客户端 seq：<code>seq=client_isn</code></li><li>服务端收到消息后返回 <code>ack=client_isn+1</code> 和服务端 seq：<code>seq=server_isn</code></li><li>客户端收到后返回<code>ack=server_isn+1</code> 表示收到了</li></ul><p>可以理解为男女双方确认关系，男女双方要结婚，怎么办？先见父母得到父母认同，之前听过这样一句话：得不到父母祝福的婚姻是不幸福的（当然，不见父母直接结婚的也有，但不主流）</p><ul><li>男方提出去女方家，带上见面礼 seq：<code>seq=男方的诚意</code></li><li>女方家收到见面礼后返回（给男方）红包 <code>ack=我们认可你啦</code> 以及女方去男方家也带上见面礼 seq：<code>seq=女方的诚意</code></li><li>男方家收到见面礼后返回（给女方的）红包 <code>ack=server_isn+1</code></li></ul><p>这个叫确定关系。所以要又来又回三次，双方都确保知道对方的诚意和自己的诚意</p><p>那什么是四次挥手呢？</p><p>在断开之前，需要进行四次挥手</p><p><img src="https://s2.loli.net/2022/04/08/x947eG5YtwPpzsH.png" alt="http-tcp-four-handshakes"></p><p>为什么要有四次挥手？</p><p>主要是为了确保双方都知道对方断开连接</p><p>具体步骤为：</p><ul><li>客户端第一次发送消息给服务端告诉它需要断开连接</li><li>服务端收到消息后返回消息告诉客户端：知道了，为了确保服务端收到了之前所有的 HTTP 请求，服务端需要等一等再断开连接</li><li>服务端确认所有的 HTTP 请求都收到了，主动发消息给客户端：我这边所有的请求都处理完了，我也可以断开连接了</li><li>客户端收到这个请求后，返回消息告诉服务端：我知道，断开连接吧</li></ul><p>主要是为了确认双方的接收能力和发送能力是否正常、制定自己的初始化序列号为后面的可靠性传送做准备</p><p>可以理解为一对男女要分手</p><ul><li>女方提出分手，说你对我不好，我要分手</li><li>男方觉得需求合理，同意分手，但分手之前要把联系方式、合照、各种乱七八糟的的事情算清楚再分手</li><li>男方理清楚后，主动发消息给女方，说这边都处理清楚了，以后你是你，我是我，我们可以分手了</li><li>女方收到消息后，返回告诉男方：我知道了，分手吧</li></ul><p>于是乎，它们就断了，分手手续完成。具体详细的信息可看猿人谷的<a href="https://mp.weixin.qq.com/s?__biz=MzA5MTk4MzgzNA==&mid=2453246617&idx=1&sn=0057c76375e6343672fe1665483dd236&chksm=87b9282cb0cea13a222aaa2ba40dd029484d6e2e192e8d627363a308b353b0108971b15d1c0b&mpshare=1&scene=1&srcid=&sharer_sharetime=1570232506816&sharer_shareid=778ad5bf3b27e0078eb105d7277263f6#rd">面试官，不要再问我三次握手和四次挥手</a>，一个字：细</p><h3 id="发送-HTTP-请求"><a href="#发送-HTTP-请求" class="headerlink" title="发送 HTTP 请求"></a>发送 HTTP 请求</h3><p>TCP 连接已经通了，现在正式发送 HTTP 请求，这里又有的聊了，如 HTTP 的报文内容、请求头、响应头、请求方法、状态码等知识点</p><p>首先 HTTP 的报文结构由 <strong>起始行 + 头部 + 空行 + 实体</strong>组成，简单来说就是 header+body，HTTP 的报文可以没有 body（get 方法），但必须要有 header</p><p>请求头由<strong>请求行 + 头部字段</strong>构成，响应头由<strong>状态行 + 头部字段</strong>构成</p><p>请求行有三部分：请求方法、请求目标和版本号</p><ul><li>例如 GET / HTTP/1.1</li></ul><p>状态行也有三部分：版本号、状态码和原因字符串</p><ul><li>例如 HTTP/1.1 200 OK</li></ul><p>在浏览器中，打开 F12，在 NetWork 中任何一个请求中，你都会看到这样的结构</p><p><img src="https://s2.loli.net/2022/04/24/WzfZhvGHwTF7Kkl.png" alt="报文结构"></p><p>这里我们也常会遇到一些例如 GET 和 POST 请求方式的区别、HTTP 状态码等相关的衍生问题</p><h4 id="GET-和-POST-请求方式的区别"><a href="#GET-和-POST-请求方式的区别" class="headerlink" title="GET 和 POST 请求方式的区别"></a>GET 和 POST 请求方式的区别</h4><ul><li>从缓存角度看，GET 会被缓存，POST 不会被缓存</li><li>从参数角度看，GET 通过在 URL 的”?”后以 key=value 方式传参，数据之间以“&amp;”相连接；POST 则要将数据封装到请求体中发送，这个过程不可见</li><li>从安全角度看，GET 不安全，因为 URL 可见；POST 较 GET 安全度高</li><li>从编码角度看，GET 只接受 ASCII 字符，向服务器发送中文字符可能会出现乱码；POST 支持标准字符集，可以正确传递中文</li><li>从数据长度的限制看，GET 一般受 URL 长度限制（URL 的最大长度是 2048 个字符），POST 无限制</li></ul><h4 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h4><p><strong>RFC 标准把状态码分成了五类</strong> ，用数字的第一位表示分类，而 0<del>99 不用，这样状态码的实际可用范围就大大缩小了，由 000</del>999 变成了 100~599。</p><p>这五类的具体含义是：</p><ul><li>1××：提示信息，表示目前是协议处理的中间状态，还需要后续的操作；</li><li>2××：成功，报文已经收到并被正确处理；</li><li>3××：重定向，资源位置发生变动，需要客户端重新发送请求；</li><li>4××：客户端错误，请求报文有误，服务器无法处理；</li><li>5××：服务器错误，服务器在处理请求时内部发生了错误。</li></ul><p>目前 RFC 标准里总共有 41 个状态码</p><p>101 - Switching Protocols，客户端使用 Upgrade 头字段</p><p>200 - 请求成功</p><p>204 - 无内容，服务器成功处理了请求，但没有返回任何内容。</p><p>206 - 一般用来做断点续传，或者是视频文件等大文件的加载</p><p>301 - 永久重定向</p><p>302 - 临时重定向</p><p>304 - 未修改协商缓存，返回缓存中的数据。它不具有通常的跳转含义，但可以理解成 <strong>重定向到缓存的文件</strong>（即缓存重定向）</p><p>400 - 请求中语法错误</p><p>401 - 未授权</p><p>403 - 服务器收到请求，但是拒绝提供服务，即资源不可用</p><p>404 - 无法找到请求资源</p><p>408 Request Timeout - 请求超时</p><p>414 - 请求 URI 过长（如图一新浪常有）</p><p>500 - 服务器内部错误</p><p>501 - 尚未实施：服务器不具备请求功能</p><p>502 - 网关错误</p><p>503 - 服务器不可用，主动用 503 响应请求或 Nginx 设置限速，超过限速，会返回 503</p><p>504 - 网关超时</p><p>这里要对 304 做一下说明，当请求头 <code>If-Modified-Since</code> 或 <code>If-None-Match</code> 中判断修改时间是否一致（或唯一标识是否一致），是，则返回 304，使用浏览器内存中的本地缓存；不一致则说明要更新，继续请求资源放回给客户端，并带上 <code>Last-Modified</code> 或 <code>ETag</code></p><h4 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h4><p>HTTP/1.1 规定了八种方法，都必须是大写形式</p><ul><li>GET：获取资源，可以理解为读取或者下载数据。<strong>只有 GET 请求才能起到缓存效果</strong></li><li>HEAD：获取资源的元信息</li><li>POST：像资源提交数据，相当于写入或上传数据</li><li>PUT：类似 POST</li><li>DELETE：删除资源</li><li>CONNECT：建立特殊的连接隧道</li><li>OPTIONS：列出可对资源实行的方式</li><li>TRACE：追踪请求 - 响应的传输路径</li></ul><h2 id="浏览器渲染"><a href="#浏览器渲染" class="headerlink" title="浏览器渲染"></a>浏览器渲染</h2><p>当 HTTP 请求完毕后，断开 TCP 连接，将资源返回给客户端（浏览器）。此时浏览器要判断是否与打开的网站是同一个站点。因为如果是同一个站点的话，则可使用同站点的渲染进程渲染页面，如果不是，浏览器则打开新的渲染进程解析资源</p><p>浏览器渲染的大致流程如下图所示：</p><p><img src="https://i.loli.net/2021/06/03/zEAmsLgQ3tXu89P.jpg" alt="浏览器渲染大致流程"></p><p>我们可以将页面渲染分为三个步骤：</p><p>解析</p><ul><li>HTML 被解析为 DOM 树，CSS 被解析为 CSS 规则树，JavaScript 通过 DOM API 和 CSSOM API 来操作 DOM Tree 和 CSS Rule Tree</li></ul><p>渲染</p><ul><li>浏览器引擎通过 DOM Tree 和 CSS Rule Tree 构建 Rendering Tree（渲染树），这其中进行大量的 回流（Reflow） 和 重绘（Repaint）</li><li>回流和重绘<ul><li>回流：意味着元件的几何尺寸变了，需要重新验证并计算 Render Tree</li><li>重绘：屏幕的一部分需要重画，比如某个 CSS 的背景色变了，但元件的几何尺寸没有变</li><li>回流的成本要比重绘大</li></ul></li></ul><p>绘制</p><ul><li>最后通过操作系统（浏览器）的 Native GUI 的 API 绘制</li></ul><p>其中，衍生出重绘和回流的问题，提高性能的方法之一就是减少浏览器的渲染时间，其中的一个优化点就是减少重绘和回流</p><h3 id="减少回流和重绘的方法"><a href="#减少回流和重绘的方法" class="headerlink" title="减少回流和重绘的方法"></a>减少回流和重绘的方法</h3><ol><li>不要一条条修改 DOM 样式，与其这样，不如预定义好 CSS 的 class，然后修改 DOM 的样式</li><li>把 DOM“离线”后修改<ol><li>使用 documentFragment 对象在内存里操作 DOM</li><li>先把 DOM 给 <code>display：none</code>（有一次 Reflow），然后你想怎么改就怎么改，再把它显示出来</li><li>clone 一个 DOM 节点到内存里，然后想怎么改就怎么改，改完后和在线的那个交换一下</li></ol></li><li>不要把 DOM 节点的属性值放在一个循环中当作循环的变量，不然这会导致大量地读写这个节点的属性</li><li>尽可能地修改层级比较低的 DOM</li><li>不要使用 table 布局</li></ol><h3 id="造成回流的属性："><a href="#造成回流的属性：" class="headerlink" title="造成回流的属性："></a>造成回流的属性：</h3><p>width、height、padding、margin、border、position、top、left、bottom、right、float、clear、text-align、vertical-align、line-height、font-weight、font-size、font-family、overflow、white-space</p><h3 id="造成重绘的属性："><a href="#造成重绘的属性：" class="headerlink" title="造成重绘的属性："></a>造成重绘的属性：</h3><p>color、border-style、border-radius、text-decoration、box-shadow、outline、background</p><p>记住一点，回流是与几何大小相关，重绘与大小无关</p><p>如此，从输入 url 到看到页面的整个流程就走完了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题能衍生很多问题，从一题可以测试出面试者的 HTTP、浏览器相关知识。<del>正所谓”鹏怒而飞，其翼若垂天之云；水击三千里，碧空九万丈；好风凭借力，送我上青云。</del>“。这道题之所以能成为经典题，不是没有它的原因的</p><p>笔者这里做一个总结，把这题可以衍生的知识点逐一列出，待君思索</p><p>浏览器方面</p><ul><li>浏览器架构<ul><li>由什么组成？浏览器主进程、GPU 进程、多个渲染进程、多个插件进程、网络进程、音频进程、存储进程等</li><li>渲染进程中有哪些进程？GUI 渲染线程、JS 引擎线程、事件触发线程、网络异步线程、定时器线程</li><li>进程和线程的区别？进程是应用程序创建的实例，而线程依托于进程，它是计算机最小的运行单位</li></ul></li><li>浏览器渲染<ul><li>渲染流程？解析、渲染、绘制</li><li>重绘和回流<ul><li>两者的区别</li><li>重绘和回流的属性</li><li>如何减少重绘和回流，提高渲染性能</li></ul></li></ul></li></ul><p>HTTP 方面</p><ul><li><p>HTTP 缓存</p><ul><li><p>强缓存</p><ul><li>HTTP/1.1 Cache-Control</li><li>HTTP/1.0 Expires</li><li>Cache-Control &gt; Expires</li></ul></li><li><p>协商缓存</p><ul><li>HTTP/1.1 ETag/If-None-Match</li><li>HTTP/1.0 Last-Modified/If-Modified-Since</li><li>精准度：ETag &gt; Last-Modified</li><li>性能：Last-Modified &gt; ETag</li></ul></li></ul></li><li><p>TCP/IP 连接</p><ul><li>三次握手、四次挥手</li></ul></li><li><p>网络层面的性能优化</p><ul><li>HTTP/1.1 的做法</li><li>HTTP/2 的做法</li><li>HTTP/3 的做法</li><li>每个阶段采用的性能优化是有所不同的</li></ul></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p><a href="https://coolbash.cn/articles/9666.html">浏览器的渲染原理简介</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg5NDEyMzA2NQ==&mid=2247484400&idx=1&sn=9c7d4b7f346034fd06e2a587cb9c58cf&chksm=c0252ea6f752a7b06e0e6ba4346581fbe864ec769963ffa6cf4b0c7204f4afb0ddb44a76e6cd&mpshare=1&scene=1&srcid=1008vvgoRuGQgyy1MwuzlS8T&sharer_sharetime=1570506760100&sharer_shareid=778ad5bf3b27e0078eb105d7277263f6#rd">深入理解现代浏览器</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/96986818?tdsourcetag=s_pctim_aiomsg">万字详文：深入理解浏览器原理</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzA4ODUzNTE2Nw==&mid=2451046766&idx=1&sn=4d9177602ebd278bfa5c5bc959598b73&chksm=87c4187eb0b3916869bc64d39e7b3c6e59bb2c5fe2789d9a888be2cb6cda4c7cc4ff05d99e8b&mpshare=1&scene=1&srcid=&sharer_sharetime=1583904346478&sharer_shareid=778ad5bf3b27e0078eb105d7277263f6#rd">现代浏览器内部工作原理（附详细流程图）</a></p></li><li><p><a href="https://segmentfault.com/a/1190000022633988">前端都该懂的浏览器工作原理</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> HTTP </tag>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP/IP 协议及网络分层模型</title>
      <link href="/2022/04/06/2022-04-06-TCPIP%E5%8D%8F%E8%AE%AE%E5%8F%8A%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%E6%A8%A1%E5%9E%8B/"/>
      <url>/2022/04/06/2022-04-06-TCPIP%E5%8D%8F%E8%AE%AE%E5%8F%8A%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>互联网要互联连接，一条消息从发送到接受，都需要走一遍网络协议。我们讲讲 TCP/IP 协议以及网络分层模型</p><p>先看网络分层模型</p><h2 id="网络分层模型"><a href="#网络分层模型" class="headerlink" title="网络分层模型"></a>网络分层模型</h2><p>在网络分层模型中，有两种模型，一是 TCP/IP 标准，它提出得早，1970年就被发明。它提出了分层概念，将网络通信分为四层，分别是链接层、网络层、传输层、应用层</p><p>另一种是 OSI，全称叫开放式系统互联通信参考模型，是国际标准，用来统一各种网络协议，始于上世纪70年代后期。是网络分层的”空架子老大”</p><p>OSI 模型分成了七层，分别为物理层、数据链路层、网络层、传输层、会话层、表示层、应用层</p><p>两者的关系就好比手机系统的巨头是 iOS 和 Android，它们制定了标准，因为话语强，所以国际标准以它们为核心再添加指定一些其他标准，但核心是 iOS 和 Android。其中 TCP/IP 就是网络分层模型中的老大，OSI 就像英国女王那样，是皇室象征，是国际标准</p><h3 id="TCP-IP-网络分层模型"><a href="#TCP-IP-网络分层模型" class="headerlink" title="TCP/IP 网络分层模型"></a>TCP/IP 网络分层模型</h3><p>很有意思，TCP/IP 明明是网络通信协议的统称，却以其中两个核心协议为名字来称呼。它总共有四层，像搭积木一样，每一层需要下层的支撑，同时又支撑着上层。如图所示：</p><p><img src="https://s2.loli.net/2022/04/07/KqvUdjkCNDiYTMt.png" alt="TCP/IP 网络分层模型"></p><p>最底层也是第一层叫 网络访问（链接）层，Network Access（link）layer，负责在以太网、Wi-Fi 这样底层网络上发送原始数据包。使用 MAC 地址来标记网络上的设备，所以有时候也叫 MAC 层</p><p>第二层叫网络互连层，internet layer， IP 协议就处在这一层。因为 IP 协议定义了 IP 地址的概念，所以就在链接层的基础上，用 IP 地址取代 MAC 地址</p><p>第三层叫传输层，transport layer，负责保证数据在 IP 地址标记的两点之间可靠地传输，例如 TCP、UDP、SCTP等</p><p>第四层叫应用层，顾名思义，是面向具体应用的协议，如 HTTP、SSH、FTP、SMTP、DNS等</p><p>按照 TCP/IP 模型，网络通信是一层包着一层，发送端每通过一层则增加首部，接收端每通过一层则删除首部</p><p><img src="https://s2.loli.net/2022/04/07/Pyge4oamhtSUncX.jpg" alt="数据传输过程"></p><p>这里要注意的是：</p><ul><li>MAC 层的传输单位是帧（frame）</li><li>IP 层的传输单位是包（packet）</li><li>TCP 层的传输单位是段（segment）</li><li>HTTP 的传输单位则是消息或报文（message）</li></ul><blockquote><p>注：我们常说的丢包丢包丢的就是 IP 包</p></blockquote><h3 id="OSI-网络分层模型"><a href="#OSI-网络分层模型" class="headerlink" title="OSI 网络分层模型"></a>OSI 网络分层模型</h3><p>官方定的分层模型叫 OSI，全称是开放式系统互联通信参考模型。你问我支不支持，我是支持的，但它又不是个强制标准，所以一直有四层（TCP/IP模型）、七层（OSI模型）之说。</p><p><img src="https://s2.loli.net/2022/04/07/9oZybraWt7lQe83.png" alt="OSI 网络分层模型"></p><p>第一层：物理层，physical layer，网络的物理形式，例如电缆、光纤、网卡等；</p><p>第二层：数据链路层，data link layer，它基本相当于 TCP/IP 的链接层；</p><p>第三层：网络层，network layer，相当于 TCP/IP 的网络层；</p><p>第四层：传输层，transport layer，相当于 TCP/IP 的传输层；</p><p>第五层，会话层，session layer，维护网络中的连接状态，即保持会话和同步；</p><p>第六层，表示层，presentation layer，把数据转换为合适、可理解的语法和语义；</p><p>第七层，应用层，面向具体的应用传输数据</p><h3 id="两个分层模型的映射关系"><a href="#两个分层模型的映射关系" class="headerlink" title="两个分层模型的映射关系"></a>两个分层模型的映射关系</h3><p><img src="https://s2.loli.net/2022/04/22/InEupjGPMkeNXYl.png" alt="分层模型的映射关系"></p><p>第一层：物理层，TCP/IP 里无对应；</p><p>第二层：数据链路层，对应 TCP/IP 的网络访问（链接）层；</p><p>第三层：网络层，对应 TCP/IP 的网络互连层；</p><p>第四层：传输层，对应 TCP/IP 的传输层；</p><p>第五、六、七层：统一对应到 TCP/IP 的应用层。</p><h2 id="TCP-IP-协议"><a href="#TCP-IP-协议" class="headerlink" title="TCP/IP 协议"></a>TCP/IP 协议</h2><p>上诉我们知道两个网络分层模型是什么，由什么组成，并且知道它们的映射关系。虽然有国际标准，但这个世界还是以 TCP/IP 协议为主要标准。你可以理解为先入为主，也可以理解为单极霸权，甚至可以联想一下5G/6G 标准对世界话语权的重要性，总之，现阶段还是以 TCP/IP 协议为主。</p><p>四大层</p><h3 id="网络访问（链接）层"><a href="#网络访问（链接）层" class="headerlink" title="网络访问（链接）层"></a>网络访问（链接）层</h3><p>MAC 地址，它表示的你的物理世界地址</p><h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><p>IP 协议定义了 IP 地址</p><p>电影《黑客军团》中有个片段，被做成了程序员段子</p><p><img src="https://s2.loli.net/2022/04/07/tDLM34TkmnR8esP.jpg" alt="程序员段子"></p><p>A：你的地址是什么？</p><p>B： 173.168.15.10（IP地址）</p><p>A：不，你的本地地址呢？</p><p>B： 127.0.0.1</p><p>A：我的意思是你的物理地址</p><p>B： 29:01:38:62:31:58（物理地址指的就是 MAC 地址）</p><p>你也可以通过 <code>ipconfig /all</code> 来查看你的所有地址</p><p><img src="https://s2.loli.net/2022/04/07/bgqxAaT5H8ol4cD.png" alt="网络地址"></p><h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><p>具有代表性的是 TCP，可以说在 HTTP3 之前，传输层就是 TCP 的天下，它代表的就是传输层，可在 HTTP2 之后，发现影响性能瓶颈的地方成了 TCP 的队头阻塞，所以 UDP 开始活跃起来，真是此一时彼一时</p><p>关于 TCP 和 UDP ，这张图表能更好地对比分析</p><p><img src="https://s2.loli.net/2022/04/07/mLlIU1r4QnBY8pe.png" alt="TCP 和 UDP"></p><h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p>应用层有很多协议，例如 HTTP 协议、FTP 协议、SMTP 协议…</p><table><thead><tr><th>应用层协议</th><th>应用</th></tr></thead><tbody><tr><td>HTTP</td><td>万维网</td></tr><tr><td>FTP</td><td>文件传输</td></tr><tr><td>DNS</td><td>域名转换</td></tr><tr><td>SMTP</td><td>电子邮件</td></tr><tr><td>TELNET</td><td>远程终端接入</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>  <a href="https://mp.weixin.qq.com/s/EhkbUZYX_P7XJFQ5471HaQ">本文把 TCP/IP 讲绝了！</a></li><li>  <a href="https://mp.weixin.qq.com/s?__biz=Mzg4MTYwMzY1Mw==&mid=2247496571&idx=1&sn=3532002eb4a2f4d4cd54cb6bfc934f05&source=41#wechat_redirect">一文串联 HTTP、TCP、IP、以太网</a></li><li>  <a href="https://blog.poetries.top/browser-working-principle/guide/part1/lesson02.html#%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8C%85%E7%9A%84%E2%80%9C%E6%97%85%E7%A8%8B%E2%80%9D">TCP 协议：如何保证页面文件能被完整送达浏览器</a></li><li>  <a href="https://mp.weixin.qq.com/s/7uuypNid-1iNlXavTFHp7w">被问到 http 的时候你就这么回答</a></li><li>  <a href="https://link.zhihu.com/?target=https://zh.wikipedia.org/wiki/TCP/IP%E5%8D%8F%E8%AE%AE%E6%97%8F%23cite_note-1">TCP/IP协议族</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备忘录：全局下载的npm包</title>
      <link href="/2022/03/29/2022-03-29-%E5%A4%87%E5%BF%98%E5%BD%95%EF%BC%9A%E5%85%A8%E5%B1%80%E4%B8%8B%E8%BD%BD%E7%9A%84npm%E5%8C%85/"/>
      <url>/2022/03/29/2022-03-29-%E5%A4%87%E5%BF%98%E5%BD%95%EF%BC%9A%E5%85%A8%E5%B1%80%E4%B8%8B%E8%BD%BD%E7%9A%84npm%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>最近升级 node，不小心升级坏了，于是把原先的 Node 应用程序删了之后，输入命令后说”系统找不到命令“。试了各种方法，还是不行，索性把原先的 node 全部删除，重新安装一边</p><p>按照<a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">安装指示</a>一下把 Node 安装完</p><p>把缓存和全局包放在自定义盘下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;D:\Program Files (x86)\NodeJS\node_cache&quot;</span></span><br><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;D:\Program Files (x86)\NodeJS\node_global&quot;</span></span><br></pre></td></tr></table></figure><p>再下载个人认为可以全局下载的 npm 包</p><p><a href="https://github.com/cnpm/cnpm">cnpm</a>：阿里出品，npm 中国站，特点是下载 npm 包的源放在国内，所以下包速度会变快</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><p><a href="https://pm2.keymetrics.io/">pm2</a>：小卡的 node 进程管理工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pm2 -g</span><br></pre></td></tr></table></figure><p><a href="https://www.npmjs.com/package/nodemon">nodemon</a>： node 开发者必备，服务热更新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i nodemon -g</span><br></pre></td></tr></table></figure><p><a href="https://vuepress.vuejs.org/zh/">vuepress</a>：尤式文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vuepress</span><br></pre></td></tr></table></figure><p><a href="https://umijs.org/zh-CN">umi</a>：云谦的脚手架</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add umi</span><br></pre></td></tr></table></figure><p><a href="https://www.pnpm.cn/">pnpm</a>：更快的软件包管理器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g pnpm</span><br></pre></td></tr></table></figure><p><a href="https://vuepress.vuejs.org/zh/">yarn</a>：和 npm 差不多的包管理器，速度快、又稳定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yarn</span><br></pre></td></tr></table></figure><p><a href="https://www.npmjs.com/package/http-server">http-server</a>：快速启动 Node 静态服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g http-server</span><br></pre></td></tr></table></figure><p><a href="https://www.npmjs.com/package/serve">serve</a>：快速启动 Node 静态服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g serve</span><br></pre></td></tr></table></figure><p><a href="https://www.npmjs.com/package/npm-check-updates">npm-check-updates</a>：升级 package.json 中的 各种包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm-check-updates</span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">ncu -u </span><br></pre></td></tr></table></figure><p><a href="https://www.npmjs.com/package/typescript">typescript</a>：添加了类型系统的 JavaScript</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure><p><a href="https://github.com/antfu/ni">antfu/ni</a>：自动使用正确的包管理器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g @antfu/ni</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防抖与节流</title>
      <link href="/2022/03/24/2022-03-24-%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/"/>
      <url>/2022/03/24/2022-03-24-%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p>最近去面试，又遇到面试官问我防抖与节流了，而明明前几天就看过手写代码，却写不出来。有时候我在想，是不是自己太笨了</p><p>回归正题</p><h2 id="防抖（debounce）"><a href="#防抖（debounce）" class="headerlink" title="防抖（debounce）"></a>防抖（debounce）</h2><p>先不说概念，按自己的理解，在单反里，有防抖机制。因为人在拿着单反的时候会手抖（单反重），按下快门的瞬间，照片会糊，所以有防抖机制，以防止新手把照片拍糊</p><p>单反中的防抖是防止抖动，让人拍出清晰的照片，JavaScript 中的防抖是为了什么？</p><p>同理，它的作用也是防止抖动。试想当你频繁触发一个事件时，就会引起不必要的性能损失，那么让该事件在停止触发后再触发，以此减少部分性能</p><h3 id="防抖的定义"><a href="#防抖的定义" class="headerlink" title="防抖的定义"></a>防抖的定义</h3><p>防抖就是要延迟执行，你一直操作触发事件一直不执行，当你停止操作等待多少秒后才执行</p><p>也就是说不管事件触发频率有多高，一定在事件触发 n 秒后执行。如果在事件触发的 n 秒又触发了这个事件，那就以新事件的事件为准，n 秒后才执行。总之，要等你触发完事件 n 秒内不再触发事件，它才执行</p><h3 id="手写防抖"><a href="#手写防抖" class="headerlink" title="手写防抖"></a>手写防抖</h3><p>根据定义，我们知道要在时间 n 秒后执行，那么我们就用定时器来实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">event, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer); <span class="comment">// 清除setTimeout，使其回调函数不执行</span></span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      event.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    &#125;, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码很简单，即当还在触发事件时，就清除 timer，使其在 n 秒后执行，但此写法首次不会立即执行，为其健壮性，需加上判断是否第一次执行的第三个参数 flag，判断其是否立即执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">event, wait, flag</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    <span class="keyword">if</span> (!timer &amp;&amp; flag) &#123;</span><br><span class="line">      event.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        event.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="防抖场景"><a href="#防抖场景" class="headerlink" title="防抖场景"></a>防抖场景</h3><h4 id="窗口大小变化，调整样式"><a href="#窗口大小变化，调整样式" class="headerlink" title="窗口大小变化，调整样式"></a>窗口大小变化，调整样式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="title function_">debounce</span>(handleResize, <span class="number">200</span>));</span><br></pre></td></tr></table></figure><h4 id="搜索框，输入后-1000-毫秒搜索"><a href="#搜索框，输入后-1000-毫秒搜索" class="headerlink" title="搜索框，输入后 1000 毫秒搜索"></a>搜索框，输入后 1000 毫秒搜索</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">debounce</span>(fetchSelectData, <span class="number">300</span>);</span><br></pre></td></tr></table></figure><h4 id="表单验证，输入-1000-毫秒后验证"><a href="#表单验证，输入-1000-毫秒后验证" class="headerlink" title="表单验证，输入 1000 毫秒后验证"></a>表单验证，输入 1000 毫秒后验证</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">debounce</span>(validator, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h3 id="防抖帝王库"><a href="#防抖帝王库" class="headerlink" title="防抖帝王库"></a>防抖帝王库</h3><p>两大工具库都有防抖源码，可供参考</p><p><a href="https://github.com/lodash/lodash/blob/master/debounce.js">lodash-debounce</a></p><p><a href="https://github.com/jashkenas/underscore/blob/master/modules/debounce.js">underscore-debounce</a></p><h2 id="节流（throttle）"><a href="#节流（throttle）" class="headerlink" title="节流（throttle）"></a>节流（throttle）</h2><p>顾名思义，一节一节的流，就好似控制水阀，在事件不断触发的过程中，固定时间内执行一次事件</p><h3 id="手写节流"><a href="#手写节流" class="headerlink" title="手写节流"></a>手写节流</h3><p>因为是固定时间内执行一次时间，所以我们有两种实现方法，一用时间戳，二用定时器</p><h4 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">event, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> pre = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">Date</span>() - pre &gt; wait) &#123;</span><br><span class="line">      <span class="comment">// 当 n 秒内不重复执行</span></span><br><span class="line">      pre = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">      event.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用时间戳虽然能实现节流，但是最后一次事件不会执行</p><h4 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">event, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">        event.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用定时器实现节流，虽然最后一次能触发，但是第一次不会触发</p><h4 id="时间戳-定时器"><a href="#时间戳-定时器" class="headerlink" title="时间戳 + 定时器"></a>时间戳 + 定时器</h4><p>为解决第一次和最后一次都可以触发，把两者结合起来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">event, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> pre = <span class="number">0</span>,</span><br><span class="line">    timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">Date</span>() - pre &gt; wait) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">      timer = <span class="literal">null</span>;</span><br><span class="line">      pre = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">      event.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        event.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="节流场景"><a href="#节流场景" class="headerlink" title="节流场景"></a>节流场景</h3><h4 id="scroll-滚动"><a href="#scroll-滚动" class="headerlink" title="scroll 滚动"></a>scroll 滚动</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="title function_">throttle</span>(handleScroll, <span class="number">200</span>));</span><br></pre></td></tr></table></figure><h4 id="input-动态搜索"><a href="#input-动态搜索" class="headerlink" title="input 动态搜索"></a>input 动态搜索</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">throttle</span>(fetchInput, <span class="number">300</span>);</span><br></pre></td></tr></table></figure><h3 id="节流帝王库"><a href="#节流帝王库" class="headerlink" title="节流帝王库"></a>节流帝王库</h3><p><a href="https://github.com/lodash/lodash/blob/master/throttle.js">lodash-throttle</a></p><p><a href="https://github.com/jashkenas/underscore/blob/master/modules/throttle.js">underscore-throttle</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>防抖：只执行最后一次。事件持续触发，但只有等事件停止触发后 n 秒后才执行函数</p><p>节流：控制执行频率。持续触发，每 n 秒执行一次函数</p><p>对比图：</p><p><img src="https://s2.loli.net/2022/03/24/Y5zAUx4ELGuCPyO.png" alt="防抖节流对比图"></p><p>线上 demo（司徒正美的 demo）：<a href="https://demo.azhubaby.com/%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/index.html">防抖节流</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p><a href="www.conardli.top/docs/JavaScript/%E8%8A%82%E6%B5%81.html">awesome-coding-js</a></p></li><li><p><a href="https://www.zoo.team/article/anti-shake-throttle">防抖节流场景及应用</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/38313717">函数防抖与函数节流</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 防抖 </tag>
            
            <tag> 节流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>温铁军：从“老冷战”到“新冷战“笔记</title>
      <link href="/2022/03/23/2022-03-23-%E6%B8%A9%E9%93%81%E5%86%9B%EF%BC%9A%E4%BB%8E%E2%80%9C%E8%80%81%E5%86%B7%E6%88%98%E2%80%9D%E5%88%B0%E2%80%9C%E6%96%B0%E5%86%B7%E6%88%98%E2%80%9C/"/>
      <url>/2022/03/23/2022-03-23-%E6%B8%A9%E9%93%81%E5%86%9B%EF%BC%9A%E4%BB%8E%E2%80%9C%E8%80%81%E5%86%B7%E6%88%98%E2%80%9D%E5%88%B0%E2%80%9C%E6%96%B0%E5%86%B7%E6%88%98%E2%80%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="导论"><a href="#导论" class="headerlink" title="导论"></a>导论</h2><h2 id="1-1全球资本主义历史阶段分析"><a href="#1-1全球资本主义历史阶段分析" class="headerlink" title="1.1全球资本主义历史阶段分析"></a>1.1全球资本主义历史阶段分析</h2><p>一、殖民主义全球化的缘起</p><p>​    欧洲对中国巨大的贸易逆差导致“白银危机”</p><p>二、殖民注意全球化的演变</p><p>​    从航海大发现到奴隶制三角贸易</p><p>三、产业资本全球化的本质</p><p>​    以“在国化”为特征的工业能力竞争</p><p>全球化分为早期的殖民主义的全球化，中期的产业资本阶段的全球化和现代金融资本的全球化。做这三个阶段的划分，主要是想让大家理解资本主义的演变过程。在不同的阶段，资本主义的演变都和它内生性的矛盾所造成的危机直接相关</p><h3 id="殖民主义的全球化阶段"><a href="#殖民主义的全球化阶段" class="headerlink" title="殖民主义的全球化阶段"></a>殖民主义的全球化阶段</h3><p>什么样的危机导致了殖民化的全球化？</p><p>和中国历史有关</p><p>例子：中国南海有个重大的沉船的考古——南海一号</p><blockquote><p>南海一号是一搜南宋时期的木质古沉船，通过海上丝绸之路向外运送瓷器而失事沉没，1987年在广东阳江海域发现，它也是迄今为止世界上发现的海上沉船中，年代最早、船体最大、保存最完整的远洋贸易商船</p></blockquote><p>证明了在宋代就开始用大船向海外输送中国的商品，无外乎就是那个时候的瓷器。</p><p>从东南亚一路向西亚，然后再通过西亚的阿拉伯商人转运进地中海，在地中海沿岸形成瓷器贸易</p><p>运输会有折损、以及阿拉伯商人从中抽利，中国这边的商品在本国很便宜，运送到西方都很贵（加上丝绸和茶叶）</p><p>从宋代开始的这种大船向西方出口的这种贸易就带来了中国的大量的贸易顺差，但西方那个时候给不了中国什么东西，中国唯一需要的是中国自己的国内当作货币的白银，所以自宋代开始中国就开始从西方大量输入得到的是白银。那时候有句话叫“十船九空”，送过去十艘船，运回来九艘是空的，唯一一船实之白银也</p><blockquote><p>“一条鞭法”是明代嘉靖时期确立的赋税及徭役制度，同时也是中国历史上具有深远历史影响的一次社会变革</p><p>其规定：把各州县的田赋、徭役以及其他杂征总为一条，合并征收银两，按亩折算缴纳</p></blockquote><p>从明代张居正的“一条鞭法”开始，连朝廷官方只收足色白银来当税款，于是乎中国成了白银输入国</p><p>官方在用白银作为税收的主要形式，于是乎白银的需求量越来越大，你越大，带来一个很大的麻烦。沿着这条路，沿着你海上的丝绸之路一路过去，没有产银国，那怎么办呢？</p><p>欧洲这些因为吃进了高价的中国商品的这些国家就发生了必须向中国返回白银这样的危机。白银危机就导致欧洲发生长期的白银战争。它的文化是一个劫掠文化，没有就抢，各自抢它也不生产白银，于是乎就发现白银从哪来，从美洲来，就导致了因为白银危机，白银战争，把这些没有白银的国家最后打得实在没有办法，就出现了所谓航海大发现，就出现了去美洲去掠夺白银</p><p>实际上：欧洲人认为我们在商路上损失太多，中间经过阿拉伯人严酷的盘剥，我们不能让他们这么获利，于是乎欧洲人说我们要绕过大西洋到非洲的南端开普敦港内，再进入亚洲，我们要去发现心的航路，绕过中间的阿拉伯商人不让他们盘剥，我们应该直接跟亚洲贸易，直接跟东亚尤其主要跟中国。他们希望的是欧洲直接跟中国贸易以减少被中国多少道的盘剥，这个对欧洲来说是必要的</p><blockquote><p>巴尔干半岛</p><p>巴尔干半岛历史悠久，是人类文明较早发祥地之一。从19时机初期起，沙俄渴望打通南下地中海的通道，奥地利帝国企图向难扩张通向亚得里亚海，英、法则要保护通往印度洋和远东的交通命脉，因而巴尔干半岛成为俄、奥、英、法激烈争夺的地区，多次发生战争，有“欧洲火药库”之称</p></blockquote><p>客观上阿拉伯势力借着商路的开拓，接着商贸的覆盖，他们已经进入到了巴尔干半岛。他借着商业的繁荣进入欧洲的南端。而这些地区过去是古希腊的，在往地中海的西侧，也就是西班牙这块，他几乎把西班牙的一般都占领了。像欧洲一些大的教堂都是清真寺，虽然现在重新恢复了天主教，占到整个大的宗教场所的只是很少的一部分，可见当年阿拉伯势力再这有多么强大，这对欧洲人来说它是一个文化的衰败。所以他们出海是没办法的办法。最后成功的是达·伽马</p><blockquote><p>瓦斯科·达·伽马</p><p>瓦斯科·达·伽马（约1469年—1524年），出生于葡萄牙锡尼什，是葡萄牙航海家、探险家，从欧洲饶好望角到印度航海路线的开拓者</p></blockquote><p>到美洲成功的是哥伦布</p><blockquote><p>克里斯托弗·哥伦布</p><p>克里斯托弗·哥伦布（1452年9月22日—1506年5月20日），意大利探险家、航海家，大航海时代的主要人物之一</p></blockquote><p> 这中间有多少人葬生大海都不知道。所以在今天的教科书上，大家好像对这个过程缺乏了解，以为就是因为某种什么科技、什么制度、什么民主、什么自由等等这些导致西方人覆盖了美洲、非洲、澳洲等等这些大陆，其实是因为贸易的严重的逆差。因为白银危机，白银战争，打，最后大家不能忍受这种被中间盘剥过重。于是乎航海大发现，于是乎随着航海大发现出现了大规模的向海外的移民，移民伴生的是掠夺白银，用以支付贸易逆差</p><h3 id="殖民注意全球化的演变"><a href="#殖民注意全球化的演变" class="headerlink" title="殖民注意全球化的演变"></a>殖民注意全球化的演变</h3><p>从全球化的第一个阶段来说，我们说殖民主义的全球化，某种程度上，其实是早期的东西方之间的贸易逆差，起了很重要的作用。当然，像教科书里看到的，教科书里是西化的，看到的东西也有道理，我只是补充一个大家很少看到的历史的这个过程，这是一个演变过程</p><p>在这个演变过程中，当然为了维持它的航海的海上航路，于是乎需要有各种各样的科学技术等等，当它要到美洲去开银矿时，当然也需要各种各样的技术跟进，于是乎这些需求，就有了发展，当然也就带来了他们，比如说地理学、气候学、海洋学等等，各种各样的知识的发展，这些我们也觉得它时一个客观过程，所以自然科学的崛起是在这个阶段出于客观需求而形成的</p><p>同理，因为大量地进入到了其他大陆的原住民社会，因此有关这些原住民社会的，比如说像有些人文社会科学的源起，也是因为它需要接入大量的不同的社会族群，而开始有了这些关于人文的、社会的、种族的，关于人类学的等等，慢慢地随着需求而产生的。也就是在我们讲到资本主义第一个历史阶段的时候，这个事情是清楚的，当然这个阶段带来的大量的原材料，甚至为了采掘这些原材料或者说在这地方形成大规模的农场种植园，于是乎本地原住民被大量地减损之后，没有劳动力，于是乎就得去占领非洲的很多原住民社会，然后把非洲的原住民掳掠到美洲去开矿，去到种植园当捆绑式的劳工，其实就是奴隶。他就大量地从非洲掳掠，那就造成了一个所谓奴隶制三角贸易，从美洲把资源原材料拿到欧洲，为了获得原材料，就大量地从非洲掳掠奴隶运到美洲，这就变成了一个奴隶制的一个殖民主义的原材料的掳掠过程。</p><p>这些原材料掳掠到欧洲，在有些早期的海洋强国，像西班牙，因为它当时是一个天主教是最高权力，所以他用了很多掳掠来的材料，包括黄金白银、贵重的香料、木材等等东西用来装饰教堂，也因此他并没有因大规模的掳掠而进入工业化。后期的你要打败西班牙的无敌舰队，那就得有更为先进的科学技术，有更为能打战的战船，那这后来的强国，比如像英国，为什么他先进入工业化，是因为他得战胜那些已经成为海上霸主的，像早期的”海上马车夫“荷兰、早期的”无敌舰队“西班牙等等，这些它都得比它更先进，于是乎带来了一种刺激，使它有了进入所谓早期工业的激励。</p><p>发生了工业化早期在英国，英国是带有某些工业化进步的这样的强权，所以它就把掳掠来的资料转成了工业生产的原材料，当然它早期进入工业的时候，因为课本上就有”羊吃人“的圈地运动，这些是早期的，但是因为这些课本是西方重新写过的编过的历史，所以它没有特别去强调它是如何在打败了其他海上强国之后，变成了以恶更大规模，所谓”日不落“帝国对全球做原材料的掳掠的这样的国家，用这样的方式，其实是他们完成了资本的原始积累，进入到了工业化，这里面有个重要的对下一个阶段有意义的一个伏笔。</p><p>是什么？就是下一个阶段，资本主义完成了通过殖民主义的全球化来获取大规模的原材料，然后进入可以规模化的工业生产，第二个阶段问世，就是产业资本全球化问世的时候，有一个很重要内在的因素，是什么呢？它叫做国家化的或者”在国化“的产业资本</p><h3 id="产业资本全球化的本质"><a href="#产业资本全球化的本质" class="headerlink" title="产业资本全球化的本质"></a>产业资本全球化的本质</h3><p>大家知道有个概念，今天相对于全球化而言，西方形成了一个概念叫做”在地化“，英文叫”localization“，localization 对应的”全球化“的概念叫 globalization 是全球化，甚至衍生出来的一个新词叫”全球在地化“，英文叫 glocalization ，就是在地化的运动兴起，是对现在这种资本主义的矛盾的一个分析，实际上当产业资本出现它的发展条件的时候，它是在一个国家形成产业资本，对世界上其他国家和地区做原材料的掳掠，因此产业资本阶段就当资本主义进入到产业资本阶段的时候，它有一个很重要的特点叫做”在国化“，我们可以叫做 nationalization 或者叫 statenization，或者叫做 stateism，就是国家主义，往往是这个阶段上奉王命抢掠，比如说英国的上传，就是商创即战船，商人即海盗，奉王命抢掠，到哪个地方商船一靠岸立刻差一个旗子，这就是我女王麾下的土地了，这场就是伴随着它的工业化的过程，这工业化是在本国发展的，这个国家工业形成它的国力，他就强大起来了。所以英国在这个过程中间变成了一个所谓日不落帝国的，对全球完成了殖民化，所以进入到工业化阶段，并不意味着它告别了殖民化，反而是把殖民主义的阶段的很多制度延续到了产业资本阶段的资本主义，这个延续就导致了资本主义就是战争，这个重要论断的基础</p><p>只要是”在国化“的一定是以国家为单位，以整个庞大的产业资本的结构形成工业竞争的实力</p><h2 id="1-2产业资本主义的一般周期性危机"><a href="#1-2产业资本主义的一般周期性危机" class="headerlink" title="1.2产业资本主义的一般周期性危机"></a>1.2产业资本主义的一般周期性危机</h2><p>一、一般周期性危机的本质</p><p>​    在国化”产业资本的局限与危机</p><p>二、一般周期性经济危机的矛盾显化</p><p>​    生产过剩的转移、生产资料的掠夺与热战的爆发</p><p>2.1全球化危机危机下的西方产业转移</p><p>一、西方低端制造业的转移：</p><p>​    劳资矛盾最尖锐的劳动密集型产业开始逐渐向发展中国家转移</p><p>二、接受低端制造业的发展中国家：</p><p>​    接受转移的发展中国家必须具有控制能力</p><p>三、世界进入金融资本主义全球化阶段：</p><p>​    产业转移的发达国家成为债权国，用金融方式占有收益</p><p>2.2 美国冷战策略与金融法西斯主义</p><p>一、美国的冷战策略</p><p>​    西方资本主义向金融资本主导的全球化升级</p><p>二、金融法西斯主义</p><p>​    金融资本对于发展中国家、各种实体经济的空前绝对的排斥</p><p>这节很强</p><p>3.1“老冷战”的起源</p><p>一、老冷战的起源：</p><p>​    “共产”和“自由”世界的两分法不是客观依据，也无法解释现实</p><p>二、冷战话语的非理性：</p><p>​    西方人文社会科学如何为罪恶洗白，包装意识形态为金融法西斯主义服务</p><p>3.2毛泽东“三个世界”理论对冷战的解构</p><p>一、一场伟大的追求独立主权的政治实验</p><p>​    中国在1950年被美国硬脱钩，1960年被苏联硬脱钩</p><p>二、“三个世界”理论的提出</p><p>​    对冷战的地缘政治战略的解构</p><p>4.1美国赢下冷战的历史分析</p><p>一、美国如何赢得冷战</p><p>​    依靠金融资本全球运作在世界上占有足额利润    </p><p>二、80年代后的美国发展</p><p>​    以货币交易推动虚拟市场发展</p><p>三、发展中国家的选择和命运</p><p>​    金融资本主导的全球化条件下，如何全盘接受西方体制</p><p>4.2苏联解体原因——经济非货币化</p><p>一、苏联经济的“非货币化”：</p><p>​    金融资本主导 VS 挑拨物资计划分配</p><p>二、苏联东欧体制解体：</p><p>​    政治主权解体与金融体系的崩溃</p><p>5.1西方崛起的机会——苏联是如何被割韭菜的</p><p>一、苏联如何被割韭菜</p><p>​    西方的硬通货收割了整个苏联东欧体系的实体资产</p><p>二、美国收割了韭菜之后</p><p>​    巨额货币化收益回流推动美国新技术发展</p><p>5.2 上世纪90年代危机与“中国崩溃论”</p><p>一、90年代中国遭遇危机</p><p>​    价格混乱、通货膨胀和生产停滞</p><p>二、“中国崩溃论”出现</p><p>​    中国的“三年大萧条”</p><p>三、从“中国崩溃论”到“中国威胁论”</p><p>​    西方遭遇中国在金融资本问题上的阻击</p><p>6.1国家资本崛起与“中国威胁论”</p><p>一、冷战阶段的结果</p><p>​    苏联东欧产业资本在西方金融资本的竞争中落败</p><p>二、冷战后的中国</p><p>​    依靠有限能力维持基本盘</p><p>三、中国国家资本的再度崛起</p><p>​    以国债投资实现区域发展再平衡</p><p>6.2金融资本全球化的制度霸权</p><p>一、美国的金融资本霸权</p><p>​    通过美元主导世界全球化进程</p><p>二、欧洲不顾美国反对发行欧元</p><p>​    金融资本全球竞争中欧元成为硬通货</p><p>三、金融资本霸权与金融法西斯主义</p><p>​    美元集团和欧元集团的斗争是地域型冲突不断爆发的重要内因</p><p>7.1“新冷战”的意识形态构建</p><p>一、新冷战意识形态构建</p><p>​    中国被强行拉入新冷战意识形态斗争对立面</p><p>二、中国如何应对文明冲突论</p><p>​    客观归纳自身多元性，形成对话基础</p><p>强</p><p>7.2美国金融化的困境</p><p>一、美国金融化的困境</p><p>​    金融资本稳赚不赔，虚拟资本扩张</p><p>二、21世纪美国产业资本转移</p><p>​    美国国内产业资本流失，实体产业衰败</p><p>三、美国面临危机</p><p>​    社会严重撕裂，出现非理性趋势</p><p>8.1产业链全球化背景下的中美贸易</p><p>一、中国成为世界第一工业大国</p><p>​    21时机初的黄金十年增长</p><p>二、从Chimerica到G2</p><p>​    中美之间呈现战略互补关系</p><p>三、新的对抗阶段到来</p><p>​    上一阶段的战略相关形成了思考能力的局限</p><p>8.2难以避免的“新冷战”</p><p>一、美国视图振兴实体产业</p><p>​    金融资本的求助政策没有振兴实体产业，同时引发世界粮食危机</p><p>二、难以避免的“新冷战”</p><p>​    美国为转移国内结构性矛盾将中国拖入“新冷战”</p><p>9.1中美资产债务解构对比分析</p><p>一、2008金融危机后世界对美元信心下降</p><p>​    各国视图找出不受美元霸权资本控制的发展道路</p><p>二、中美资产债务对比</p><p>​    中国的综合性组合投资，比西方单一投资更有竞争能力</p><p>9.2中国制度差异及金融开放</p><p>一、中美金融制度的差异</p><p>​    中国金融制度的最大区别在于党的领导</p><p>二、中国金融化进程</p><p>​    以金融为杠杆，撬动资源性资产转化为可交易的实体资产</p><p>10.1中国“新冷战”应对之策（一）</p><p>一、西部开发、东北振兴、中部崛起</p><p>​    以国家能力组织投资拉动增长，实现区域再平衡</p><p>二、从新农村建设到乡村振兴</p><p>​    “三农”投资是中国应对全球化挑战的压舱石</p><p>10.2中国“新冷战”应对之策（二）</p><p>一、中国如何应对生产过剩</p><p>​    结合国内国际形势灵活运用“经济增长三架马车”拉动国内投资与消费</p><p>二、中国如何应对全球需求长期低迷</p><p>​    新农村建设转为乡村振兴发展战略</p><p>三、绿水青山就是金山银山</p><p>​    以国内大循环为主体，完成生态经济价值化</p><p>习总书记就再2018年的年初开始强调：财政金融一切优惠政策向三农倾斜</p>]]></content>
      
      
      <categories>
          
          <category> 有知有行 </category>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 温铁军 </tag>
            
            <tag> 冷战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神人操作符：可选链与空值合并</title>
      <link href="/2022/03/18/2022-03-18-%E7%A5%9E%E4%BA%BA%E6%93%8D%E4%BD%9C%E7%AC%A6%EF%BC%9A%E5%8F%AF%E9%80%89%E9%93%BE%E4%B8%8E%E7%A9%BA%E5%80%BC%E5%90%88%E5%B9%B6/"/>
      <url>/2022/03/18/2022-03-18-%E7%A5%9E%E4%BA%BA%E6%93%8D%E4%BD%9C%E7%AC%A6%EF%BC%9A%E5%8F%AF%E9%80%89%E9%93%BE%E4%B8%8E%E7%A9%BA%E5%80%BC%E5%90%88%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[<p>分享两个工作中常用的操作符：可选连和空值合并</p><h2 id="操作符"><a href="#操作符" class="headerlink" title="?. 操作符"></a>?. 操作符</h2><p>中文翻译为 <strong>可选链操作符</strong> ，允许开发者读取深嵌在对象链中的属性值，而不必显示验证每个引用。当引用为空时，表达式停止计算并返回一个未定义的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> johan = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;johan&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">28</span>,</span><br><span class="line">    <span class="attr">lover</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;masami&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">34</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有 ?. 操作符之前</span></span><br><span class="line"><span class="keyword">const</span> johanLover = johan.<span class="property">lover</span> &amp;&amp; johan.<span class="property">lover</span>.<span class="property">name</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(johanLover)</span><br><span class="line"><span class="comment">// 使用 ?. 操作符</span></span><br><span class="line"><span class="keyword">const</span> johanLover = johan.<span class="property">lover</span>?.<span class="property">name</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(johanLover) <span class="comment">// masami</span></span><br><span class="line"><span class="comment">// 如果没有值则返回 undefined</span></span><br><span class="line"><span class="keyword">const</span> johanLover = johan.<span class="property">lover</span>?.<span class="property">sex</span> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sex) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h2 id="操作符-1"><a href="#操作符-1" class="headerlink" title="?? 操作符"></a>?? 操作符</h2><p>另一个会用的是<strong>空值合并</strong> ?? </p><p>控制合并可以真正的检查 nullish 值，而不是 falsely 值。什么是 nullish 值，什么又是 falsely 值？</p><p>falsely 值：空字符串、数字0、undefined、null、false、NaN 等</p><p>然后，很多情况下你指向检测一个变量是否为空值——undefined 或者 null，就像变量可以是一个空字符串甚至是一个假值</p><p><img src="https://s2.loli.net/2022/03/18/ijZELsTc6gr2VxF.jpg" alt="640"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://mp.weixin.qq.com/s/LhGb9EWXMgAQSU5kpy89Tg">ES2020中Javascript 10个你应该知道的新功能</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzA5MjQ0Mjk2NA==&mid=2247487118&idx=1&sn=37327a42056ec7a796c1097141cbcaa0&chksm=906c56b5a71bdfa32ccfffcc3653dc5ee48b5a4adbcafce36699d06002b2b3f907696144cbd3&scene=126&sessionid=1608428950&key=29495e6e9fe7db130b74fadeaf45948da71b2011e8b37ca2f3bbdca434dce6a383ebb95f649f4f396ceaf22853093628e43bf0e1256977ccea46183dcd04911f273fed6d8d37985ab4ea0b28945316eb112ea18c982f6778bd76a3ec63dfa18fd9a1f801c27dc9480cd5c9f30522c980fe3d210702241310621574566eb446e5&ascene=1&uin=MTA0NTY0NDM2MQ==&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=Ac+jGAQtC+c7kBYBfRsVZfo=&pass_ticket=BuslW61wmjwXHbyZnOzcZosIyF1kvQtIsmDHm0QOjP9k8UgLgisKL5Bj6FCKVX+Q&wx_header=0">4个未听说过的强大JavaScript操作符</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise面试题思考延伸</title>
      <link href="/2022/03/08/2022-03-08-Promise%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%9D%E8%80%83%E5%BB%B6%E4%BC%B8/"/>
      <url>/2022/03/08/2022-03-08-Promise%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%9D%E8%80%83%E5%BB%B6%E4%BC%B8/</url>
      
        <content type="html"><![CDATA[<p>最近想起之前在V2EX上看到的一个问题：<a href="https://www.v2ex.com/t/810025">一个 async function 数组， 怎样一个一个顺序执行？</a></p><blockquote><p>想做到的是，每过一秒，分别打印:<br><code>this is 0</code><br><code>this is 1</code><br><code>this is 2</code><br>~<br><code>this is 8</code></p><p>下面的代码结果是过一秒后全部执行。</p><p>是不是哪里写的不对呢，多谢指教</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jobs = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">    jobs.<span class="title function_">push</span>(<span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;this is &quot;</span> + i)</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> job <span class="keyword">of</span> jobs) &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">job</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></blockquote><p>这题考察对 Promise 、async/await 的理解。而这题又能让人联想到一个类似的setTimeout 循环问题——<a href="https://zhuanlan.zhihu.com/p/25855075">破解前端面试（80% 应聘者不及格系列）：从 闭包说起</a></p><blockquote><p>请问以下代码打印出什么数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>, i);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>, i);</span><br></pre></td></tr></table></figure><p>如何修改成每隔1秒打印一个数，以0、1、2、3、4、5 的顺序排列，并要求原有的代码块中的循环和两处 console.log 不变，该怎么改造代码？</p></blockquote><p>此题面试官想考察循环、闭包、闭包的解决（IIFE）、ES6 知识点（let、Promise）、ES7 的Async/await，以及setTimeout  的第三个参数等等知识点，具体看文章能明白一二</p><p>这里我们讲第一道题目，如果要实现题主所说的效果，缺少了什么？</p><p>已知：let形成块级作用域，意味着每次循环，jobs就 push 一个 async 函数，这些都是同步执行</p><p>但是注意，async 中的函数也是同步执行，只有等到 await 时才会进入微任务中，所以当</p><ul><li>i=0时，jobs 塞入一个 setTimeout(function() { console.log(“this is 0” )})</li><li>i=1时，jobs 塞入一个 setTimeout(function() { console.log(“this is 1” )})</li><li>i=2时，jobs 塞入一个 setTimeout(function() { console.log(“this is 2” )})</li><li>i=3时，jobs 塞入一个 setTimeout(function() { console.log(“this is 3” )})</li><li>…</li><li>i=7时，jobs 塞入一个 setTimeout(function() { console.log(“this is 7” )})</li></ul><p>继续往下执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> job <span class="keyword">of</span> jobs) &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">job</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>这里题主了解到 await 需要 async 配合使用，就写了立即执行匿名函数，执行数组 jobs，但问题是 jobs 中的每个子项都是执行 <code>async function()&#123;setTimeout&#125;</code>，这里的 async 有意义吗？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jobs.<span class="title function_">push</span>(<span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;this is &quot;</span> + i)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果要让 await 暂停进程并恢复进程（即<code>await job()</code>），我们需要的是什么？</p><p>去掉 async，使其变成一个普通的函数，结果执行结果一致</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jobs.<span class="title function_">push</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;this is &quot;</span> + i)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>同样，将普通函数改成箭头函数也是如此，一秒之后打印还是0~7</p><p>根据<a href="https://blog.csdn.net/qq_38990451/article/details/114869256">网友</a>总结：</p><ol><li>对于 promise 对象，await 会阻塞函数执行，等待 promise 的 resolve 返回值，作为 await 的结果，然后再执行下一个表达式</li><li>对于非 promise 对象，比如 箭头函数、同步表达式等等，await 等待函数或者直接量的返回，而不是等待其执行结果</li></ol><p>所以如果要让 await 每隔1秒执行一个 job，那就需<strong>返回一个 promise 实例</strong>，基于此逻辑进行改造</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">jobs.<span class="title function_">push</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>()</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;this is &quot;</span> + i)</span><br><span class="line">    &#125;, <span class="number">1000</span>)  </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这样，就解决了这个问题</p><p>我们的逻辑是在循环中，每次向 jobs 中塞入一个函数，这个函数返回的是一个实例 Promise（即 await 遇到后会暂停等异步结束再继续后续代码）。当执行 <code>await job()</code> 时，我们知道是循环 jobs，await 让其等待执行，执行完第一个后，再执行第二个，循序执行，每一个等待1秒钟，就达到题目的要求</p><p>这里我们了解到 await 等待的是一个 promise 实例（如果非 promise 实例，就不用等待），既然说到 Promise，我们就延伸一下，then 的链式调用</p><p>Promise 的 then 方法支持链式调用，它有哪几种情况？</p><ul><li>不 return（返回）值， 值延续上一个 resolved</li><li>return<ul><li>return 非 Promise 实例</li><li>return Promise 实例</li></ul></li></ul><h3 id="不-return"><a href="#不-return" class="headerlink" title="不 return"></a>不 return</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;johan&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    <span class="comment">// 不返回任何值</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第二次&#x27;</span>, data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><details>  <summary>点击展开答案</summary>  <p>johan</p>  <p>第二次 undefined</p></details><h3 id="return-非-Promise-实例"><a href="#return-非-Promise-实例" class="headerlink" title="return 非 Promise 实例"></a>return 非 Promise 实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;johan&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;帝王johan&#x27;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第二次&#x27;</span>, data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><details>  <summary>点击展开答案</summary>  <p>johan</p>  <p>第二次 帝王johan</p></details><h3 id="return-Promise-实例"><a href="#return-Promise-实例" class="headerlink" title="return Promise 实例"></a>return Promise 实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;johan&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">`<span class="subst">$&#123;data&#125;</span> next`</span>)</span><br><span class="line">        &#125;, <span class="number">4000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第二次&#x27;</span>, data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><details>  <summary>点击展开答案</summary>  <p>johan</p>  <p>第二次 johan next</p></details><p>以上三个例子可以得知，在 then 方法中的  onfulfilled 函数和 onrejected 函数，不仅支持不返回，而且支持非 Promise 实例的普通值，而且支持一个 Promise 实例。并且返回的这个 Promise 实例或非 Promise 实例的普通值将会传给下一个 then 方法的 onfulfilled 函数或者 onrejected 函数中</p><p>因为我们知道它是 <a href="https://es6.ruanyifeng.com/?search=async&x=0&y=0#docs/async">Generator 函数的语法糖</a>，<strong>async 函数返回的是一个 Promise 对象</strong>，当函数执行时，一旦遇到 await 就会先返回，等到异步操作完成，再接着执行函数体内后面的语句</p><p>我们来一道题来测试一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">myPromise</span> = val =&gt; <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(val);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">delay</span> = duration =&gt; &#123; <span class="comment">/**/</span> &#125;;</span><br><span class="line"><span class="title function_">myPromise</span>(<span class="string">`hello`</span>).<span class="title function_">then</span>(<span class="title function_">delay</span>(<span class="number">1000</span>)).<span class="title function_">then</span>(<span class="function"><span class="params">val</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(val)); <span class="comment">// hello</span></span><br></pre></td></tr></table></figure><p>myPromise 是个 Promise 实例，传入值 hello，经过 Promise.resolve 传到then 中，然后经 delay 再传递给下一个 then，打印出val，所以 delay(1000) 会返回一个 Promise 实例，这样，第二个 then 才能打印出 hello</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">delay</span> = duration =&gt; <span class="function">(<span class="params">val</span>) =&gt;</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(val)</span><br><span class="line">    &#125;, duration)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Promise </tag>
            
            <tag> async </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文概述：从状态复用到Hooks</title>
      <link href="/2022/03/04/2022-03-04-%E4%BB%8E%E7%8A%B6%E6%80%81%E5%A4%8D%E7%94%A8%E5%88%B0Hooks/"/>
      <url>/2022/03/04/2022-03-04-%E4%BB%8E%E7%8A%B6%E6%80%81%E5%A4%8D%E7%94%A8%E5%88%B0Hooks/</url>
      
        <content type="html"><![CDATA[<blockquote><p>学习一项知识，必须问自己三个重要问题：1. 它的本质是什么。2. 它的第一原则是什么。3. 它的知识结构是怎样的</p></blockquote><h2 id="测试一下-Hooks-的熟练程度"><a href="#测试一下-Hooks-的熟练程度" class="headerlink" title="测试一下 Hooks 的熟练程度"></a>测试一下 Hooks 的熟练程度</h2><p>为什么不能在 for 循环、if 语句里使用 Hooks</p><p>React.memo、React.useCallback、React.usememo 的作用，以及对比</p><p>useState 中的值是个对象，改变对象中的值，组件会渲染吗？如果用 React.memo() 包裹住呢</p><p>Hooks 的（实现）原理是什么？</p><p>Hooks 的本质是什么？为什么？</p><p>React Hooks，它带来了哪些便利？</p><p>React Hooks 当中的 useEffect 是如何区分生命周期钩子的</p><p>useEffect(fn, []) 和 componentDidMount 有什么差异</p><hr><p>回答得如何？在了解一个概念前，疑惑越多，理解就越深</p><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>React Hooks 是  React 16.8 推出的新特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性</p><h2 id="为什么会有-Hooks"><a href="#为什么会有-Hooks" class="headerlink" title="为什么会有 Hooks"></a>为什么会有 Hooks</h2><p>我们一定要有个概念，即 React 的本质是什么？它的特征是 UI=f(data)、一切皆组件、声明式编程。那么，既然是 UI=f(data)，data（数据）通过 function 来驱动 UI 视图变化。在业务中，你不能简单只展示，也需交互，交互就会更新状态，React 是通过 setState 来改变状态。但这仅限于类组件，所以在Hooks出现之前，函数式组件用来渲染组件（也称它为木偶组件），类组件用来控制状态</p><p>而后，为了让状态能更好的复用，提出了<a href="https://zh-hans.reactjs.org/docs/react-without-es6.html#mixins">Mixins</a> 、<a href="https://zh-hans.reactjs.org/docs/render-props.html">render props</a> 和 <a href="https://zh-hans.reactjs.org/docs/higher-order-components.html">高阶组件</a>。诚然，render props、高阶组件能虽然能解决，但是会带来副作用——组件会形成“嵌套地狱”</p><p>以及类组件本身的生命周期会使得复杂的组件变得难以理解、class 语法的学习成本等等，构成了React 团队提出 hooks——让函数式组件拥有状态管理</p><p><a href="https://zh-hans.reactjs.org/docs/hooks-intro.html#motivation">官网</a>也阐述过设计Hooks的三大动机：</p><blockquote><ol><li>在组件之间复用状态逻辑很难</li><li>复杂组件变得难以理解</li><li>难以理解的 class</li></ol></blockquote><h2 id="状态复用的实验"><a href="#状态复用的实验" class="headerlink" title="状态复用的实验"></a>状态复用的实验</h2><h3 id="Mixins时代"><a href="#Mixins时代" class="headerlink" title="Mixins时代"></a>Mixins时代</h3><p>在笔者尚未使用 React 之前就存在，现已被淘汰</p><blockquote><p>Mixins（混入）是一种通过扩展收集功能的方式，它本质上是将一个对象的属性拷贝到另一个对象上，不过你可以拷贝任意多个对象的任意个方法到一个新对象上去，这是继承所不能实现的。它的出现主要就是为了解决代码复用问题</p></blockquote><p>这里不对其做分析，React官方文档在 <a href="https://zh-hans.reactjs.org/blog/2016/07/13/mixins-considered-harmful.html">Mixins Considered Harmful</a> 一文中提到了 Mixins 带来的危害：</p><ul><li>Mixins 可能会相互依赖，相互耦合，不利于代码维护</li><li>不同的 Mixins 中的方法可能会相互冲突</li><li>Mixins 非常多时，组件是可以感知到的，甚至还要为其做相关处理，这样会给代码造成滚雪球的复杂性</li></ul><h3 id="Render-Props"><a href="#Render-Props" class="headerlink" title="Render Props"></a>Render Props</h3><p>指一种在 React 组件之间使用一个值为函数的 prop 共享代码的简单技术</p><p>具有 render prop 的组件接受一个返回 React 元素的函数，并在组件内部通过调用此函数来实现自己的渲染逻辑</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">DataProvider</span> render=&#123;<span class="function"><span class="params">data</span>=&gt;</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;data.target&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">)&#125;&gt;</span><br></pre></td></tr></table></figure><p>具体可在<a href="https://zh-hans.reactjs.org/docs/render-props.html">官网</a>了解</p><h3 id="HOC（高阶组件）"><a href="#HOC（高阶组件）" class="headerlink" title="HOC（高阶组件）"></a>HOC（高阶组件）</h3><p>HOC的原理其实很简单，它就是一个函数，并且它接受一个组件作为参数，并返回一个新的组件，把复用的地方放在高阶组件中，你在使用的时候，只需要做不同用处</p><p>打个比方：就好像给你一瓶水，你在渴的时候就会喝它；你在耍帅的时候拿它摆POSE；你在别人需要的时候给他喝帮助人…</p><p>Writing is cheap. Show me code</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function Wrapper(WrappedComponent) &#123;</span><br><span class="line">    return class extends React.Component &#123;</span><br><span class="line">        componentDidMount() &#123;</span><br><span class="line">            console.log(&#x27;我是一瓶水&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">        render() &#123;</span><br><span class="line">            return (</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;div className=&quot;title&quot;&gt;&#123;this.props.title&#125;&lt;/div&gt;</span><br><span class="line">                    &lt;WrappedComponent &#123;...this.props&#125; /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import &quot;./styles.css&quot;;</span><br><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import Wrapper from &quot;./Wrapper&quot;;</span><br><span class="line"></span><br><span class="line">class A extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;div&gt;喝它&lt;/div&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;div&gt;耍帅摆POSE&lt;/div&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class C extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;div&gt;帮助别人&lt;/div&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const AA = Wrapper(A);</span><br><span class="line">const BB = Wrapper(B);</span><br><span class="line">const CC = Wrapper(C);</span><br><span class="line"></span><br><span class="line">export default function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className=&quot;App&quot;&gt;</span><br><span class="line">      &lt;h1&gt;Hello CodeSandbox&lt;/h1&gt;</span><br><span class="line">      &lt;h2&gt;Start editing to see some magic happen!&lt;/h2&gt;</span><br><span class="line">      &lt;AA title=&quot;我是普通人&quot; /&gt;</span><br><span class="line">      &lt;BB /&gt;</span><br><span class="line">      &lt;CC /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样就很明显的看出 HOC 的好处，”一瓶水“是共同代码，A、B、C处理业务代码，然后将A、B、C传入HOC（一瓶水）中，返回了一个新的组件 AA、BB、CC。相同的代码得到了公用</p><p><img src="https://i.loli.net/2021/09/17/q7vQpZwIngNc3C2.png" alt="HOC-demo"></p><p>各位可以前往这里查看 <a href="https://codesandbox.io/s/hoc-demo-d9p9j?file=/src/App.js:0-629">demo</a></p><p>HOC 的用处不单单是代码复用，还可以做权限控制、打印日志等。但它的缺陷也没明显，当大量使用 HOC 后，会产生大量的嵌套，使得嵌套变得困难；并且 HOC 会劫持 props，在不遵守约定的情况下可能会造成冲突</p><p>总结下 HOC：</p><ul><li>用法：创建一个函数，该函数接收一个组件作为输入，除了组件还可以传递其他的参数，基于该组件返回一个不同的组件</li><li>优点：代码复用，逻辑复用</li><li>缺点：因为嵌套使得调试难度变高；会劫持props，或许造成冲突</li></ul><h2 id="Hooks-的出世"><a href="#Hooks-的出世" class="headerlink" title="Hooks 的出世"></a>Hooks 的出世</h2><p>前有状态复用的不给力（ Mixins 被淘汰，render props、HOC 的副作用又大），后有类组件的复杂组件难以理解、维护（过多的生命周期），class 属性造成的 this 指向又麻烦。于是乎，Hooks 大喊一声：我来也</p><p>它起码有三个好处</p><ul><li>逻辑复用<ul><li>秒杀render props、hoc</li></ul></li><li>业务代码更聚合<ul><li>秒杀类组件</li></ul></li><li>写法简洁<ul><li>秒杀类组件</li></ul></li></ul><h2 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h2><p>作用：让函数组件具有维持状态的能力，替代类组件的constructor初始化状态</p><p>例子：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Counter</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count+1)&#125;&gt;&#123;count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：逻辑复用</p><p>在使用 useState 时，会出现两个衍生问题：</p><h3 id="一：Capture-Value-特性"><a href="#一：Capture-Value-特性" class="headerlink" title="一：Capture Value 特性"></a>一：Capture Value 特性</h3><p>在<a href="https://blog.azhubaby.com/2022/03/01/2022-03-01-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6%E4%B8%8E%E7%B1%BB%E7%BB%84%E4%BB%B6%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C/">函数式组件与类组件有何不同</a>中曾介绍过，<strong>函数式组件能捕获渲染时所用的值</strong>。并举例组件中点三下加， setTimeout 3秒后弹出数字，在点两次加，3秒后展示3，而不是5。而类组件却能获得最新的数据，这是为什么？</p><p>因为函数式组件有 Capture Value 的特性。而从源码的角度看，每次调用 setXX 会引发 re-render 从而重渲染组件</p><p>如果想获得最新值，可以通过 useRef 来将值保存在内存中</p><h3 id="二：useState-中的值是个对象，改变对象中的值，组件会渲染吗？怎么优化？"><a href="#二：useState-中的值是个对象，改变对象中的值，组件会渲染吗？怎么优化？" class="headerlink" title="二：useState 中的值是个对象，改变对象中的值，组件会渲染吗？怎么优化？"></a>二：useState 中的值是个对象，改变对象中的值，组件会渲染吗？怎么优化？</h3><p>一般我们用 useState 尽量遵守单一值，但难免会遇到一些特殊情况，如果值是个对象，改变对象中的其中一个属性，其他属性不变，那么引用其他属性的组件是否会渲染呢？</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">DemoSon</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;render&quot;</span>, props);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Demo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>(&#123; <span class="attr">foo</span>: &#123; <span class="attr">name</span>: <span class="string">&quot;johan&quot;</span>, <span class="attr">bar</span>: &#123; <span class="attr">baz</span>: <span class="number">1</span> &#125; &#125; &#125;);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setData</span>(&#123;</span><br><span class="line">      ...data,</span><br><span class="line">      <span class="attr">foo</span>: &#123;</span><br><span class="line">        ...data.<span class="property">foo</span>,</span><br><span class="line">        <span class="attr">bar</span>: &#123;</span><br><span class="line">          <span class="attr">baz</span>: <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;data.foo.bar.baz&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">DemoSon</span> <span class="attr">name</span>=<span class="string">&#123;data.foo.name&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>点击 div，修改 baz 的值，DemoSon 是否会渲染呢？答案是会的，为什么会渲染？因为你的引用值发生了变化，生成了新的虚拟DOM，渲染到视图上时，子组件就会渲染。如何优化，让数据不变的组件不重复渲染？我觉得有两种方式，一拆分 data，拆分成 foo 对象和name，因为 setData 并不改变 name，所以DemoSon 不会渲染，还有一种是通过 memo 包裹住 DemoSon，因为 memo 能避免重新渲染</p><p>可查看线上 <a href="https://codesandbox.io/s/usestateyin-ru-dui-xiang-98sxiw?file=/src/Demo.js">demo</a></p><h2 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h2><p>作用：处理副作用，替代类组件的componentDidMount、componentDidUpdate、componentWillUnmount</p><p>使用方式：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有第二个参数</span></span><br><span class="line"><span class="comment">// mount 阶段和 update 阶段都执行</span></span><br><span class="line"><span class="title function_">useEffect</span>(fn)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个参数为空数组</span></span><br><span class="line"><span class="comment">// 当 mount 阶段会执行</span></span><br><span class="line"><span class="title function_">useEffect</span>(fn,[])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个参数为依赖项</span></span><br><span class="line"><span class="comment">// 当依赖项（deps）数据更新时会执行</span></span><br><span class="line"><span class="title function_">useEffect</span>(fn, [deps])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除副作用 </span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> subscription = props.<span class="property">source</span>.<span class="title function_">subscribe</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 清除订阅</span></span><br><span class="line">    subscription.<span class="title function_">unsubscribe</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>PS：以上注释中的 mount 阶段，即组件加载时；update 指数据（包括props、state）变化时</p></blockquote><p>在使用 useEffect 时，会面临几个问题：</p><h3 id="1-useEffect-fn-和-componentDidMount-有什么区别？"><a href="#1-useEffect-fn-和-componentDidMount-有什么区别？" class="headerlink" title="1. useEffect(fn, []) 和 componentDidMount 有什么区别？"></a>1. useEffect(fn, []) 和 componentDidMount 有什么区别？</h3><p>虽然 useEffect(fn, [])  和 componentDidMount  都可以表示组件加载时执行，但从细节上两者有所不同。要谈起细节需从源码中聊起，具体可看 React 源码魔术师卡颂的这篇——<a href="https://mp.weixin.qq.com/s?__biz=MzkzMjIxNTcyMA==&mid=2247485312&idx=1&sn=c55814b0e864dce6133b8f0a8f4e8d65&source=41#wechat_redirect">useEffect(fn, [])和cDM有什么区别？</a> 了解，这里我讲下我的理解</p><p>源码中把虚拟DOM和虚拟DOM渲染到真实DOM分为两个阶段。虚拟DOM存在内存中，在 JSX 中对数据增删改，虚拟DOM会对对应的数据打上标签，这个阶段称为 render 阶段；把虚拟DOM映射到真实DOM的操作被称为 commit 阶段，它负责把这些标签转换为具体的DOM操作</p><p>在 render 阶段</p><ul><li>插入 DOM 元素被打上 Placement 标签；</li><li>更新 DOM 元素被打上 Update 标签；</li><li>删除 DOM 元素被打上 Deletion 标签；</li><li>更新 Ref 属性被打上 Ref 标签</li><li>useEffect 回调被打上 Passive 标签</li></ul><p>而 commit 阶段分为三个子阶段</p><ul><li>渲染视图前（before mutation 阶段）</li><li>渲染视图时（mutation 阶段）</li><li>渲染视图后（layout 阶段）</li></ul><p>被打上 Placement 标签的，会在 mutation 阶段时执行对应的 appendChild 操作，意味着 DOM 节点被插入到视图中，接着在 layout 阶段调用 componentDidMount </p><p>而被打上 Passive 标签的，它会在 commit 阶段的三个子阶段执行完成后再异步调用 useEffect 的回调函数</p><p>由此可见，它们的调用<strong>调用时机</strong>是不同的，useEffect(fn,[]) 是在 commit 阶段执行完以后异步调用回调函数，而 componentDidMount 会在 commit 阶段完成视图更新（mutation阶段）后再 layout 阶段同步调用</p><blockquote><p>hooks 中也有一个和 componentDidMount 调用时机相同的 hooks——useLayoutEffect</p></blockquote><p>其次useEffect(fn, []) 会捕获 props 和state，而 componentDidMount 并不会。使用 useEffect(fn, []) 的会第哦啊函数会拿到初始的 props 和 state，这个道理和 capture value 是一个道理</p><p>总结：两点不同，一、执行时机不同；二、useEffect(fn, []) 会对 props 和 state 进行捕获</p><blockquote><p>下文会用demo说明 capture value 特性</p></blockquote><h3 id="2-每一次渲染都有它自己的-props-和-state"><a href="#2-每一次渲染都有它自己的-props-和-state" class="headerlink" title="2. 每一次渲染都有它自己的 props 和 state"></a>2. 每一次渲染都有它自己的 props 和 state</h3><p>先讨论一下渲染（rendering），我们来看一个计数器组件 Counter</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>点击 &#123;count&#125; 次<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        点击</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一次渲染时，count 的初始值从 useState(0) 中获取。当调用 setCount(count + 1) ，React 重新渲染组件，此时 count 的值就成 1。如下所示：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Mount 第一次渲染</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="number">0</span>; <span class="comment">// 默认从useState 中获得</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>点击 &#123;count&#125; 次<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update 点击 1 次</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="number">1</span>; <span class="comment">// 通过 setCount 修改 count</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>点击 &#123;count&#125; 次<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update 点击 2 次</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="number">2</span>; <span class="comment">//  通过 setCount 修改 count</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>点击 &#123;count&#125; 次<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每当我们更新状态时，React 会重新渲染组件。每次渲染获得此刻（快照）的 count 状态</p><p>而在类组件中并不是捕获值</p><p>举个例子：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClassDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span> &#125;);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是Class Component, &#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>页面上的 count 会每隔一秒钟加1，而换成函数式组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">FunctionDemo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(id);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>我是Function Component, &#123;count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>永远是1</p><p>这就是 hooks 的capture value，类似例子在<a href="https://blog.azhubaby.com/2022/03/01/2022-03-01-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6%E4%B8%8E%E7%B1%BB%E7%BB%84%E4%BB%B6%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C/">函数式组件与类组件有何不同</a>介绍过</p><p>可前往<a href="https://codesandbox.io/s/weathered-water-6yfdtf?file=/src/ClassDemo.js:175-266">线上demo</a>查看</p><h2 id="useLayoutEffect"><a href="#useLayoutEffect" class="headerlink" title="useLayoutEffect"></a>useLayoutEffect</h2><p>作用：同步执行副作用</p><p>大部分情况下，使用 useEffect 就可以帮我们处理副作用，但是如果想要同步调用一些副作用，比如对 DOM 的操作，就需要使用 useLayoutEffect，useLayoutEffect 中的副作用会在 DOM 更新之后同步执行</p><p>与类组件中的 componentDidMount 效果一致，都是在 commit 阶段完成视图更新（mutation阶段）后在 layout阶段同步调用</p><h2 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h2><p>作用：记忆函数，避免函数重新生成。在函数传递给子组件时，可以避免子组件重复渲染</p><p>例子：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> memoizedCallback = <span class="title function_">useCallback</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">doSomething</span>(a, b);</span><br><span class="line">  &#125;,</span><br><span class="line">  [a, b],</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>可缓存的引用</p><p>在类组件中常困扰人的是 this 绑定问题</p><ol><li> render 方法中使用bind</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this &gt; &#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick.bind(this)&#125;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>render方法中使用箭头函数</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this &gt; &#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;e</span> =&gt;</span> this.handleClick(e)&#125;&gt;test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>构造函数中bind</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">handleClick</span> = <span class="variable language_">this</span>.<span class="property">handleClick</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this &gt; &#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.在定义阶段使用箭头函数绑定</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this &gt; &#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前三种都会因 App 组件的props或state 变化而重新触发渲染，使其渲染新的handleClick。第四种将handleClick抽离出赋值为变量，通过 this 指向存储函数，起到了缓存作用</p><p>而函数式组件一定会渲染</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Click&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是 useCallback 能缓存函数，让它”记住“</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> handleClick = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Click&#x27;</span>);</span><br><span class="line">    &#125;, [])</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">     <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Demo</span> <span class="attr">handleClick</span>=<span class="string">&#123;handleClick&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>但使用 useCallback 必须使用 shouldComponentUpdate 或者 React.memo 来忽略同样的参数重复渲染</strong></p><p>所以单独使用 useCallback 是不能的，它需要和 React.memo 配合</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;props.handleClick&#125;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MemoDemo</span> = <span class="title function_">memo</span>(<span class="title class_">Demo</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> handleClick = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Click&#x27;</span>);</span><br><span class="line">    &#125;, [])</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">     <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Demo</span> <span class="attr">handleClick</span>=<span class="string">&#123;handleClick&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是 useCallback 会使代码可读性变差，所以尽量不用 useCallback</p><p>不用 useCallback ，那怎么提高性能呢？</p><h2 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h2><p>作用：记忆组件。替代类组件的shouldComponentUpdate</p><p>useCallback 的功能完全可以由 useMemo 所取代，如果你想通过 useMemo 返回一个记忆函数也是完全可以的</p><p><code>useCallback(fn, deps)</code> 相当于 <code>useMemo(() =&gt; fn, deps)</code></p><p>例子：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> memoizedValue = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> <span class="title function_">computeExpensiveValue</span>(a, b), [a, b]);</span><br></pre></td></tr></table></figure><p>默认情况下，如果 React 父组件重新渲染，它包含的所有子组件都会重新渲染，即使子组件没有任何变化</p><p>useMemo 和 useCallback 接受的参数都是一样，都是在其依赖项发生变化后执行，都是返回缓存的值，区别在于 useMemo 返回的是函数运行的结果，useCallback 返回的是函数</p><p>useMemo 返回的是一个值，用于避免在每次渲染时都进行高开销的计算</p><h4 id="useCallback-VS-useMemo"><a href="#useCallback-VS-useMemo" class="headerlink" title="useCallback VS useMemo"></a>useCallback VS useMemo</h4><p>相同点：useCallback 和 useMemo 都是性能优化的手段，类似于类组件的 shouldComponentUpdate，在子组件中使用 shouldComponentUpdate，判断该组件的 props 和 state 有没有变化，从而避免每次父组件 render 时重新渲染子组件</p><p>区别：useCallback 和 useMemo 的区别是 useCallback 返回一个函数，当把它返回的这个函数作为子组件使用时，可以避免每次父组件更新时重新渲染这个子组件</p><h2 id="memo"><a href="#memo" class="headerlink" title="memo"></a>memo</h2><p>作用：避免重新渲染</p><p>只有当 props 改变时会重新渲染子组件</p><p>被 memo 包裹住后，当 props 不变时，子组件就不会渲染</p><p>React.memo() 方法可以防止子组件不必要渲染，从而提供组件性能。</p><p>关于性能优化 Dan 曾写过一篇文章：<a href="https://overreacted.io/zh-hans/before-you-memo/">在你写memo()之前</a>，其实在我们使用 useCallback、useMemo、memo前不妨试试 state 下移和内容提升。目的就是让不用渲染的组件不重复渲染</p><h2 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h2><p>作用：</p><p>保存引用值，跟 createRef 类似。我们习惯用 ref 保存 DOM</p><p>使用 useRef 保存和更新一些数据是有一定好处的，<strong>它可以不通过内存来保存数据</strong>，使得这些数据再重渲染时不会被清除掉</p><p>它不仅仅是用来管理DOM ref 的，它还相当于 this，可以存放任何变量，很好的解决闭包带来的不方便性</p><p>如果我们想利用普通的变量再重渲染过程中追踪数据变化是不可行的，因为每次组件渲染时它都会被重新初始化。然而，如果使用 ref 的话，其中的数据能在每次组件渲染时保持不变。</p><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [count, setCount] = useState&lt;number&gt;(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> countRef = useRef&lt;number&gt;(count)</span><br></pre></td></tr></table></figure><p>在<a href="https://blog.azhubaby.com/2022/03/01/2022-03-01-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6%E4%B8%8E%E7%B1%BB%E7%BB%84%E4%BB%B6%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C/">函数式组件与类组件有何不同</a>介绍过使用方法</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>useContext：减少组件层级</p><p>useReducer： 类 redux 的方法，useState 是基于它扩张的</p><p>ForwardRef：转发 ref</p><p>useImperativeHandle ：透传 Ref，父组件获取子组件内的方法</p><h2 id="自定义-Hooks"><a href="#自定义-Hooks" class="headerlink" title="自定义 Hooks"></a>自定义 Hooks</h2><p>由于 useState 和 useEffect 是函数调用，因为我们可以将其组合成自己的 Hooks</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyResponsiveComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> width = <span class="title function_">useWindowWidth</span>();</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span> Window width is &#123;width&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useWindowWidth</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [width, setWidth] = <span class="title function_">useState</span>(<span class="variable language_">window</span>,innerWidth);</span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">handleResize</span> = (<span class="params"></span>) =&gt; <span class="title function_">setWidth</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>)</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, handleResize)</span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, handleResize)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> width;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义 Hooks 让不同的组件共享可重用的状态逻辑。注意状态本身是不共享的。每次调用 Hook 都只声明了其自身的独立状态</p><h2 id="React-Hooks的不足"><a href="#React-Hooks的不足" class="headerlink" title="React Hooks的不足"></a>React Hooks的不足</h2><p>虽然实现了大多数类组件的功能，但是还无法实现 getSnapshotBeforeUpdate 和 componentDidCatch 这两个 API</p><h2 id="附录：使用规则"><a href="#附录：使用规则" class="headerlink" title="附录：使用规则"></a>附录：使用规则</h2><p>Hooks 的本质就是 JavaScript 函数，在使用它时需要遵守<a href="https://zh-hans.reactjs.org/docs/hooks-rules.html">两条规则</a></p><blockquote><h4 id="只在最顶层使用-Hook"><a href="#只在最顶层使用-Hook" class="headerlink" title="只在最顶层使用 Hook"></a>只在最顶层使用 Hook</h4><p><strong>不要在循环，条件或嵌套函数中调用 Hook</strong>，确保总是在你的 React 函数的最顶层以及任何 return 之前调用他们。遵守这条规则，你就能确保 Hook 在每次渲染中都按照同样的顺序被调用。这让 React 能够在多次的 useState 和 useEffect 调用之间保持 hook 状态的正确</p><h4 id="只在-React-函数中调用-Hook"><a href="#只在-React-函数中调用-Hook" class="headerlink" title="只在 React 函数中调用 Hook"></a>只在 React 函数中调用 Hook</h4><p>不要再普通的 JavaScript 函数中调用 Hook，你可以：</p><ul><li>在 React 的函数组件中调用 Hook</li><li>在自定义 Hook 中调用其他 Hook</li></ul></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://juejin.cn/post/6844903815762673671">【React深入】从Mixin到HOC再到Hook</a></li><li><a href="https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/">useEffect 完整指南</a></li><li><a href="https://juejin.im/post/5dd64ae6f265da478b00e639">useCallback、useMemo 分析以及差别</a></li><li><a href="https://github.com/happylindz/blog/issues/19">十个案例学会 React Hooks</a></li><li><a href="https://mp.weixin.qq.com/s/MzpUROCRYPpwOycI2sz3lQ">useEffect, useCallback, useMemo三者有何区别</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzI1ODE4NzE1Nw==&mid=2247488110&idx=1&sn=f7c142fb65259f22773bb2bad4ccf8ca&chksm=ea0d5894dd7ad18236c174f1b5776f933473c7d6e3d3f95b3f57516d5594552ad7414198d1f4&scene=126&sessionid=1617017984&key=74e411ceb40c53ecceeb837c57022e68713e07c93481427e7e48bce03a829b9867bfe6e59e4db1e1b7bcf1db392c63aecc4ac96c0d04c594bf4f1dcaadb7e77fc37f8e6cb0405ba447bbd29ac158bdfe5f8d98515a27c910f031d65e34617eaa75ab601ef2a0780a16db37bc7c58280e68401ba0ae105a59274bb9a0ed6d1d16&ascene=1&uin=MTA0NTY0NDM2MQ==&devicetype=Windows+10+x64&version=62090070&lang=zh_CN&exportkey=ATPQQ5EDyogKCw2h+uLo8yA=&pass_ticket=rOrDQ7aYmbIfx6AGR+Uc8RcjMfmD7fSjUCfVAc87kvPd+MLrrXll+mIbzLV5R7OT&wx_header=0">React hooks 最佳实践【更新中】</a></li><li><a href="https://juejin.cn/post/6948748617817522206">React Hooks 万字总结</a></li><li><a href="https://mp.weixin.qq.com/s/-WLQPNHF2zzPB1v1Lwkw1w">「React万字基础全面剖析」</a></li><li><a href="https://felixgerschau.com/react-hooks-separation-of-concerns/">Separation of concerns with React hooks</a></li><li><a href="https://www.zhihu.com/question/357020049/answer/909484669?utm_source=wechat_session&utm_medium=social&utm_oi=56197411504128&utm_content=group2_Answer&utm_campaign=shareopn">如何去合理使用 React hook？</a></li><li><a href="https://alexsidorenko.com/blog/react-render-always-rerenders/">使用 React.memo() 提高组件性能</a></li><li><a href="https://alexsidorenko.com/blog/react-render-always-rerenders/">react-render-always-rerenders</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzkzMjIxNTcyMA==&mid=2247485312&idx=1&sn=c55814b0e864dce6133b8f0a8f4e8d65&source=41#wechat_redirect">useEffect(fn, [])和cDM有什么区别？</a></li><li><a href="https://overreacted.io/zh-hans/before-you-memo/">在你写memo()之前</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Hooks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数式组件与类组件有何不同</title>
      <link href="/2022/03/01/2022-03-01-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6%E4%B8%8E%E7%B1%BB%E7%BB%84%E4%BB%B6%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C/"/>
      <url>/2022/03/01/2022-03-01-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6%E4%B8%8E%E7%B1%BB%E7%BB%84%E4%BB%B6%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>React 中最关键的知识点就是 <strong>组件</strong>，在 React 16.8 之前（还没有 Hooks 前），我们的应用大多写成 Class 组件，因为 Class 组件有生命周期，能控制状态（state）。但函数式组件只能默默站在后面，说自己是木偶组件（也叫无状态组件），传来 props，展示UI</p><p>以下文字都基于有了 Hooks 后</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>函数式组件和类组件之间是否有什么根本上的区别？</p><p><strong>函数式组件捕获渲染时的值</strong></p><p>具体可以看这篇文章：<a href="https://overreacted.io/zh-hans/how-are-function-components-different-from-classes/">函数式组件与类组件有何不同？</a></p><blockquote><p>因为在 React 中 props 是不可变（immutable）的，它们永远不会改变。然而，this 是可变（mutable）的</p><p>事实上，这就是类组件 this 存在的意义。React 本身会随着时间的推移而改变，以便你可以在渲染方法以及生命周期方法中得到最新的实例</p></blockquote><p>函数式组件会捕获当前状态下的值，如果你使用定时器改变当前值的状态，那函数式组件显示的还是原来的值，而不是最新值。而类组件会一直获取最新值</p><p>只要一渲染，函数式组件就会捕获当前的值。而类组件即使渲染了，但是它的 this 会指向最新的实例</p><h2 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h2><p>可以看<a href="https://codesandbox.io/s/function-components-different-from-classes-2dligb?file=/src/ClassDemo.js:0-551">线上Demo</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class ClassDemo extends React.Component &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    value: &quot;&quot;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  showMessage = () =&gt; &#123;</span><br><span class="line">    alert(&quot;最新值为 &quot; + this.state.value);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  handleMessageChange = (e) =&gt; &#123;</span><br><span class="line">    this.setState(&#123; value: e.target.value &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  handleClick = () =&gt; &#123;</span><br><span class="line">    setTimeout(this.showMessage, 3000);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input value=&#123;this.state.value&#125; onChange=&#123;this.handleMessageChange&#125; /&gt;</span><br><span class="line">        &lt;button onClick=&#123;this.handleClick&#125;&gt;点击&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的结果是点击后获取到最新的值，而不是 3 秒前的值。为什么？因为 this 可变，3 秒之后执行 <code> alert(&quot;最新值为 &quot; + this.state.value)</code>。 this.state.value 指向最新的值</p><p>如果类组件如果想保存原来的值该怎么做？</p><h3 id="一、调用事件之前读取this-props"><a href="#一、调用事件之前读取this-props" class="headerlink" title="一、调用事件之前读取this.props"></a>一、调用事件之前读取this.props</h3><p>可以看<a href="https://codesandbox.io/s/function-components-different-from-classes-2dligb?file=/src/ClassDemo2.js:0-592">线上Demo</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">showMessage = (value) =&gt; &#123;</span><br><span class="line">    alert(&quot;最新值为 &quot; + value);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">handleClick = () =&gt; &#123;</span><br><span class="line">    const &#123; value &#125; = this.state;</span><br><span class="line">    setTimeout(() =&gt; this.showMessage(value), 3000);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以解决，但点击时获取到当前的 user，再传递给 <code>this.showMessage</code>，这样，即使 3 秒之后也是原来的值</p><p>缺点：每次都要从 <code>this.props</code> 中拿值，如果数据一多，写起来不符合人性</p><h3 id="二、在构造函数中绑定方法"><a href="#二、在构造函数中绑定方法" class="headerlink" title="二、在构造函数中绑定方法"></a>二、在构造函数中绑定方法</h3><p>可以看<a href="https://codesandbox.io/s/function-components-different-from-classes-2dligb?file=/src/ClassDemo3.js">线上Demo</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.showMessage = this.showMessage.bind(this);</span><br><span class="line">    this.handleClick = this.handleClick.bind(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法解决不了问题。我们的问题是我们从 <code>this.props</code> 中读取数据太迟了—— 读取时已经不是我们所需要使用的上下文</p><h3 id="三、利用闭包"><a href="#三、利用闭包" class="headerlink" title="三、利用闭包"></a>三、利用闭包</h3><p>把方法写进 render 中，这样每次渲染时就能捕获住当时所用的 props 或者 state</p><p>可以看<a href="https://codesandbox.io/s/function-components-different-from-classes-2dligb?file=/src/ClassDemo4.js:104-565">线上Demo</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class ClassDemo extends React.Component &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    value: &quot;&quot;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123; value &#125; = this.state;</span><br><span class="line"></span><br><span class="line">    const showMessage = () =&gt; &#123;</span><br><span class="line">      alert(&quot;最新值为 &quot; + value);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    const handleMessageChange = (e) =&gt; &#123;</span><br><span class="line">      this.setState(&#123; value: e.target.value &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    const handleClick = () =&gt; &#123;</span><br><span class="line">      setTimeout(showMessage, 3000);</span><br><span class="line">    &#125;;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input value=&#123;this.state.value&#125; onChange=&#123;handleMessageChange&#125; /&gt;</span><br><span class="line">        &lt;button onClick=&#123;handleClick&#125;&gt;点击&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这个方法很蠢，这个写法和函数式组件有什么区别呢？还不如用函数式组件呢</p><h3 id="函数式组件如果想保存最新的值呢"><a href="#函数式组件如果想保存最新的值呢" class="headerlink" title="函数式组件如果想保存最新的值呢"></a>函数式组件如果想保存最新的值呢</h3><p>使用 useRef 保存最新的值，让组件获得最新的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> ref = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，ref 与实例都<a href="https://zh-hans.reactjs.org/docs/hooks-faq.html#is-there-something-like-instance-variables">扮演同样的角色</a>，ref 对象是一个有 current 属性的一个容器</p><p>上次的例子我们用函数式组件就可以这样写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">FunctionDemo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> refValue = <span class="title function_">useRef</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">showMessage</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;最新值为 &quot;</span> + refValue.<span class="property">current</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleMessageChange</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setValue</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">    refValue.<span class="property">current</span> = e.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(showMessage, <span class="number">3000</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;handleMessageChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看<a href="https://codesandbox.io/s/function-components-different-from-classes-2dligb?file=/src/FunctionDemo2.js">线上Demo</a></p><p>这里笔者提出两个疑问：</p><ul><li><p>为什么 ref 能保存住最新的值？</p></li><li><p>为什么函数式组件会捕获，类组件不会呢？</p></li></ul><p>后续文章会给出笔者的回答</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://overreacted.io/zh-hans/how-are-function-components-different-from-classes/">函数式组件与类组件有何不同？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Hooks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从一道面试题引申到N道面试题</title>
      <link href="/2022/02/22/2022-02-22-%E4%BB%8E%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E5%BC%95%E7%94%B3%E5%88%B0N%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2022/02/22/2022-02-22-%E4%BB%8E%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E5%BC%95%E7%94%B3%E5%88%B0N%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>昨天分享了<a href="https://blog.azhubaby.com/2022/02/21/2022-02-21-%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%20setState%20%E5%8E%9F%E7%90%86%E7%AF%87/">深入浅出 setState 原理篇</a> ，其中讲到 setState 是同步还是异步的问题？这不，引起了古老的回忆，翻开笔记，想起曾经有一个体验良好的面试，面试官从一道面试题出发，循序渐进，引出了各种知识点，这些知识点能检测出面试者的React知识点、ES6知识点、JS基础等。我在此基础上，加上自己的理解，整理一个个人认为考点较充足的面试分享</p><p>双方客套，面试正式开始，面试官正手来一个面试题</p><p>如下的代码， a 的值是多少</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(props)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">            <span class="attr">a</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">a</span>: <span class="number">2</span> &#125;);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">a</span>: <span class="number">3</span> &#125;));</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">a</span>: <span class="number">4</span> &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;state&quot;</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">a</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.state.a&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题考察到 “React 渲染生命周期” 以及 “setState 是同步还是异步” 知识点</p><p>答案是：0、3、4、2</p><p>首先是 React 渲染生命周期，当挂载时，其<a href="https://zh-hans.reactjs.org/docs/react-component.html">生命周期调用顺序</a>为：</p><ul><li>constructor</li><li>static getDerivedStateFromProps()</li><li>render</li><li>componentDidMount</li></ul><p>所以先 render 一次 <code>state.a</code>，值为 0 ，接着进入 componentDidMount 生命周期，<code>this.setState(&#123; a: 1 &#125;)</code> 和 <code>this.setState(&#123; a: 3 &#125;)</code> 为同步操作，setTimeout 会将其中的回调函数（即<code>() =&gt; &#123; this.setState(&#123; a: 2 &#125;)&#125;</code>） 放入宏任务中，then 之后的回调函数（即<code>() =&gt;&#123;this.setState(&#123; a: 4 &#125;)&#125;</code>）会放入微任务中</p><p>因为（legacy 模式下）setState 的同周期内的 setState 会批处理合成为一个 setState，并以后者为主，所以 <code>this.setState(&#123;a: 1&#125;)</code> 会被覆盖。因为调用了 setState ，触发了更新，意味着又 render 一次，此时的 <code>state.a</code> 就显示为 3。当此宏任务调用完后去查看微任务队列，发现有未执行的回调函数，执行它 <code>this.setState(&#123; a: 4 &#125;)</code> ，又一次调用 setState，触发更新，<code>state.a</code> 显示 4。微任务队列为空后，查看宏任务队列，发现回调函数 <code>this.setState(&#123; a: 2 &#125;)</code>，执行，触发更新，<code>state.a</code> 显示 2</p><p>所以其结果为：0、0、4、2</p><p>不知道你对否~~</p><p>我们接着改造一个这个题，变成</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(props)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">            <span class="attr">a</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a&quot;</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">a</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">a</span>: <span class="number">2</span> &#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a&quot;</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">a</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">a</span>: <span class="number">3</span> &#125;));</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a&quot;</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">a</span>);</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">a</span>: <span class="number">4</span> &#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a&quot;</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">a</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.state.a&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不在 render 展示 <code>state.a</code> ，而是在调用完 setState 后查看 <code>state.a</code> 的值，结果会如何呢？</p><p>改编后的题主要考察组件的数据更新和视图的更新是两码事</p><p>答案是：0、0、3、2</p><p>首先都是在 componentDidMount 中，其次，与上个案例一样，调用依次是</p><ul><li>this.setState({ a: 1 });</li><li>this.setState({ a: 3 });</li><li>this.setState({ a: 4 });</li><li>this.setState({ a: 2 });</li></ul><p>其区别在于调用 this.setState({ a: 1 }) 和 this.setState({ a: 3 }) 后，数据不会马上更新，调用 setState 后，会将调用压入队列中，到最后一并执行（批处理），所以此时查看 <code>state.a</code> 的值，会看到还是 0，因为它还没触发批处理。而 Promise、setTimeout 之类原生事件会同步执行，值就显示为你 setState 什么，我就显示什么</p><p>我们在上述两个例子中谈到了 Event Loop，在 React 中会因为性能优化而对 setState 做处理，如果在浏览器环境中，上述的例子会怎么展示呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;4&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这题主要考验了浏览器的 Event Loop 机制</p><p>答案：0、2、4、3、1</p><p>第一个值为 0 没有疑问</p><p>遇到 setTimeout，所以 console.log(“1”) 排入 宏任务队列</p><p>因为 new Promise 中的执行函数会同步执行，而 then 中的”console.log(“3”)”会进入微任务，所以第二个值为 2，</p><p>接着就是第三个值 4，再因为 Event Loop 机制（宏任务-执行全部微任务-再去找宏任务队列第一个），所以先执行微任务，第四个值为3</p><p>最后执行宏任务（setTimeout），第五个值为 5</p><p>既然说到了 Promise，不妨考考 Promise，手写一个太麻烦，没必要考课本。那来说说为什么 promise 中能 .then，它的链式调用的原理是什么？</p><p>每次 new  Promise() 后能 .then().then().then()，因为它每次调用完 then 后，返回了 Promise 实例，所以才能一直调用下去</p><p>这样理解下来，链式调用的核心，就是调用完方法后返回对象本身（return this）</p><p>那我们出一道题，题目是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Operator</span> &#123;...&#125;</span><br><span class="line"><span class="keyword">var</span> op = <span class="keyword">new</span> <span class="title class_">Operator</span>(<span class="number">1</span>)</span><br><span class="line">op.<span class="title function_">add</span>(<span class="number">3</span>).<span class="title function_">minus</span>(<span class="number">2</span>).<span class="title function_">multi</span>(<span class="number">2</span>).<span class="title function_">divide</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>写出 Operator 构造函数中的 add、minus、multi、divide</p><p>我的答案是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Operator</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">initNum</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">num</span> = initNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">add</span>(<span class="params">value</span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">num</span> = <span class="variable language_">this</span>.<span class="property">num</span> + value </span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">minus</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">num</span> = <span class="variable language_">this</span>.<span class="property">num</span> - value;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">multi</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">num</span> = <span class="variable language_">this</span>.<span class="property">num</span> * value;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">divide</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">num</span> = <span class="variable language_">this</span>.<span class="property">num</span> / value;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这题可以引申出 class、ES6还有有哪些特性和柯里化等等</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从 this.setState 的一道面试题延申出各种问题，即考察了面试者对 this.setState 的理解，又考了浏览器的 Event Loop，并引申出 Promise 的链式调用，并用一道题目考察面试者的 JS 基础能力，再之后，还可以问 ES6 的特性和柯里化，知识广度就变大了，也能更好的考察面试者</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入浅出 setState 原理篇</title>
      <link href="/2022/02/21/2022-02-21-%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%20setState%20%E5%8E%9F%E7%90%86%E7%AF%87/"/>
      <url>/2022/02/21/2022-02-21-%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%20setState%20%E5%8E%9F%E7%90%86%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>想起自己（2021年） 8 月份面试时，被面试官们问了好几个 setState 的问题，现在想想，虽然回答上问题，但是了解的不深刻。我知道 setState 被设计成“异步”是为了性能，但是涉及到源码解读我就歇菜了；我知道如何让它同步，但是遇到真实的代码情况时，却不知道如何下手。说到底，当时是准备了面经把这些概念记下来，而没有真正理解它</p><p>在认识 setState 前，我们问几个常见问题</p><ul><li>setState 是同步还是异步？</li><li>如果是异步，怎么让它同步？</li><li>为什么要这样设计？</li></ul><h2 id="基本概念和使用"><a href="#基本概念和使用" class="headerlink" title="基本概念和使用"></a>基本概念和使用</h2><p>React 的理念之一是 UI=f(data)，修改 data 即驱动 UI 变化，那么怎么修改呢？React 提供了一个 API ——setState（类组件的修改方法）</p><p><a href="https://zh-hans.reactjs.org/docs/react-component.html#setstate">官网介绍</a>：</p><blockquote><p><code>setState()</code> 将对组件 state 的更新排入队列，并通知 React 需要使用更新后的 state 重新渲染此组件及其子组件。这是用于更新用户界面以响应事件处理器和处理服务器数据的主要方式</p><p>为了更好的感知性能，React 会延迟调用它，然后通过一次传递更新多个组件。React 并不会保证 state 的变更会立即生效</p><p><code>setState()</code> 并不总是立即更新组件。它会批量推迟更新。这使得在调用 <code>setState()</code> 后立即读取 <code>this.state</code> 成为了隐患。为了消除隐患，请使用 <code>componentDidUpdate</code> 或者 <code>setState</code> 的回调函数（<code>setState(updater, callback)</code>），这两种方式都可以保证在应用更新后触发</p><p>除非 <code>shouldComponentUpdate()</code> 返回 <code>false</code>，否则 <code>setState()</code> 将始终执行重新渲染操作。如果可变对象被使用，且无法在 <code>shouldComponentUpdate()</code> 中实现条件渲染，那么仅在新旧状态不一致调用 <code>setState()</code>可以避免不必要的重新渲染</p></blockquote><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setState</span>(updater, [callback])</span><br></pre></td></tr></table></figure><p>参数一为带有形式参数的 updater 函数：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(state, props) =&gt; stateChange</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如</span></span><br><span class="line"><span class="comment">// this.setState((state, props) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   return &#123;counter: state.counter + props.step&#125;;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br></pre></td></tr></table></figure><p>setState 的第一个参数除了接受函数外，还可以接受对象类型：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setState</span>(stateChange[, callback])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如：this.setState(&#123;count: 2&#125;)</span></span><br></pre></td></tr></table></figure><p>setState 的第二个参数为可选的回调函数，它将在 setState 完成合并重新渲染组件后执行。通常，我们建议使用 componentDidUpdate 来代替此方法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setState</span>(stateChange[, callback])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如: this.setState(&#123;count: 2&#125;, () =&gt; &#123;console.log(this.state.count)&#125;) </span></span><br></pre></td></tr></table></figure><h3 id="与-setState-回调相比，使用-componentDidUpdate-有什么优势？"><a href="#与-setState-回调相比，使用-componentDidUpdate-有什么优势？" class="headerlink" title="与 setState 回调相比，使用 componentDidUpdate 有什么优势？"></a>与 setState 回调相比，使用 componentDidUpdate 有什么优势？</h3><p><a href="https://stackoverflow.com/questions/56501409/what-is-the-advantage-of-using-componentdidupdate-over-the-setstate-callback">stackoverflow</a> 有人问过，也有人回答过：</p><ul><li>一致的逻辑</li></ul><ul><li><p>批量更新</p></li><li><p>什么时候 setState 会比较好？</p><ul><li>当外部代码需要等待状态更新时，如 Promise</li></ul></li></ul><h2 id="setState-的特性——批处理"><a href="#setState-的特性——批处理" class="headerlink" title="setState 的特性——批处理"></a>setState 的特性——批处理</h2><p>如果在同一周期内对多个 setState 进行处理，例如，在同一周期内多次设置商品数据，相当于：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span>&#125;);</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span>&#125;);</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span>&#125;);</span><br><span class="line"><span class="comment">// === </span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(</span><br><span class="line">  count,</span><br><span class="line">  &#123;<span class="attr">quantity</span>: state.<span class="property">quantity</span> + <span class="number">1</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">quantity</span>: state.<span class="property">quantity</span> + <span class="number">1</span>&#125;,</span><br><span class="line">  ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>后调的 setState 将覆盖同一周期内先调用 setState 的值</p><ul><li>setState(stateChange[, callback])</li><li>setState((state, props) =&gt; stateChange[, callback])</li></ul><p>setState 必引发更新过程，但不一定会引发 render 被执行，因为 shouldCompomentUpdate 可以返回 false</p><h2 id="批处理引发的问题"><a href="#批处理引发的问题" class="headerlink" title="批处理引发的问题"></a>批处理引发的问题</h2><h3 id="问题1：连续使用-setState，为什么不能实时改变"><a href="#问题1：连续使用-setState，为什么不能实时改变" class="headerlink" title="问题1：连续使用 setState，为什么不能实时改变"></a>问题1：连续使用 setState，为什么不能实时改变</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">state.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span>&#125;); </span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span>&#125;); </span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span>&#125;); </span><br><span class="line"><span class="comment">// state.count === 1，不是 3</span></span><br></pre></td></tr></table></figure><p>因为 this.setState 词 API 为会进行批处理，后调的 setState 会覆盖统一周期内先调用的 setState 的值，如下图所示：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">state.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">2</span>&#125;); </span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">3</span>&#125;); </span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">4</span>&#125;); </span><br><span class="line"><span class="comment">// state.count === 4</span></span><br></pre></td></tr></table></figure><h3 id="问题2：为什么要-setState，而不是直接-this-state-xx-oo"><a href="#问题2：为什么要-setState，而不是直接-this-state-xx-oo" class="headerlink" title="问题2：为什么要 setState，而不是直接 this.state.xx = oo?"></a>问题2：为什么要 setState，而不是直接 this.state.xx = oo?</h3><p>因为 setState 做的事情不仅仅只是修改了 <code>this.state</code> 的值，另外最重要的是它会触发 React 的更新机制，会进行diff，然后将 patch 部分更新到真实 dom 里</p><p>如果你直接 <code>this.state.xx = oo</code> 的话，state 的值确实会改，但是它不会驱动 React 重渲染。setState 能帮助我们更新视图，引发 shouldComponentUpdate、render 等一系列函数的调用。至于批处理，React 会将 setState 的效果放入队列中，在事件结束之后产生一次重新渲染，为的就是把 Virtual DOM 和 DOM 树操作降到最小，用于提高性能</p><p>当调用 setState 后，React 的 <a href="https://zh-hans.reactjs.org/docs/react-component.html">生命周期函数</a> 会依次顺序执行</p><ul><li>static getDerivedStateFromProps</li><li>shouldComponentUpdate</li><li>render</li><li>getSnapshotBeforeUpdate</li><li>componentDidUpdate</li></ul><h3 id="问题3：那为什么会出现异步的情况呢？（为什么这么设计？）"><a href="#问题3：那为什么会出现异步的情况呢？（为什么这么设计？）" class="headerlink" title="问题3：那为什么会出现异步的情况呢？（为什么这么设计？）"></a>问题3：那为什么会出现异步的情况呢？（为什么这么设计？）</h3><p>因为性能优化。假如每次 setState 都要更新数据，更新过程就要走五个生命周期，走完一轮生命周期再拿 render 函数的结果去做 diff 对比和更新真实 DOM，会很耗时间。所以将每次调用都放一起做一次性处理，能降低对 DOM 的操作，提高应用性能</p><h3 id="问题4：那如何在表现出异步的函数里可以准确拿到更新后的-state-呢？"><a href="#问题4：那如何在表现出异步的函数里可以准确拿到更新后的-state-呢？" class="headerlink" title="问题4：那如何在表现出异步的函数里可以准确拿到更新后的 state 呢？"></a>问题4：那如何在表现出异步的函数里可以准确拿到更新后的 state 呢？</h3><p>通过第二个参数 <code>setState(partialState, callback)</code> 中的 callback 拿到更新后的结果</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onHandleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;点击之后的回调&quot;</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>); <span class="comment">// 最新值</span></span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者可以直接给 state 传递函数来表现出同步的情况</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;函数模式&quot;</span>, state.<span class="property">count</span>);</span><br><span class="line"><span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span> &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="执行原理"><a href="#执行原理" class="headerlink" title="执行原理"></a>执行原理</h2><p>首先先了解<a href="https://zh-hans.reactjs.org/docs/concurrent-mode-adoption.html">三种渲染模式</a></p><blockquote><ul><li>legacy 模式：<code>ReactDOM.render(&lt;App /&gt;, rootNode)</code> 。这是当前 React app 使用的方式。当前没有计划删除本模式，但是这个模式可能不支持新功能</li><li>blocking 模式：<code>ReactDOM.createBlockingRoot(rootNode).render(&lt;App /&gt;)</code> 。目前正在实验中，作为迁移到 concurrent 模式的第一个步骤</li><li>concurrent 模式 ：<code>ReactDOM.createRoot(rootNode).render(&lt;App /&gt;)</code>。目前再实验中，未来稳定之后，打算作为 React 的模式开发模式。这个模式开启了所有的新功能<ul><li>拥有不同的优先级，更新的过程可以被打断 </li></ul></li></ul></blockquote><p>在 legacy 模式下，在 React 的 setState 函数实现中，会根据一个变量 isBatchingUpdates 判断是直接更新 this.state 还是放到队列中回头再说，而 isBatchingUpdates 默认是 false，也就表示 setState 会同步更新 this.state，但是，有一个函数 batchedUpdates，这个函数会把 isBatchingUpdates 修改为 true，而当 React 在调用事件处理函数之前就会调用这个 batchedUpdates，造成的后果，就是由 React 控制的事件处理过程 setState 不会同步更新 this.state</p><p>像 addEventListener 绑定的原生事件、setTimeout/setInterval 会走同步，除此之外，也就是 React 控制的事件处理 setState 会异步</p><p>而 concurrent 模式都是异步，这也是未来 React 18 的默认模式</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>首先，我们总结下关键知识点</p><ul><li>setState 不会立即改变 React 组件中 state 的值</li><li>setState 通过引发一次组件的更新过程来引发重新绘制</li><li>多次 setState 函数调用产生的效果会合并（批处理）</li></ul><p>其次，回答一下文章开头的问题（第二第三问题在文中已经回答）</p><p>setState 是同步还是异步？</p><ul><li>代码同步，渲染看模式<ul><li>legacy 模式，非原生事件、setTimeout/setInterval 的情况下为异步；addEventListener 绑定原生事件、setTimeout/setInterval 时会同步</li><li>concurrent 模式：异步</li></ul></li></ul><p><img src="https://s2.loli.net/2022/02/21/oDCljPzA5yFqTpU.png" alt="image-20220221160905787"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/25954470">setState：这个API设计到底怎么样</a></li><li><a href="https://zhuanlan.zhihu.com/p/25990883">setState为什么不会同步更新组件状态</a></li><li><a href="https://zhuanlan.zhihu.com/p/26069727">setState何时同步更新状态</a></li><li><a href="https://segmentfault.com/a/1190000015615057">浅入深出setState（上篇）</a></li><li><a href="https://segmentfault.com/a/1190000015821018">浅入深出setState（下篇）</a></li><li><a href="https://keqingrong.cn/blog/2019-04-01-react-setstate">重新认识 React 的 setState</a></li><li><a href="https://zhuanlan.zhihu.com/p/39512941">你真的理解setState吗？</a></li><li><a href="https://mp.weixin.qq.com/s/my2Jx7pcbVYnaCWklAzKXA">setState 到底是同步的，还是异步的</a></li><li><a href="https://segmentfault.com/a/1190000040445026">React 中 setState 是一个宏任务还是微任务？</a></li><li><a href="https://stackoverflow.com/questions/56501409/what-is-the-advantage-of-using-componentdidupdate-over-the-setstate-callback">What is the advantage of using componentDidUpdate over the setState callback?</a></li><li><a href="https://stackoverflow.com/a/48610973/458193">深入学习：何时以及为什么 <code>setState()</code> 会批量执行？</a></li><li><a href="https://github.com/facebook/react/issues/11527#issuecomment-360199710">深入：为什么不直接更新 <code>this.state</code>？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非计算机专业的人如何转行程序员看后观感</title>
      <link href="/2022/02/17/2022-02-17-%E9%9D%9E%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E7%9A%84%E4%BA%BA%E5%A6%82%E4%BD%95%E8%BD%AC%E8%A1%8C%E7%A8%8B%E5%BA%8F%E5%91%98%EF%BC%9A%E6%84%9F%E6%82%9F/"/>
      <url>/2022/02/17/2022-02-17-%E9%9D%9E%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E7%9A%84%E4%BA%BA%E5%A6%82%E4%BD%95%E8%BD%AC%E8%A1%8C%E7%A8%8B%E5%BA%8F%E5%91%98%EF%BC%9A%E6%84%9F%E6%82%9F/</url>
      
        <content type="html"><![CDATA[<p>最近在 <a href="https://www.bilibili.com/video/BV1R44y1H77u/">bilibili</a> 上看到宿琛的《非计算机专业的人如何转行程序员》的分享，有兴趣的可以看一下啊。他分享了自己的经历，很厉害，大学就知道自己不喜欢什么想要什么，想要什么后就去努力去读研究生，读完了之后发现编程能力比较弱，就去线上看公开课，因为英文可以，看英文视频能学进去，这样的经历不是一般人能复制的，他推荐了公开课资源平台 <a href="https://www.coursera.org/">coursera 课程</a>、<a href="https://www.edx.org/">edx 课程</a>，以及一些列觉得不错的课程，我</p><p>在评论区里又看到 <a href="https://csdiy.wiki/">CS自学指南</a> </p><p><img src="https://s2.loli.net/2022/02/17/muX2ybBcEZ7LtSC.png" alt="image-20220217151547811"></p><p>天呐，要成为一个计算机高手，要学习这么多</p><p>学习有必要学这么多吗？即使你都学会了，</p><p>你说要取法乎上，但是这个上是要有英语基础，你没有良好的英语怎么听得懂，即使你磕磕绊绊听完了，你能理解多少，</p><p>成为工程师是把自己</p><p>我不反对学习，而且我也一直有在学习，</p><p>我认为的学习，先从功能点入手，慕课的实战课蛮好的，学到即赚到</p>]]></content>
      
      
      <categories>
          
          <category> 有知有行 </category>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 好奇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>碎皮扯淡：好奇是第一原动力</title>
      <link href="/2022/02/15/2022-02-15-%E7%A2%8E%E7%9A%AE%E6%89%AF%E6%B7%A1%EF%BC%9A%E5%A5%BD%E5%A5%87%E6%98%AF%E7%AC%AC%E4%B8%80%E5%8E%9F%E5%8A%A8%E5%8A%9B/"/>
      <url>/2022/02/15/2022-02-15-%E7%A2%8E%E7%9A%AE%E6%89%AF%E6%B7%A1%EF%BC%9A%E5%A5%BD%E5%A5%87%E6%98%AF%E7%AC%AC%E4%B8%80%E5%8E%9F%E5%8A%A8%E5%8A%9B/</url>
      
        <content type="html"><![CDATA[<p>我的一切知识源于好奇。</p><ul><li>好奇《挪威的森林》到底有多色情，先去看电影，再去看小说，发现一点都不色情，纯爱情文学小说</li><li>好奇《金瓶梅》到底有多色情，先去看了杨思敏版的，再去看小说（新加坡南洋出版社出版无删减版）。电影是刺激，但小说中有关色情的部分少的可怜，还各种隐晦，远没有现代影视直接</li><li>这些好奇带来的知识引发了我的思考。一切知识都需要自我感受。别人说电影好看，也许她是个电影小白，没看过几部电影，所以逢看称好。人们说《金瓶梅》淫秽，搁现在，这裸露程度比美剧还少了几分，怎么能说淫秽呢</li></ul><p>在大学时期的我来说：<strong>好奇是驱动人进步的钥匙，色情是第一原动力</strong></p><p>现阶段，虽然对色情已经没有太多研究，对理财感兴趣了，只要有资本，就可以通过资本获利，而且对于接下来十年中的我来言，钱无疑是最重要的努力动力之一</p><p>关于性方面的老师可推荐几位供君学习：</p><p>性文学老师：王小波、李银河、亨利·米勒、兰陵笑笑生、李渔、冯唐、爱伦坡</p><p>性电影老师：伊娃·格林电影、多看美女的电影、多看资本主义国家（美日韩）的电影</p>]]></content>
      
      
      <categories>
          
          <category> 碎皮扯淡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 好奇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记：npm换源更新</title>
      <link href="/2022/02/11/2022-02-11-npm%E6%8D%A2%E6%BA%90%E6%9B%B4%E6%96%B0/"/>
      <url>/2022/02/11/2022-02-11-npm%E6%8D%A2%E6%BA%90%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p>看到<a href="https://zhuanlan.zhihu.com/p/432578145">一篇文章</a>，说是 <a href="https://npmmirror.com/">npm.taobao.org</a> 和 <a href="http://registry.npm.taobao.org/">registry.npm.taobao.org</a> 域名将于 2022 年 05 月 31 日起停止服务。有必要更新一下 npm 的源，顺便复习一下 npm 的一些列命令</p><p>查看 npm 配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config list // 查看基本配置</span><br><span class="line">npm config list -l // 查看所有配置</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/11/a3sQcOiHyJPGXzw.png" alt="image-20220211095840101"></p><p>没找到，拿查看所有配置看看，一查发现 <code>metrics-registry = &quot;https://registry.npmjs.org/&quot;</code>，那就说明源还是 npmjs 的源，看来公司电脑的 npm 用的还是 npm 官方的源，而全局还下载了 cnpm，因为是 npm 包，所以看版本，远程拉去最新的即可，先看看版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm -v</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/11/XGhZ34IUVyrg29J.png" alt="image-20220211101038446"></p><p>查看 cnpm 的官网：<a href="https://npmmirror.com/">中国 NPM 镜像</a> ，文中有这么一句：</p><blockquote><p>当前 <a href="https://registry.npmmirror.com/">registry.npmmirror.com</a> 是从 <a href="https://r.cnpmjs.org/">r.cnpmjs.org</a> 进行全量同步的.</p></blockquote><p>发现也没什么关系，所以我应该不会被影响</p><h2 id="如何更新安装包"><a href="#如何更新安装包" class="headerlink" title="如何更新安装包"></a>如何更新安装包</h2><ol><li>手动更新<ul><li>修改 package.json 中依赖包版本，执行 <code>npm install --force</code></li></ul></li><li>使用 yarn 代替 npm<ul><li>yarn upgrade</li></ul></li><li>使用第三方插件<ul><li>npm install npm-check-updates -g</li><li>ncu // 查看可更新包</li><li>ncu -u // 更新 package.json</li><li>npm install // 升级最新版本</li></ul></li></ol><p>发现第三种最有用</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/432578145">淘宝 NPM 镜像站切换新域名啦</a></li><li><a href="https://www.cnblogs.com/shy1766IT/p/11112065.html">npm 如何更新安装包？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题：渲染十万条数据解决方案</title>
      <link href="/2022/02/09/2022-02-09-%E6%B8%B2%E6%9F%93%E5%8D%81%E4%B8%87%E6%9D%A1%E6%95%B0%E6%8D%AE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2022/02/09/2022-02-09-%E6%B8%B2%E6%9F%93%E5%8D%81%E4%B8%87%E6%9D%A1%E6%95%B0%E6%8D%AE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>笔者在之前的面试中遇到过“一次性给你 10000 条数据，怎么让它不卡之类的问题“，当初准备不充分，不知道怎么回答这类问题，说的方案过于简单，还扯到防抖节流之类的性能优化点上，这篇文章原本2022年1月29日计划写，后因春节过年耽误，直至近日动笔</p><p>查阅资料后发现有三种解决方案：</p><ul><li>虚拟列表（也叫按需渲染或可视区域渲染）</li><li>延迟渲染（即懒渲染）</li><li>时间分片</li></ul><p>虚拟列表是最主流的解决方案，不渲染所有的数据，只渲染可视区域中的数据。当用户滑（滚）动时，通过监听 scroll 来判断是上滑还是下拉，从而更新数据。同理 IntersectionObserver 和 getBoundingClientRect 都能实现</p><p>延迟渲染，也叫懒加载。顾名思义，最开始不渲染所有数据，只渲染可视区域中的数据（同虚拟列表一致）。当滚动到页面底部时，添加数据（concat），视图渲染新增DOM</p><p>时间分片主要是分批渲染DOM，使用 requestAnimationFrame 来让动画更加流畅</p><p>先说最主流的方案</p><h2 id="虚拟列表"><a href="#虚拟列表" class="headerlink" title="虚拟列表"></a>虚拟列表</h2><h3 id="什么是虚拟列表"><a href="#什么是虚拟列表" class="headerlink" title="什么是虚拟列表"></a>什么是虚拟列表</h3><p>虚拟列表是按需显示的一种实现，即只对可见区域进行渲染，对非可见区域中的数据不渲染或部分渲染的技术，是对长列表渲染的优化手段</p><p>说的明白一点，就是展示可视区域中的内容，当你向上向下滚动时，通过 DOM API 替换可视区域中的数据，做到动态加载十万条数据</p><h3 id="两种解决思路"><a href="#两种解决思路" class="headerlink" title="两种解决思路"></a>两种解决思路</h3><p>关于无限滚动，早期通过监听 scroll 事件，这是最常见的解决方案。可去 <a href="https://blog.azhubaby.com/2022/01/22/2022-01-22-%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/">图片懒加载</a> 中查看，简单来说，就是通过子项的 offsetTop（偏移高度）与 innerHeight（视窗高度）+ scrollTop（滚动高度）做对比来实现，当偏移高度 &lt; 视窗高度+滚动高度时，说明已经滚到下方，就可展示图片</p><p>在 <a href="https://blog.azhubaby.com/2022/01/22/2022-01-22-%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/">图片懒加载</a> 中我们也提及 IntersectionObserver（交叉观察者）API，以此来解决 scroll 所不具备的效果，即  IntersectionObserver API 是异步的，不随目标元素的滚动同步触发，性能消耗小。当然还可以通过 getBoundingClientRect 来实现，getBoundingClientRect 方法返回元素的大小机器相对于视窗的位置</p><blockquote><p>PS：所以目前来说有三种方法，在文末 demo 中会附上单独使用这三种解决方案的代码</p></blockquote><p>在这里，因本人实力有限，未破解 getBoundingClientRect 向上滑动时的页面抖动问题，只有 scroll 和 IntersectionObserver 两种解决方案（getBoundingClientRect 方法也放在代码中，但向上滑动会抖动）</p><h4 id="scroll-解决方案"><a href="#scroll-解决方案" class="headerlink" title="scroll 解决方案"></a>scroll 解决方案</h4><p>先说 scroll 解决方案，简单来说，就是对其传来的数据进行分割展示，用到 slice 方法，它会返回一个新的数组</p><p>我们假设单个列表高度为 30px，一页展示的列表数量为 <code>const count = Math.ceil(列表高度 / 30)</code>，展示的数据就是 <code>visibleData = data.slice(start, start + count)</code>（start 一开始为0）</p><p>当滚动时，动态修改 start 和 visibleData</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useState, useRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">VirtualList</span> = props =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [start, setStart] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [visibleCount, setVisibleCount] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [visibleData, setVisibleData] = <span class="title function_">useState</span>([]);</span><br><span class="line">  <span class="keyword">const</span> virtualRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> virtualContentRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(virtualRef.<span class="property">current</span>.<span class="property">clientHeight</span> / <span class="number">30</span>);</span><br><span class="line">    <span class="title function_">setVisibleCount</span>(count);</span><br><span class="line">    <span class="title function_">setVisibleData</span>(data.<span class="title function_">slice</span>(start, start + count));</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onHandleScroll</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> scrollTop = virtualRef.<span class="property">current</span>.<span class="property">scrollTop</span>;</span><br><span class="line">    <span class="keyword">const</span> fixedScrollTop = scrollTop - (scrollTop % <span class="number">30</span>);</span><br><span class="line">    virtualContentRef.<span class="property">current</span>.<span class="property">style</span>.<span class="property">webkitTransform</span> = <span class="string">`translate3d(0, <span class="subst">$&#123;fixedScrollTop&#125;</span>px, 0)`</span>;</span><br><span class="line">    <span class="title function_">setStart</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(scrollTop / <span class="number">30</span>));</span><br><span class="line">    <span class="title function_">setVisibleData</span>(data.<span class="title function_">slice</span>(start, start + visibleCount));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;virtual-list&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;virtualRef&#125;</span> <span class="attr">onScroll</span>=<span class="string">&#123;onHandleScroll&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">className</span>=<span class="string">&quot;virtual-list-phantom&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">height:</span> <span class="attr">data.length</span> * <span class="attr">30</span> + &quot;<span class="attr">px</span>&quot; &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;virtual-list-content&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;virtualContentRef&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;visibleData.map(item =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;virtual-list-item&quot;</span> <span class="attr">key</span>=<span class="string">&#123;item.key&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;item.key&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;item.value&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">VirtualList</span>;</span><br></pre></td></tr></table></figure><blockquote><p>注：virtual-list-phantom 会让滚动条看起来很高，个人认为有无都不影响观感</p></blockquote><p>（有virtual-list-phantom）效果如下：</p><p><img src="https://s2.loli.net/2022/02/14/xQyHDCszI68qV94.gif" alt="虚拟列表scroll有virtual-list-phantom"></p><p>（无virtual-list-phantom）效果如下：</p><p><img src="https://s2.loli.net/2022/02/14/abZn9hJiP6MEjyt.gif" alt="虚拟列表scroll无virtual-list-phantom"></p><p>这种方法的精髓在于设置开始渲染的点和展示的数据，当他滚动时动态修改，但是因为 scroll 会频繁触发，当渲染的数据变多后会有性能问题</p><h4 id="IntersectionObserver-解决方案"><a href="#IntersectionObserver-解决方案" class="headerlink" title="IntersectionObserver 解决方案"></a>IntersectionObserver 解决方案</h4><p>通过 IntersectionObserver 的特性，当目标对象中的 entry.isIntersecting 为 true 或者 intersectionRatio &gt; 0 （元素与祖先元素交叉、可见）时，说明本来不可见的元素浮现在视图中，表示它向上或向下滑动，我们动态设置视图中的顶部和底部 id 即可对其判断。当下滑时 <code>entry.traget.id === &#39;bottom&#39;</code>，我们修改 start 和 end；同理，当上滑时<code>entry.traget.id === &#39;top</code> 时，我们也一样修改 start 和 end</p><p>附上部分代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> [start, setStart] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> [end, setEnd] = <span class="title function_">useState</span>(<span class="variable constant_">THRESHOLD</span>);</span><br><span class="line"><span class="keyword">const</span> [observer, setObserver] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">const</span> bottomElement = <span class="title function_">useRef</span>();</span><br><span class="line"><span class="keyword">const</span> topElement = <span class="title function_">useRef</span>();</span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Observer</span> = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(callback, options);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">callback</span> = (<span class="params">entries, observer</span>) =&gt; &#123;</span><br><span class="line">    entries.<span class="title function_">forEach</span>(<span class="function"><span class="params">entry</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> dataLength = data.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">if</span> (entry.<span class="property">isIntersecting</span> &amp;&amp; entry.<span class="property">target</span>.<span class="property">id</span> === <span class="string">&quot;bottom&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> maxStartIndex = dataLength - <span class="number">1</span> - <span class="variable constant_">THRESHOLD</span>;</span><br><span class="line">            <span class="keyword">const</span> maxEndIndex = dataLength - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">const</span> newStart = end - <span class="number">5</span> &lt;= maxStartIndex ? end - <span class="number">5</span> : maxStartIndex;</span><br><span class="line">            <span class="keyword">const</span> newEnd = end + <span class="number">10</span> &lt;= maxEndIndex ? end + <span class="number">10</span> : maxEndIndex;</span><br><span class="line">            <span class="title function_">setStart</span>(newStart);</span><br><span class="line">            <span class="title function_">setEnd</span>(newEnd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (entry.<span class="property">isIntersecting</span> &amp;&amp; entry.<span class="property">target</span>.<span class="property">id</span> === <span class="string">&quot;top&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> newEnd =</span><br><span class="line">                  end === <span class="variable constant_">THRESHOLD</span></span><br><span class="line">            ? <span class="variable constant_">THRESHOLD</span></span><br><span class="line">            : end - <span class="number">10</span> &gt; <span class="variable constant_">THRESHOLD</span></span><br><span class="line">            ? end - <span class="number">10</span></span><br><span class="line">            : <span class="variable constant_">THRESHOLD</span>;</span><br><span class="line">            <span class="keyword">const</span> newStart = start === <span class="number">0</span> ? <span class="number">0</span> : start - <span class="number">10</span> &gt; <span class="number">0</span> ? start - <span class="number">10</span> : <span class="number">0</span>;</span><br><span class="line">            <span class="title function_">setStart</span>(newStart);</span><br><span class="line">            <span class="title function_">setEnd</span>(newEnd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> updatedList = data.<span class="title function_">slice</span>(start, end);</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">position:</span> &quot;<span class="attr">relative</span>&quot;, <span class="attr">textAlign:</span> &quot;<span class="attr">center</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;updatedList.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        const top = height * (index + start) + &quot;px&quot;;</span></span><br><span class="line"><span class="language-xml">        const refVal = getReference(index, index === lastIndex);</span></span><br><span class="line"><span class="language-xml">        const id = index === 0 ? &quot;top&quot; : index === lastIndex ? &quot;bottom&quot; : &quot;&quot;;</span></span><br><span class="line"><span class="language-xml">        return (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">className</span>=<span class="string">&quot;io-virtual-list-item&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">key</span>=<span class="string">&#123;item.key&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">top</span> &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">ref</span>=<span class="string">&#123;refVal&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">id</span>=<span class="string">&#123;id&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;item.key&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        );</span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://s2.loli.net/2022/02/15/GCWIV5wauFB6TJX.gif" alt="IntersectionObserver效果"></p><p>推荐用这种方法，IntersectionObserver 是异步 API，性能消耗小，缺点是有些落后浏览器不支持，如公司需要兼容这类用户，需引入 polyfill</p><h2 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h2><p>不多介绍，一句话解释：最开始不渲染所有数据，只展示视图上可见的数据，当滚动到页面底部时，加载更多数据</p><p>实现原理：通过监听父级元素的 scroll 事件，当然也可以通过 IntersectionObserver 或 getBoundingClientRect 等 API 实现</p><p>但 scroll 事件会频繁触发，所以需要手写节流；滚动元素内有大量 DOM ，容易造成卡顿，建议使用 IntersectionObserver </p><p>因为之前在讲 <a href="https://blog.azhubaby.com/2022/01/22/2022-01-22-%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/">图片懒加载</a> 时说过思路，这里就不贴，文末会附上demo</p><h2 id="时间分片"><a href="#时间分片" class="headerlink" title="时间分片"></a>时间分片</h2><p>参考 <a href="https://github.com/chenqf/frontEndBlog/issues/15">如何高性能的渲染十万条数据(时间分片) </a> 所举例子，对于大量数据渲染时，JS 运算并不是性能的瓶颈，性能的瓶颈主要在于渲染阶段。也就是说 JS 执行是很快的，页面卡顿是因为同时渲染大量 DOM 所引起的，可采用分批渲染的方式来解决</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ul = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;container&#x27;</span>);</span><br><span class="line"><span class="comment">// 插入十万条数据</span></span><br><span class="line"><span class="keyword">let</span> total = <span class="number">100000</span>;</span><br><span class="line"><span class="comment">// 一次插入 20 条</span></span><br><span class="line"><span class="keyword">let</span> once = <span class="number">20</span>;</span><br><span class="line"><span class="comment">// 总页数</span></span><br><span class="line"><span class="keyword">let</span> page = total / once</span><br><span class="line"><span class="comment">// 每条记录的索引</span></span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 循环加载数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params">curTotal, curIndex</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (curTotal &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 每页多少条</span></span><br><span class="line">    <span class="keyword">let</span> pageCount = <span class="title class_">Math</span>.<span class="title function_">min</span>(curTotal, once);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; pageCount; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">            li.<span class="property">innerText</span> = curIndex + i + <span class="string">&#x27; : &#x27;</span> + ~~(<span class="title class_">Math</span>.<span class="title function_">random</span>() * total)</span><br><span class="line">            ul.<span class="title function_">appendChild</span>(li)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">loop</span>(curTotal - pageCount, curIndex + pageCount)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">loop</span>(total, index);</span><br></pre></td></tr></table></figure><p>我的理解是，通过递归来渲染DOM，刚开始可以是20个，20个渲染完后再渲染剩下的，循环如此，将其全部渲染完。又因为浏览器的渲染机制是“宏任务—微任务—GUI渲染—宏任务…”。遂第一个 loop 执行后，先等页面渲染完，再执行下一轮的 setTimeout（宏任务）</p><p>使用 setTimeout 来做分片会有问题，就是当我们快递下拉时，会出现闪屏或白屏现象？</p><p>这是因为人眼识别帧数为24帧。当帧数为24帧时，连续的画面会形成动画，老一辈的动画片，例如《大闹天空》《哪吒闹海》之类都是一秒里有24个画面（24帧），平滑动画的最佳循环间隔就是 1000 / 24，约等于 41.67ms</p><p>而电脑显示器的刷新频率为 60 帧，大概相当于每秒重绘 60 次。同理，如果想骗过人眼，平滑动画的最佳循环时间就是 1000 / 60，约等于 16.7ms</p><p>而 setTimeout 的执行时间并不是确定的，虽然我们写了 setTimeout(() =&gt; {}, 0) ，但这是不准确的，按照 H5 标准规定 setTimeout 的第二个参数不能小于 4ms，不足会自动增加</p><p>所以当第一个宏任务完成，第一个微任务完成，第一次渲染页面后，4 毫秒后再执行第二个宏任务，这样就导致了实际执行时间慢了 4 毫秒，当一个周期（宏任务+微任务+GUI渲染+4ms）的总和时间大于16.7ms，就会出现掉帧现象，这也是为什么 React 要使用 Fiber 架构的原因</p><p>加上各类电子设备的刷新频率不同，也会导致一个周期的总时间大于16.7ms</p><p>requestAnimationFrame 正是解决这一问题的关键API，它告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。</p><p>因为他是浏览器所提供的原生 API，所以各类电子设备都能使用，根据不同的刷新频率，给于不同的动画执行时间，就不会引起丢帧现象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params">curTotal, curIndex</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (curTotal &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 每页多少条</span></span><br><span class="line">    <span class="keyword">let</span> pageCount = <span class="title class_">Math</span>.<span class="title function_">min</span>(curTotal, once);</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; pageCount; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">            li.<span class="property">innerText</span> = curIndex + i + <span class="string">&#x27; : &#x27;</span> + ~~(<span class="title class_">Math</span>.<span class="title function_">random</span>() * total)</span><br><span class="line">            ul.<span class="title function_">appendChild</span>(li)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">loop</span>(curTotal - pageCount, curIndex + pageCount)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">loop</span>(total, index);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>渲染十万条数据有三种解决方案，为虚拟列表、懒加载、时间分片。最优选是虚拟列表，DOM 树上只挂载有限的DOM；懒加载和时间分片的缺点在于插入大量的DOM，占内存运行时会造成卡顿</p><p>无论是虚拟列表还是懒加载，传统的做法是 scroll + 节流，这种做法的优势是老 API，兼容性刚刚的，缺点是，滑多了还是会引起性能问题，当然 IntersectionObserver 也是一样的，无非是换了个 API 做“元素是否出现在视图”判断，最好的方案是用 IntersectionObserver（交叉观察器），异步加载、性能消耗小</p><p>附上线上demo示例：</p><ul><li><a href="https://demo.azhubaby.com/%E6%B8%B2%E6%9F%93%E5%8D%81%E4%B8%87%E6%9D%A1%E6%95%B0%E6%8D%AE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E8%99%9A%E6%8B%9F%E5%88%97%E8%A1%A8/scroll/index.html">渲染十万条数据解决方案-虚拟列表-scroll</a></li><li><a href="https://demo.azhubaby.com/%E6%B8%B2%E6%9F%93%E5%8D%81%E4%B8%87%E6%9D%A1%E6%95%B0%E6%8D%AE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E6%87%92%E5%8A%A0%E8%BD%BD/IntersectionObserver/index.html">渲染十万条数据解决方案-虚拟列表-IntersectionObserver</a></li><li><a href="https://demo.azhubaby.com/%E6%B8%B2%E6%9F%93%E5%8D%81%E4%B8%87%E6%9D%A1%E6%95%B0%E6%8D%AE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E6%87%92%E5%8A%A0%E8%BD%BD/scroll/index.html">渲染十万条数据解决方案-懒加载-scroll</a></li><li><a href="https://demo.azhubaby.com/%E6%B8%B2%E6%9F%93%E5%8D%81%E4%B8%87%E6%9D%A1%E6%95%B0%E6%8D%AE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E6%87%92%E5%8A%A0%E8%BD%BD/getBoundingClientRect/index.html">渲染十万条数据解决方案-懒加载-getBoundingClientRect</a></li><li> <a href="https://demo.azhubaby.com/%E6%B8%B2%E6%9F%93%E5%8D%81%E4%B8%87%E6%9D%A1%E6%95%B0%E6%8D%AE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E6%87%92%E5%8A%A0%E8%BD%BD/IntersectionObserver/index.html">渲染十万条数据解决方案-懒加载-IntersectionObserver</a></li><li><a href="https://demo.azhubaby.com/%E6%B8%B2%E6%9F%93%E5%8D%81%E4%B8%87%E6%9D%A1%E6%95%B0%E6%8D%AE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E6%97%B6%E9%97%B4%E5%88%86%E7%89%87/index.html">时间分片-一次性所处渲染问题</a></li><li><a href="https://demo.azhubaby.com/%E6%B8%B2%E6%9F%93%E5%8D%81%E4%B8%87%E6%9D%A1%E6%95%B0%E6%8D%AE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E6%97%B6%E9%97%B4%E5%88%86%E7%89%87/requestAnimationFrame.html">时间分片-解决方案</a></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://mp.weixin.qq.com/s/YBr37yNJD2pSmNZ9QPP-yA">懒加载 React 长页面 - 动态渲染组件</a></li><li><a href="https://mp.weixin.qq.com/s/oAlkEB4G6I5BokZQ02Pvng">字节跳动面试官：请100行代码实现无限滚动</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzU3Nzk3NDk5OQ==&mid=2247483836&idx=1&sn=31adbff9461dc2a1f90cb6b947e53fb4&chksm=fd7d2604ca0aaf12011800b7b08cb13d1e0dca01f9ec46a40edafb0d1c3f9a065ae0e38844cb&mpshare=1&scene=1&srcid=&sharer_sharetime=1572568998733&sharer_shareid=778ad5bf3b27e0078eb105d7277263f6#rd">「前端进阶」高性能渲染十万条数据(虚拟列表)</a></li><li><a href="https://github.com/chenqf/frontEndBlog/issues/15#">如何高性能的渲染十万条数据(时间分片)</a></li><li><a href="https://github.com/chenqf/frontEndBlog/issues/16#">如何高性能的渲染十万条数据(虚拟列表)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题：promise的链式怎么实现的</title>
      <link href="/2022/02/08/2022-02-08-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9Apromise%E7%9A%84%E9%93%BE%E5%BC%8F%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E7%9A%84/"/>
      <url>/2022/02/08/2022-02-08-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9Apromise%E7%9A%84%E9%93%BE%E5%BC%8F%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写文章为了让自己好记住知识点，也为了后续当作笔记来看待</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前有过一次面试，面试官问 promise 相关的知识点，然后我回答了，他追问说 promise 的链式怎么实现？我当时没反应过来。面试官很有耐心，说 jquery 也是有链式的，你看过 jquery 的源码吗？它的链式怎么写的？我还是不知道，后来没通过面试，这个知识点常被我回忆，现在正好有时间，来写一写</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>答案是：返回this</p><p>先来一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;johan&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">28</span>,</span><br><span class="line">    <span class="attr">sayName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;my name is&#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">sayAge</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;my age is &#x27;</span> + <span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命名一个对象，它有两个方法，sayName 和 sayAge ，如果我想这样表示 <code>person.sayName().sayAge()</code> 呢？怎么做，在方法 sayName 和 sayAge 中返回 this，即</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;johan&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">28</span>,</span><br><span class="line">    <span class="attr">sayName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;my name is&#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">sayAge</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;my age is &#x27;</span> + <span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是表示，调用方法 sayName 、sayAge 后，返回调用者，即例子 <code>person.sayName()</code> ，person 调用 sayName，调用完后返回值还是 person。所以它可以继续链式调用 sayAge，因为它表示的还是 person</p><h2 id="Promise-中的链式"><a href="#Promise-中的链式" class="headerlink" title="Promise 中的链式"></a>Promise 中的链式</h2><p>Promise 本身没有链式，但是 Promise 的实例对象中的 then 有链式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyPromise</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyPromise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你使用 Promise 时，一般是这样使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1s后显示&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果加上链式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">promise.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1s后显示,第一个&#x27;</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1s后显示，第二个&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>所以很明显，每调用一次 then，就是返回一个实例对象（<code>return new Promise </code>）  </p><h2 id="Jquery-中的链式"><a href="#Jquery-中的链式" class="headerlink" title="Jquery 中的链式"></a>Jquery 中的链式</h2><p>源码太多内容，就拿 <code>core.js</code> 中的<a href="https://github.com/jquery/jquery/blob/main/src/core.js">代码</a>为例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">jQuery.<span class="property">fn</span> = jQuery.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The current version of jQuery being used</span></span><br><span class="line"><span class="attr">jquery</span>: version,</span><br><span class="line"></span><br><span class="line"><span class="attr">constructor</span>: jQuery,</span><br><span class="line"></span><br><span class="line"><span class="comment">// The default length of a jQuery object is 0</span></span><br><span class="line"><span class="attr">length</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line"><span class="attr">toArray</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> slice.<span class="title function_">call</span>( <span class="variable language_">this</span> );</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the Nth element in the matched element set OR</span></span><br><span class="line"><span class="comment">// Get the whole matched element set as a clean array</span></span><br><span class="line"><span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"> num </span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return all the elements in a clean array</span></span><br><span class="line"><span class="keyword">if</span> ( num == <span class="literal">null</span> ) &#123;</span><br><span class="line"><span class="keyword">return</span> slice.<span class="title function_">call</span>( <span class="variable language_">this</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return just the one element from the set</span></span><br><span class="line"><span class="keyword">return</span> num &lt; <span class="number">0</span> ? <span class="variable language_">this</span>[ num + <span class="variable language_">this</span>.<span class="property">length</span> ] : <span class="variable language_">this</span>[ num ];</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// Take an array of elements and push it onto the stack</span></span><br><span class="line"><span class="comment">// (returning the new matched element set)</span></span><br><span class="line"><span class="attr">pushStack</span>: <span class="keyword">function</span>(<span class="params"> elems </span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Build a new jQuery matched element set</span></span><br><span class="line"><span class="keyword">var</span> ret = jQuery.<span class="title function_">merge</span>( <span class="variable language_">this</span>.<span class="title function_">constructor</span>(<span class="params"></span>), elems );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add the old object onto the stack (as a reference)</span></span><br><span class="line">ret.<span class="property">prevObject</span> = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return the newly-formed element set</span></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// Execute a callback for every element in the matched set.</span></span><br><span class="line"><span class="attr">each</span>: <span class="keyword">function</span>(<span class="params"> callback </span>) &#123;</span><br><span class="line"><span class="keyword">return</span> jQuery.<span class="title function_">each</span>( <span class="variable language_">this</span>, callback );</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="attr">map</span>: <span class="keyword">function</span>(<span class="params"> callback </span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">pushStack</span>( jQuery.<span class="title function_">map</span>( <span class="variable language_">this</span>, <span class="keyword">function</span>(<span class="params"> elem, i </span>) &#123;</span><br><span class="line"><span class="keyword">return</span> callback.<span class="title function_">call</span>( elem, i, elem );</span><br><span class="line">&#125; ) );</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="attr">slice</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">pushStack</span>( slice.<span class="title function_">apply</span>( <span class="variable language_">this</span>, <span class="variable language_">arguments</span> ) );</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="attr">first</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">eq</span>( <span class="number">0</span> );</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="attr">last</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">eq</span>( -<span class="number">1</span> );</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="attr">even</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">pushStack</span>( jQuery.<span class="title function_">grep</span>( <span class="variable language_">this</span>, <span class="keyword">function</span>(<span class="params"> _elem, i </span>) &#123;</span><br><span class="line"><span class="keyword">return</span> ( i + <span class="number">1</span> ) % <span class="number">2</span>;</span><br><span class="line">&#125; ) );</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="attr">odd</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">pushStack</span>( jQuery.<span class="title function_">grep</span>( <span class="variable language_">this</span>, <span class="keyword">function</span>(<span class="params"> _elem, i </span>) &#123;</span><br><span class="line"><span class="keyword">return</span> i % <span class="number">2</span>;</span><br><span class="line">&#125; ) );</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="attr">eq</span>: <span class="keyword">function</span>(<span class="params"> i </span>) &#123;</span><br><span class="line"><span class="keyword">var</span> len = <span class="variable language_">this</span>.<span class="property">length</span>,</span><br><span class="line">j = +i + ( i &lt; <span class="number">0</span> ? len : <span class="number">0</span> );</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">pushStack</span>( j &gt;= <span class="number">0</span> &amp;&amp; j &lt; len ? [ <span class="variable language_">this</span>[ j ] ] : [] );</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="attr">end</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">prevObject</span> || <span class="variable language_">this</span>.<span class="title function_">constructor</span>(<span class="params"></span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们不用看全部，但看其中的方法，是不是和最开始的例子很像——<code>return this</code></p><p>所以链式不可怕，可怕的是，动都不动就自我劝退</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UU笔记</title>
      <link href="/2022/02/03/2022-02-03-UU%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/02/03/2022-02-03-UU%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>这位博主叫 UU，以前微博名叫：<a href="https://weibo.com/u/6351230063">拉瓦铀</a>，后来因为微博误封，他索性换了个号，现在的号叫 <a href="https://weibo.com/u/6608505433">笛卡吾</a> ，他有个自己的网站叫<a href="https://i.lavayou.cn/">锡安</a>，我在春节放假期间，付费读了他的文章，因为他写的东西太长，有些内容又晦涩，我只记录下一些个人觉得有用的话</p><ul><li>地理决定生物，生物影响历史，历史衍生文化，文化催生科学，科学发现物理，物理解释地理</li><li>绝大多数人根本想不明白，不理财 == 被剥削</li><li>虚拟币不仅是黄金还同时是古董</li><li>做人不要自我设限</li><li>在知识的海洋里，不要做一个农民，要做一个游牧者</li><li>人都有惰性，都喜欢能「一招鲜，吃遍天」，都盼着一劳永逸地在社会里找到一个舒服的位置躺着生活，但这注定不可能实现</li><li>稳定，就是中国政治的金线</li><li>不要让生活品质下降，否则人的心态会受到很大的影响</li><li>很多没有历史常识的人，羡慕民国，甚至羡慕魏晋，就是这个原因——下面的人不算人，看不见；上面的人很稳定，所以有足够的钱和闲花样作，又是大师，又是七贤</li><li>300 多万同志在扶贫一线，1800 名英雄牺牲。6 亿中国人，平均月收入不到 1000 元。时刻提醒自己这两组数据，就不会脱离群众，就不会站在人民的对立面</li><li>人一定要趁年轻多运动，做一些负重，不要只顾着心肺。人老了，肌肉会持续萎缩，力量越来越小，再想增肌基本上不可能了，就是维持着。肌肉量越小，越容易疲惫，精神越差，越不可能增肌，恶性循环。很多老人，一早就开始慢性疼痛，等死，就是因为掉进了这个循环里。有什么办法吗？其实没有……医学再发达，只能有病治病，没病止痛，不可能凭空生肌。到了那个时候，就晚了。这是真正意义上的「等你老了就知道了」。因为雌性的雄激素水平远低于雄性，而肌肉量主要与雄激素有关，所以，年轻女性更要注意提前装备一些骨骼肌，等老了维持体能。女性的激素水平波动大，如果涉及生育哺乳的话，波动就更大，更年期又是一道坎。千万不要中年发福，变成梨形，不然过了 40 再想瘦下来，难上加难。而且人越老，嘴越馋，意志力下降的同时，生活兴趣收缩。会活得越来越像动物，这是大规律，无法逆转。假如只剩下吃喝了，那养老生活就跟堆肥是一样的。趁年轻，多运动。懂的人懂。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 有知有行 </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>圣杯布局和双飞翼布局</title>
      <link href="/2022/01/29/2022-01-29-%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/"/>
      <url>/2022/01/29/2022-01-29-%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然这类面试题已经很久没看到了，但作为2022年春节假期的第一天，轻松为主，拿来试试刀</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>首先要解释一下：无论是圣杯布局还是双飞翼布局，都是为了实现一个效果：左右固定宽度，中间部分自适应。两者的区别在于，圣杯布局给中间的 div 设置 padding-left 和 padding-right；而双飞翼布局则在中间的 div 内部创建子 div 放置内容，并在该 div 里用 margin-left 和 margin-right 留出左右宽度</p><h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2><p>HTML 结构如此：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span>组成头部<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;middle&quot;</span>&gt;</span>中间部分自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>左边栏固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右边栏不顾宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span>组成尾部<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS 样式如此：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-tag">body</span> &#123;</span><br><span class="line">     <span class="attribute">min-width</span>: <span class="number">700px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span>,</span><br><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: grey;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span>,</span><br><span class="line"><span class="selector-class">.middle</span>,</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">130px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">220px</span> <span class="number">0</span> <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.middle</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">220px</span>;</span><br><span class="line">    <span class="attribute">right</span>: -<span class="number">220px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">220px</span>;</span><br><span class="line">    <span class="attribute">background</span>: blue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如此：</p><p><img src="https://s2.loli.net/2022/02/07/X9SGCnRdTJKVqDt.png" alt="圣杯布局"></p><p>代码说明：</p><ol><li>首先在容器 container 中给予 <code>padding：0 220px 0 200px</code> ，这一步是为了给两边固定宽预留位置</li><li>中间（middle）元素设置 <code>width: 100%</code>，它自然就自适应了</li><li>设置左边（left）元素 <code>position: relative, left: -200px</code>。这样做是让它做到左边的固定位置，做到此时，效果如下<ul><li><img src="https://s2.loli.net/2022/02/07/RTiBqy7Zhev415m.png" alt="圣杯布局"></li><li>接着用<code>margin-left: -100%</code>，让其回到与中间部分一样高的位置，这就是圣杯布局的关键</li><li><code>margin-left：-100%</code> 表示向左移动整个屏幕的距离</li><li>因为三个元素都加了浮动，所以配合 <code>margin-left: -100%</code> 左边容器就能与中间部分同高</li></ul></li><li>同理，设置右边（right）元素<code>position: relative, right:-220px, margin-left: -220px</code><ul><li>注意，这里的 <code>margin-left</code> 是 220px。为什么这个是220px，和它自身宽度一致</li><li>注意 ，自身 <code>margin-left</code> 为负时，就往左移动，等它等于自身高度时就“升格”到上一层，当它等于 -100% 时，这个 100% 表示的是中间部分的宽度，所以就固定在左边了</li></ul></li></ol><h2 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h2><p>有人说“双飞翼布局是玉伯大大提出来的，始于淘宝UED”，其效果和圣杯布局一样，只是它把三栏布局比作一只鸟，中间内容部分分为三部分，左翅膀、中间、右翅膀。其技术关键在于它还有一层 div</p><p>HTML 结构如此：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span>组成头部<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;middle&quot;</span>&gt;</span>中间部分自适<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>左边栏固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右边栏固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span>组成尾部<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS 结构如此：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">      <span class="attribute">min-width</span>: <span class="number">700px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span>,</span><br><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: grey;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span>,</span><br><span class="line"><span class="selector-class">.right</span>,</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">130px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main-inner</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">220px</span> <span class="number">0</span> <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">130px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">220px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">220px</span>;</span><br><span class="line">    <span class="attribute">background</span>: blue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如圣杯布局一致，不重复展示，它代码的关键在于先构建中间部分展示出，再通过 <code>margin-left</code> 完成浮动流</p><h2 id="思考：为什么会考三栏布局"><a href="#思考：为什么会考三栏布局" class="headerlink" title="思考：为什么会考三栏布局?"></a>思考：为什么会考三栏布局?</h2><p>以前的布局难点就是三栏布局，而且三栏布局还能引出 BFC，BFC 的作用之一就是自适应布局。而现在 <code>flex: 1</code>就能解决自适应布局的问题，所以这类考题已经不多见了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以前一直担心考这类破问题，因为完全没准备过。除了一次考左边固定宽，右边自适应外，就没考过 CSS 布局方面的问题，大概是因为已经过时了</p><p>三栏布局两种解决方法</p><ul><li>圣杯布局<ul><li>浮动 +  margin-left + 自身相对定位</li></ul></li><li>双飞翼布局<ul><li>浮动 + margin-left + 中间部分再包裹一层</li></ul></li></ul><p>相同点：浮动 、margin-left</p><p><code>margin-left: -100%</code> ：左边上升</p><p><code>margin-left: -220px</code>：右边上升</p><p>线上demo：</p><ul><li><a href="https://demo.azhubaby.com/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E4%B8%8E%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80/index.html">圣杯布局</a></li><li><a href="https://demo.azhubaby.com/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E4%B8%8E%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/index.html">双飞翼布局</a></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/246169418">CSS 布局，float+margin负值实现圣杯布局</a></li><li><a href="https://www.cnblogs.com/imwtr/p/4441741.html">CSS布局 – 圣杯布局 &amp; 双飞翼布局</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 圣杯布局 </tag>
            
            <tag> 双飞翼布局 </tag>
            
            <tag> CSS布局 </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题：箭头函数和普通函数的区别</title>
      <link href="/2022/01/25/2022-01-25-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E5%92%8C%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2022/01/25/2022-01-25-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E5%92%8C%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一个东西你知道知道的多，就能写出的多</p></blockquote><p>去年<a href="https://blog.azhubaby.com/2021/08/17/2021-08-17-%E9%98%BF%E9%87%8C%E3%80%81%E5%BE%97%E7%89%A9%E3%80%81%E6%B6%82%E9%B8%A6%E3%80%81%E9%80%94%E8%99%8E%E9%9D%A2%E8%AF%95%E5%BF%83%E5%BE%97%EF%BC%88%E4%BA%8C%EF%BC%89/#/">面试</a>的时候，五位面试官有三位问到了这个问题，可见这是一个面试常题，我都忘记自己是怎么回答的，要我现在说：<del>箭头函数没有 this 绑定，它的 this 指向父作用域</del></p><p>果然，记忆记不牢是有原因的，因为没有写文章，没有理解真正理解它</p><p>真正的答案是什么？</p><p><a href="https://es6.ruanyifeng.com/#/docs/function#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0">阮一峰版</a>：</p><ul><li>箭头函数没有自己的 this 对象，函数体内的 this 是定义时所在的对象而不是使用时所在的对象</li><li>不可以当作构造函数，也就是说，不可以对箭头函数使用 new 命令，否则会抛出一个错误</li><li>不可以使用 arguments 对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替</li><li>不可以使用 yield 命令，因此箭头函数不能用作 Generator 函数</li><li>返回对象时必须在对象外面加上括号</li></ul><p><a href="https://book.douban.com/subject/27072230/">尼古拉斯版</a>：</p><ul><li>没有 this、super、arguments 和 new.target 绑定。this、super、arguments 和 new.target 的值由最近的不包含箭头函数的作用域决定</li><li>不能被 new 调用，箭头函数内部没有 [[Construct]] 方法，因此不能当作构造函数使用，使用 new 调用箭头函数会抛出错误</li><li>没有 prototype，既然你不能使用 new 调用箭头函数，那么 prototype 就没有存在的理由。箭头函数没有 prototype 属性</li><li>不能更改 this， this 的值在函数内部不能被修改。在函数的整个生命周期内 this 的值是永恒不变的</li><li>没有 arguments 对象，既然箭头函数没有 arguments 绑定，你必须依赖于命名或者剩余参数来访问该函数的参数</li><li>不允许重复的命名参数</li></ul><blockquote><p>尼古拉斯是写《深入理解 ES6》的作者，阮一峰就不解释了</p></blockquote><p>结合起来，就是说箭头函数和普通函数的区别在于：</p><ul><li>它不能被当作构造函数，因为它不能被new，不能被 new 的原因在于箭头函数内部没有 [[Construct]] 方法。又因为它不能被 new，所以也就没有 prototype</li><li>它没有自己的 this，它的 this 由定义时所在的对象决定而不是使用时所在的对象</li><li>它也没有 arguments 对象</li><li>不可以使用 yield 命令，不能用作生成器函数</li></ul><p>我们依次说说这四点</p><h2 id="new-从何来"><a href="#new-从何来" class="headerlink" title="new 从何来"></a>new 从何来</h2><p>先复习一下 new 调用构造函数会执行什么</p><ol><li>在内存中创建一个新对象</li><li>这个新对象内部的 [[prototype]] 特性被赋值为构造函数的 prototype 属性</li><li>构造函数内部的 this 被赋值为这个新对象（this指向新对象）</li><li>执行构造函数内部的代码（给新对象添加属性）</li><li>如果构造函数返回非空对象，则返回该对象；否则，返回刚创建的新对象</li></ol><p>我们可以手写一个 new </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">new2</span>(<span class="params">Constructor, ...args</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line">    obj.<span class="property">__proto__</span> = <span class="title class_">Constructor</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="title class_">Constructor</span>.<span class="title function_">apply</span>(obj, ...args)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> result === <span class="string">&#x27;object&#x27;</span> ? result : obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复习完 new，回过头看为什么不能调用 new</p><p>JavaScript 函数内部有两个内部方法：[[Call]] 和 [[Construct]]</p><ul><li>直接调用时执行[[Call]] 方法，直接执行函数体</li><li>new 调用时执行 [[Construct]] 方法，创建实例对象</li></ul><p>箭头函数设计之初是为了设计一种更简短的函数，没有 [[Construct]] 方法。具体<a href="https://juejin.cn/post/7050492355056664612#/">99.9%的人都不知道的箭头函数不能当做构造函数的秘密</a> 摘出了很多英文材料佐证这个事实</p><p>我们可以这样说，因为它没有[[Construct]] 内部方法，所以它不能被 new。而因为它不能被 new，所以它也没有 prototype</p><blockquote><p>prototype 的理解可以看这篇： <a href="https://fe.azhubaby.com/JavaScript/%E5%8E%9F%E5%9E%8B.html">原型</a></p></blockquote><h2 id="this-谁人调用你"><a href="#this-谁人调用你" class="headerlink" title="this 谁人调用你"></a>this 谁人调用你</h2><p>JavaScript 中的 this 是词法作用域，与你在哪里定义无关，而与你在哪里调用有关，所以会有各种 this “妖”的问题，改变 this 有 4 种方法</p><ul><li>作为对象方法调用</li><li>作为函数调用</li><li>作为构造函数调用</li><li>使用 apply 或 call 调用</li></ul><p>但是箭头函数没有自己的 this 对象，内部的 this 就是定义时上层作用域中的this。也就是说，箭头函数内部的 this 指向是固定的</p><h2 id="arguments-老一辈的类数组"><a href="#arguments-老一辈的类数组" class="headerlink" title="arguments 老一辈的类数组"></a>arguments 老一辈的类数组</h2><p>arguments 是一个对应于传递给函数的参数的类数组对象。arguments 对象标识所有（非箭头）函数可用的局部变量，可以说只要是（非箭头）函数就自带 arguments，它表示所有传递给函数的参数</p><h3 id="什么是类数组对象"><a href="#什么是类数组对象" class="headerlink" title="什么是类数组对象"></a>什么是类数组对象</h3><p>所谓类数组对象，就是指可以通过<strong>索引属性访问元素</strong>并且<strong>拥有 length 属性</strong>的对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arrLike = &#123;</span><br><span class="line">0: &#x27;name&#x27;,</span><br><span class="line">1: &#x27;age&#x27;,</span><br><span class="line">length: 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>箭头函数没有</p><h2 id="yield-是什么"><a href="#yield-是什么" class="headerlink" title="yield 是什么"></a>yield 是什么</h2><p>说 yield 之前，先了解下生成器</p><p>生成器是 ES6 新增的一个极为灵活的结构，拥有在一个函数块内暂停和恢复代码执行的能力。</p><p>生成器的形式是一个函数，函数名称前面加一个星号（*）表示它是一个生成器。只要是可以定义（非箭头）函数的地方，就可以定义生成器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成器函数声明</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">generatorFn</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成器函数表达式</span></span><br><span class="line"><span class="keyword">let</span> generatorFn = <span class="keyword">function</span>* () &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作为对象字面量方法的生成器函数</span></span><br><span class="line"><span class="keyword">let</span> foo = &#123;</span><br><span class="line">    * <span class="title function_">generatorFn</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作为类实例方法的生成器函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    * <span class="title function_">generatorFn</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作为类静态方法的生成器函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> * <span class="title function_">generatorFn</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>标识生成器函数的星号不受两侧空格的影响</p><p>而 yield 关键字是可以让生成器停止和开始执行，也是生成器最有用的地方。生成器函数在遇到 yield 关键字之前会正常执行。遇到这个关键字后，执行会停止，函数作用域的状态会被保留。停止执行的生成器函数只能通过在生成器对象上调用 next() 方法来恢复执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// umi 项目中请求接口时的例子</span></span><br><span class="line">*<span class="title function_">fetchData</span>(<span class="params">&#123; payload &#125;, &#123; call, put &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> resData = <span class="keyword">yield</span> <span class="title function_">call</span>(fetchApi, payload);</span><br><span class="line">    <span class="keyword">if</span> (resData.<span class="property">code</span> === <span class="string">&#x27;OK&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="title function_">put</span>(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;save&#x27;</span>,</span><br><span class="line">            <span class="attr">payload</span>: &#123;</span><br><span class="line">                <span class="attr">data</span>: resData,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title class_">Toast</span>.<span class="title function_">show</span>(resData.<span class="property">resultMsg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>因为箭头函数不能用来定义生成器函数才不能使用 yield 关键字</p><h2 id="模拟面试"><a href="#模拟面试" class="headerlink" title="模拟面试"></a>模拟面试</h2><p>面试官：对 ES6 了解吗</p><p>面试者：嗯呢，项目中一直有用</p><p>面试官：你说说你平时都用哪些 ES6 的新特性</p><p>面试者：例如箭头函数、let、const、模板字符串、扩展运算符、Promise…</p><p>面试官：嗯嗯，箭头函数和普通函数有什么区别</p><p>面试者：箭头函数不能被 new、没有 arguments、它的 this 在那里定义相关、它不能用 yield 命令，返回对象时必须在对象外面加上括号</p><p>面试官：箭头函数为什么不能被 new</p><p>面试者：因为箭头函数没有 [[Construct]] 方法，在 new 时，JavaScript 内部会调用 [[Construct]] 方法，因为箭头函数没有，所以 new 时会报错。当然，因为不能被 new ，所以箭头函数也没有 prototype</p><p>面试官：你刚刚说到没有 arguments，简单介绍下它</p><p>面试者：它是所有参数的合集，每个（非箭头）函数自带 arguments，其结构是类数组对象</p><p>面试官：什么是类数组对象</p><p>面试者：可以通过索引访问元素且拥有 length 属性的对象…</p><p>面试官：我问问其他的</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://es6.ruanyifeng.com/#/docs/function#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0">ECMAScript 6 入门</a></li><li><a href="https://juejin.cn/post/7050492355056664612#/">99.9%的人都不知道的箭头函数不能当做构造函数的秘密</a></li><li><a href="https://book.douban.com/subject/27072230/">深入理解ES6</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 箭头函数 </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片懒加载的三种解决方法</title>
      <link href="/2022/01/22/2022-01-22-%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
      <url>/2022/01/22/2022-01-22-%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写作提高思考</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我想写一个系列，关于图片懒加载、React 渲染十万条数据、无限下拉方案文章，因为其三者有共性，都有使用了 与 DOM 相关的 offsetTop、innerHeight、getBoundingClientRect、IntersectionObserver 等，这些知识点如果单独放在一篇文章中，其价值点就是1，如果相互连接，价值点就是3。用好梅特卡夫定律，能让自己的效率提升不少</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>学习前端，三板斧，HTML、CSS、JavaScript。JavaScript 基础由 DOM、BOM、ECMAScript 组成，其中 ECMAScript 为规范语言，现在说的 ES6（ES2016~ES2022） 指的就是它，隔段时间就会发布，目前一年发布一次，以年份来说，现在是 ECMAScript 2022。BOM是什么，BOM是浏览器对象模型（Browser Object Model）。它有六大对象</p><ul><li>document： DOM（对 BOM 包含了DOM，但是 DOM 重要，其地位和 BOM 一样）</li><li>event：事件对象</li><li>history：浏览器的历史记录</li><li>location：窗口的 url 地址栏信息</li><li>screen：显示设备的信息</li><li>navigator：浏览器的配置信息</li></ul><p>DOM我们也很了解，文本对象模型，指操作HTML（超级文本标识语言）的API。DOM 会将文档解析为一个由节点和对象（包含属性和方法的对象）组件的结构集合</p><p>以前开发页面时，我们在 script 标签中，先获取节点（DOM Api），再操作 DOM ，所以以前是 《JavaScript 面向对象编程》，《JavaScript dom编程艺术》，但操作 DOM 的 API 太长，不易书写，JQuery 集大成，简化Api，统一了操作写法。如果展开，会有很多可以延伸，而我铺垫了这么多，就是想引出 document</p><p>这次我们要讲的 offset、scroll、client 就是出自“ document 家”。先配两张图来看看这三个到底是什么</p><p><img src="https://s2.loli.net/2022/01/24/Dc89ErVsSCqhmgT.png" alt="document"></p><p><img src="https://s2.loli.net/2022/01/24/imWP2fknSu9dlRX.png" alt="document2"></p><h3 id="client"><a href="#client" class="headerlink" title="client"></a>client</h3><p><strong>client 指元素本身的可视内容</strong>。不包括 overflow 被折叠部分，不包括滚动条、border，包括 padding</p><p>有四属性：</p><ul><li>clientHeight：对象可见的高度</li><li>clientWidth：对象可见宽度</li><li>clientTop：元素距离顶部的厚度，一般为0，因为滚动条不会出现在顶部</li><li>clientLeft：元素距离左侧的厚度，一般为0，因为滚动条不会出现在左侧</li></ul><h3 id="offset"><a href="#offset" class="headerlink" title="offset"></a>offset</h3><p><strong>offset 指偏移</strong>。包括这个元素在文档中占用的所有显示宽度，包括滚动条、padding、border，不包括 overflow 隐藏的部分</p><p>有五属性：</p><p>offsetHeight：该对象自身的绝对高度</p><ul><li>offsetHeight: = border-width * 2 + padding-top + height + padding-bottom</li></ul><p>offsetWidth：该对象自身的绝对宽度</p><ul><li>offsetWidth = border-width * 2 + padding-left + width + padding-right</li></ul><p>offsetParent：返回一个对象的引用，字面意思，相对父元素的偏移</p><ul><li>如果当前元素的父元素没有 CSS 定位（position为absolute/relative），offsetParent 为 body</li><li>如果当前元素的父元素有 CSS 定位（position为absolute/relative），offsetParent 取父级中最近的元素</li></ul><p>offsetTop：相对版面或 offsetParent 属性指定父坐标的顶部距离</p><ul><li>offsetTop = offsetParent 的 padding-top + 中间元素的 offsetHeight + 当前元素的 margin-top</li></ul><p>offsetLeft：相对版面或 offsetParent 属性指定父坐标的左部距离</p><ul><li>offsetLeft = offsetParent 的 padding-left + 中间元素的 offsetWidth + 当前元素的 margin-left</li></ul><h3 id="Scroll"><a href="#Scroll" class="headerlink" title="Scroll"></a>Scroll</h3><p><strong>Scroll 指滚动</strong>。包括这个元素没有显示出来的实际宽度，包括 padding，不包括滚动条、border</p><p>scrollHeight：获取对象的滚动高度，对象的实际高度</p><p>scrollWidth：获取对象的滚动宽度</p><p>scrollTop：当前元素与窗口最顶端的距离</p><p>scrollLeft：当前元素与窗口最左端的距离</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>innerHeight 和 clientHeight 有什么区别</p><p>准确来说，clientHeight 是针对 body，innerHeight 是 window 的</p><p>document.body.clientHeight：网页可见区域高</p><p>window.innerHeight：可视窗口高度，不包括浏览器顶部工具栏</p><h2 id="监听图片高度实现懒加载"><a href="#监听图片高度实现懒加载" class="headerlink" title="监听图片高度实现懒加载"></a>监听图片高度实现懒加载</h2><p>通过图片的 offsetTop（偏移高度）和 window 的 innerHeight、scrollTop 判断图片是否位于可视区域</p><p>即很多图片，先显示视窗中的图片，没看见的先不展示，加快页面加载速度。当你向下滚，当后续图片的 offsetTop（偏移高度） 小于 innerHeight（视窗高度） + scrollTop（滚动高度） 时，意味着此图片已经出现在视窗中，将真正图片替换loading</p><p>关键代码在于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">lazyload</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> seeHeight = <span class="variable language_">window</span>.<span class="property">innerHeight</span>;</span><br><span class="line">    <span class="keyword">let</span> scrollTop = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = n; i &lt; img.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (img[i].<span class="property">offsetTop</span> &lt; seeHeight + scrollTop) &#123; <span class="comment">// 对比图片的偏移高度和屏幕高度+滚动高度</span></span><br><span class="line">            <span class="keyword">if</span> (img[i].<span class="title function_">getAttribute</span>(<span class="string">&quot;src&quot;</span>) === <span class="string">&#x27;loading.gif&#x27;</span>) &#123;</span><br><span class="line">                img[i].<span class="property">src</span> = img[i].<span class="title function_">getAttribute</span>(<span class="string">&quot;data-src&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            n = i + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://s2.loli.net/2022/01/24/KCAfHM7D618dQth.gif" alt="监听图片高度实现懒加载"></p><h2 id="Element-getBoundingClientRect"><a href="#Element-getBoundingClientRect" class="headerlink" title="Element.getBoundingClientRect"></a>Element.getBoundingClientRect</h2><blockquote><p><strong>Element.getBoundingClientRect()</strong> 方法返回元素的大小及其相对于视口的位置</p></blockquote><p>getBoundingClientRect 返回值是一个 DOMRect 对象，这个对象是由该元素的 getClientRects() 方法返回的一组矩形的集合，即与该元素相关的 CSS 边框集合</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">domRect = element.<span class="title function_">getBoundingClientRect</span>();</span><br></pre></td></tr></table></figure><p>返回坐标、宽高、在视口中的位置</p><ul><li>x </li><li>y </li><li>width </li><li>height </li><li>top</li><li>right</li><li>bottom</li><li>left</li></ul><p><img src="https://s2.loli.net/2022/01/28/aAo5cjdKsgYeS1h.png" alt="rect"></p><blockquote><p>如果是标准盒子模型，元素的尺寸等于 <code>width/height</code> + <code>padding</code> + <code>border-width</code> 的总和。如果 <code>box-sizing:border-box</code> ，元素的尺寸等于 <code>width/height</code></p></blockquote><p>我们用这个 API 来获取每张图片的 top 值，如果 top 值小于可视区的高度就视为已经进入可视区，直接加载图片即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">lazyload</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> seeHeight = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = n; i &lt; img.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (img[i].<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span> &lt; seeHeight) &#123;</span><br><span class="line">            <span class="keyword">if</span> (img[i].<span class="title function_">getAttribute</span>(<span class="string">&quot;src&quot;</span>) === <span class="string">&quot;loading.gif&quot;</span>) &#123;</span><br><span class="line">                img[i].<span class="property">src</span>= img[i].<span class="title function_">getAttribute</span>(<span class="string">&quot;data-src&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            n = i + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://s2.loli.net/2022/01/28/DQBxskS2oO3JZwH.gif" alt="getBoundingClientRect实现懒加载"></p><h2 id="通过-IntersectionObserver-实现懒加载"><a href="#通过-IntersectionObserver-实现懒加载" class="headerlink" title="通过 IntersectionObserver 实现懒加载"></a>通过 IntersectionObserver 实现懒加载</h2><blockquote><p>IntersectionObserver 接口（从属于 Intersection Observer API）提供了一种异步观察目标元素与其祖先元素或顶级文档视窗（viewport）交叉状态的方法。祖先元素与视窗（viewport）被称为根（root）</p></blockquote><p>IntersectionObserver 可以不用监听 scroll 事件，做到元素一可见便调用回调，在回调里面我们来判断元素是否可见</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title class_">IntersectionObserver</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> lazyImageObserver = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(<span class="function">(<span class="params">entries, observer</span>) =&gt;</span> &#123;</span><br><span class="line">        entries.<span class="title function_">forEach</span>(<span class="function">(<span class="params">entry, index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> lazyImage = entry.<span class="property">target</span>;</span><br><span class="line">            <span class="comment">// 如果元素可见</span></span><br><span class="line">            <span class="keyword">if</span> (entry.<span class="property">intersectionRatio</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (lazyImage.<span class="title function_">getAttribute</span>(<span class="string">&quot;src&quot;</span>) === <span class="string">&#x27;loading.gif&#x27;</span>) &#123;</span><br><span class="line">                    lazyImage.<span class="property">src</span> = lazyImage.<span class="title function_">getAttribute</span>(<span class="string">&quot;data-src&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                lazyImageObserver.<span class="title function_">unobserve</span>(lazyImage)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; img.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        lazyImageObserver.<span class="title function_">observe</span>(img[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码表示，遍历所有的图片，对其进行观察原生是否可见，如果元素可见，就把真正图片替换loading</p><p>IntersectionObserver  可以自动“观察”元素是否可见，其本质是目标元素与视窗产生一个交叉去，所以这个 API 叫做“交叉观察器”</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> io = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(callback, option)</span><br></pre></td></tr></table></figure><p>上面代码中， <code>IntersectionObserver</code> 是浏览器原生提供的构造函数，接受两个参数：<code>callback</code> 是可见性变化时的回调函数，<code>option</code> 是配置对象（该参数可选）</p><p>构造函数的返回值是一个观察器实例。实例的 <code>observe</code> 方法可以指定观察哪个 DOM 节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开始观察</span></span><br><span class="line">io.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;example&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止观察</span></span><br><span class="line">io.<span class="title function_">unobserve</span>(element)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭观察器</span></span><br><span class="line">io.<span class="title function_">disconnect</span>()</span><br></pre></td></tr></table></figure><h3 id="callback-参数"><a href="#callback-参数" class="headerlink" title="callback 参数"></a>callback 参数</h3><p>目标元素的可见性变化时，就会调用观察器的回调函数 <code>callback</code></p><p><code>callback</code> 一般会触发两次。一次时目标元素刚刚进入视窗（开始可见），另一次时完全离开视窗（开始不可见）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> io = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(</span><br><span class="line">    <span class="function"><span class="params">entries</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(entries)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>上面代码中，回调函数采用的是箭头函数的写法。<code>callback</code> 函数的参数（<code>entries</code>）是一个数组，每个成员都是一个 <code>IntersectionObserverEntry</code> 对象。举例来说，如果同时有两个被观察的对象的可见性发生变化，<code>entries</code>数组就会有两个成员。 </p><h3 id="IntersectionObserverEntry-对象"><a href="#IntersectionObserverEntry-对象" class="headerlink" title="IntersectionObserverEntry 对象"></a>IntersectionObserverEntry 对象</h3><p><code>IntersectionObserverEntry</code> 对象提供目标元素的信息，一共有六个属性</p><ul><li>time: 可见性发生变化的时间，单位毫秒</li><li>target：被观察的目标，是个 DOM 节点对象</li><li>rootBounds：根元素的矩形区域的信息，getBoundingClientRect() 方法的返回值，如果没有根元素（即直接相对于视窗滚动），则返回null</li><li>boundingClientRect：目标元素的矩形区域的信息</li><li>intersectionRect：目标元素与视窗（或根元素）的交叉区域的信息</li><li><strong>intersectionRatio</strong>：目标元素的可见比例，即 intersectionRect 占 boundingClientRect 的比例，完全可见时为1，完全不可见时小于等于 0  </li></ul><p>如图所示：</p><p><img src="https://s2.loli.net/2022/01/25/Vl6kb437ZeuMR1g.png" alt="IntersectionObserverEntry参数"></p><h3 id="兼容性如何"><a href="#兼容性如何" class="headerlink" title="兼容性如何"></a>兼容性如何</h3><p><a href="https://link.juejin.cn/?target=https://caniuse.com/%23search=IntersectionObserver">caniuse</a> 兼容性报告目前支持率是 93.67%，但是iOS的支持度要在 iOS12.2 以上，如果是iPhoneX（2018.11）之后的手机都是支持的，如果是之前的，升级系统才支持，考虑到一些人是不会升级，所以这个兼容性还不支持大众化的场景，但它的能力和性能都非常的好</p><p><img src="https://s2.loli.net/2022/01/25/BIMkEZt6X4Tjhap.png" alt="image-20220125104012150"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><a href="https://blog.azhubaby.com/2021/08/17/2021-08-17-%E9%98%BF%E9%87%8C%E3%80%81%E5%BE%97%E7%89%A9%E3%80%81%E6%B6%82%E9%B8%A6%E3%80%81%E9%80%94%E8%99%8E%E9%9D%A2%E8%AF%95%E5%BF%83%E5%BE%97/#/">面试</a>的时候被问到懒加载，我那个时候没做过相关的准备，我说不知道，途虎的面试官会引导，其实引导才能测试出一个人真正的水平，但是那个时候我竟然连 scroll 都想不起来。现在回想起来，实在是准备的方向搞错了。</p><p>说到图片懒加载，有两种方法：</p><ul><li>监听图片高度<ul><li>技术要点：监听scroll，滚动的时候遍历所有的图片，如果图片的偏移高度小于屏幕高度+滑动高度，说明已经出现在视窗，就替换图片</li><li>优点：兼容性好</li><li>缺点：单纯使用 scroll 滑动来监听高度，会引发性能问题，所以要搭配节流</li></ul></li><li>Element.getBoundingClientRect<ul><li>技术要点：与监听图片无太大区别，无非视把图片的偏移高度改成 getBoundingClientRect().top，对比每张图片的自身高度是否出现在视窗（视口）中，有就替换图片</li><li>优点：兼容性好，代码相对监听图片高度少了一些</li><li>缺点：也是使用 scroll 滑动来监听，会引发性能问题</li></ul></li><li>使用 IntersectionObserver Api<ul><li>技术要点：通过 IntersectionObserver Api 来实现，图片元素一可见就调用回调，在回调中判断元素是否可见</li><li>优点：写起来方便，性能好</li><li>缺点：兼容性适配iOS12.2以上，安卓5以上</li></ul></li></ul><p>附上线上 demo：</p><ul><li><a href="https://demo.azhubaby.com/%E6%87%92%E5%8A%A0%E8%BD%BD/index.html">scroll</a></li><li><a href="https://demo.azhubaby.com/%E6%87%92%E5%8A%A0%E8%BD%BD/getBoundingClientRect.html">getBoundingClientRect</a></li><li><a href="https://demo.azhubaby.com/%E6%87%92%E5%8A%A0%E8%BD%BD/observer.html">IntersectionObserver</a></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://segmentfault.com/a/1190000000654274">JavaScript学习总结（三）BOM和DOM详解</a></li><li><a href="https://segmentfault.com/a/1190000015961743">JS 中的offset、scroll、client总结</a></li><li><a href="https://www.ruanyifeng.com/blog/2016/11/intersectionobserver_api.html#/">IntersectionObserver API 使用教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片懒加载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署实战记录</title>
      <link href="/2022/01/16/2022-01-16-%E9%83%A8%E7%BD%B2%E5%AE%9E%E6%88%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/01/16/2022-01-16-%E9%83%A8%E7%BD%B2%E5%AE%9E%E6%88%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写博客是为了让自己不那么快忘记</p></blockquote><p>把一个 node 服务部署上线是怎么个流程？</p><p>本人在做个人公众号微信分享服务时因为看到别人的个人订阅号能突破微信认证的界限，所以也想尝试一下，结果是失败了，但是又温习了下部署的整一流程，以此记录</p><p>现在开发通过</p><p>本地部署测试</p><p>上阿里云/腾讯云开启安全组规则，开放端口（我的服务是3003）</p><p>上服务器<a href="#%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE">开放防火墙</a></p><p>用nginx 做域名映射</p><ul><li><pre><code class="nginx">server &#123;    listen 80;    server_name example.azhubaby.com;    location / &#123;        proxy_set_header   X-Real-IP $remote_addr;        proxy_set_header   Host      $http_host;        proxy_pass         http://0.0.0.0:3003;    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">完毕</span><br><span class="line"></span><br><span class="line">因为我的牵扯到微信JS-SDK，所以要去公众号配置JS安全域名</span><br><span class="line"></span><br><span class="line">此后去微信开发者工具中测试</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 防火墙配置</span><br><span class="line"></span><br><span class="line">**测试命令：**</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">telnet ip地址 端口</span><br></pre></td></tr></table></figure></code></pre></li></ul><p>在本地window系统 cmd命令窗口输入该命令。ip地址为远程服务器的公网ip地址。</p><p><strong>命令案例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet 47.102.152.19 3003</span><br></pre></td></tr></table></figure><p>查看防火墙状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld.service</span><br></pre></td></tr></table></figure><p>开启防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld.service</span><br></pre></td></tr></table></figure><p>关闭防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure><p>禁用防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br></pre></td></tr></table></figure><p>查看防火墙已开放端口列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --list-all</span><br></pre></td></tr></table></figure><p><strong>防火墙添加端口</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># firewall-cmd --permanent --add-port=3003/tcp</span></span><br><span class="line">success</span><br><span class="line">[root@localhost ~]<span class="comment"># firewall-cmd --reload</span></span><br><span class="line">success</span><br><span class="line">[root@localhost ~]<span class="comment"># firewall-cmd --list-all</span></span><br><span class="line">public (active)</span><br><span class="line">  target: default</span><br><span class="line">  icmp-block-inversion: no</span><br><span class="line">  interfaces: ens33</span><br><span class="line">  sources: </span><br><span class="line">  services: dhcpv6-client ssh</span><br><span class="line">  ports: 8080/tcp 3306/tcp</span><br><span class="line">  protocols: </span><br><span class="line">  masquerade: no</span><br><span class="line">  forward-ports: </span><br><span class="line">  source-ports: </span><br><span class="line">  icmp-blocks: </span><br><span class="line">  rich rules:</span><br></pre></td></tr></table></figure><p>防火墙关闭端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># firewall-cmd --permanent --remove-port 3003/tcp</span></span><br><span class="line">success</span><br><span class="line">[root@localhost ~]<span class="comment"># firewall-cmd --reload</span></span><br><span class="line">success</span><br><span class="line">[root@localhost ~]<span class="comment"># firewall-cmd --list-all</span></span><br><span class="line">public (active)</span><br><span class="line">  target: default</span><br><span class="line">  icmp-block-inversion: no</span><br><span class="line">  interfaces: ens33</span><br><span class="line">  sources: </span><br><span class="line">  services: dhcpv6-client ssh</span><br><span class="line">  ports: 8080/tcp</span><br><span class="line">  protocols: </span><br><span class="line">  masquerade: no</span><br><span class="line">  forward-ports: </span><br><span class="line">  source-ports: </span><br><span class="line">  icmp-blocks: </span><br><span class="line">  rich rules:</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/344784016">Linux服务器防火墙配置教程(端口关闭和放行)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0.1+0.2!==0.3，为什么？</title>
      <link href="/2022/01/09/2022-01-09-0.1+0.2!=0.3/"/>
      <url>/2022/01/09/2022-01-09-0.1+0.2!=0.3/</url>
      
        <content type="html"><![CDATA[<h2 id="先说结论"><a href="#先说结论" class="headerlink" title="先说结论"></a>先说结论</h2><p>为什么不等于？</p><p>因为浮点数表示小数的时候有精准度损失</p><h2 id="为什么会有精准度损失"><a href="#为什么会有精准度损失" class="headerlink" title="为什么会有精准度损失"></a>为什么会有精准度损失</h2><p>因为计算机硬件存储数据时，是以二进制（10101010）形式进行</p><p>比如说每个字节是 8 位，int 类型占 4 个字节，也就是 32 位精度；那么 32 位的计算机精度可以存 2 的 32次方个数据。如下图：</p><p><img src="https://s2.loli.net/2022/01/05/ImJCa2rFz6jN5vg.png" alt="例子"></p><p>每位上面可以放两个二进制数据也就是 0 或者 1；一般最高位上是符号位（1表示负数，0表示正数），所以带符号的类型数据应该是 31 个 2</p><p>2 * 2 * 2 * … * 2（31个2），加上符号范围就是 -2147483648 ~ 2147483647；当然也有无符号整形，暂不讨论</p><p>那么小数怎么存呢？小数在计算机当中叫浮点型，JS 最终会由浏览器引擎转成 C++，但是 JS 当中只有一种数值类型，那就是 number，那么 number 在 C++ 是什么类型呢；</p><p>我们暂且认为它是双精度类型，也就是 double，C++ 中占四个字节，也就是 64 位存储，整数存储参考上面即可，重点说说浮点存储</p><p>同样 64 位可分为三部分，它的制定格式是以 IEEE 754 为标准：</p><p>第一部分：符号位（S），占 1 位即第 63 位；</p><p>第二部分：指数域（E），占 11 位即 52 位到 62 位，含 52 和 62；</p><p>第三部分：尾数域（F），占 52 位即第 0 位到 51 位，含 51；</p><p><img src="https://i.loli.net/2021/07/28/bFDXJ3NcyMk6lgm.png" alt="64-bit"></p><p>如果将一个小数转换成二进制 64 位怎么表示，以 12.52571 为例</p><ul><li>先转换成二进制（十进制转换成二进制）（<a href="https://tool.oschina.net/hexconvert/">站长工具二进制转换</a>）<ul><li>12.52571 =&gt; 1100.100001101001010011101110001110010010111000011111</li></ul></li><li>将其小数点向左偏移三位<ul><li>1.100100001101001010011101110001110010010111000011111 * 2^3</li></ul></li></ul><h4 id="得出结论"><a href="#得出结论" class="headerlink" title="得出结论"></a>得出结论</h4><ol><li>因为是整数，所以符号位 S 是 0；</li><li>因为向左偏移了三位，所以 E = 1023 + 3 = 1026（转化为二进制） =&gt; 10000000010，有 11 位，不够前面补 0 <ul><li>为什么要加1023？为什么左移是加3，不是减3</li></ul></li><li>尾数是（F）（小数点后面）100100001101001010011101110001110010010111000011111；</li></ol><p>最终表示： 0 10000000010 100100001101001010011101110001110010010111000011111；</p><p>上面总长度是63位，差一位，最后面补零，即</p><p><strong>0 10000000010 1001000011010010100111011100011100100101110000111110；</strong></p><p>那么12.52571的64位计算机存储形式就是上面了；</p><h2 id="回过头看-0-1-0-2"><a href="#回过头看-0-1-0-2" class="headerlink" title="回过头看 0.1 + 0.2"></a>回过头看 0.1 + 0.2</h2><p>上面的表达可能有些疑惑，肯定的，毕竟笔者也是参考的（权当笔记，供以后温习），暂且不表；那么  0.1 和 0.2 是怎么转的</p><p>这里就有一个问题，0.1 和 0.2 转成二进制小数点后面是循环的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0.1 转化为二进制</span></span><br><span class="line"><span class="number">0.0</span> <span class="number">0011</span> <span class="number">0011</span> <span class="number">0011</span> <span class="number">0011</span>...(<span class="number">0011</span>无限循环）</span><br><span class="line"><span class="comment">// 0.2 转化为二进制</span></span><br><span class="line"><span class="number">0.0011</span> <span class="number">0011</span> <span class="number">0011</span> <span class="number">0011</span> <span class="number">0011</span>...(<span class="number">0011</span>无限循环）</span><br></pre></td></tr></table></figure><p>由于尾数只有52位（52位之后的被计算机截掉了）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E = -<span class="number">4</span>; F =<span class="number">1001100110011001100110011001100110011001100110011010</span> (<span class="number">52</span>位)</span><br><span class="line">E = -<span class="number">3</span>; F =<span class="number">1.1001100110011001100110011001100110011001100110011010</span> (<span class="number">52</span>位)</span><br></pre></td></tr></table></figure><p>要让两个数相加，首先E需要相同，于是得出下面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E = -<span class="number">3</span>; F =<span class="number">0.1100110011001100110011001100110011001100110011001101</span> (<span class="number">52</span>位) <span class="comment">//多余位截掉</span></span><br><span class="line">E = -<span class="number">3</span>; F =<span class="number">1.1001100110011001100110011001100110011001100110011010</span> (<span class="number">52</span>位)</span><br></pre></td></tr></table></figure><p>上面两个相加得出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E = -<span class="number">3</span>; F = <span class="number">10.0110011001100110011001100110011001100110011001100111</span></span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">E = -<span class="number">2</span>; F = <span class="number">1.00110011001100110011001100110011001100110011001100111</span></span><br></pre></td></tr></table></figure><p>得出的结论就是 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>^-<span class="number">2</span> * <span class="number">1.00110011001100110011001100110011001100110011001100111</span></span><br></pre></td></tr></table></figure><p>这个值转换成真值，结果为： 0.30000000000000004</p><h2 id="如何做到精准度"><a href="#如何做到精准度" class="headerlink" title="如何做到精准度"></a>如何做到精准度</h2><p>JavaScript 的类型 bigInt （ES8）中</p><p>TypeScript 也有这样的类型</p><p>有解决精准度问题的 big.js、bigInt 库</p><h2 id="同样有精准度缺失的语言"><a href="#同样有精准度缺失的语言" class="headerlink" title="同样有精准度缺失的语言"></a>同样有精准度缺失的语言</h2><p>python</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>因为 JavaScript 到最后会转换为 C++ 去执行</p><p>在 IEEE754 标准中常见的浮点数数值表示有：单精准度（32位）和双精准度（64位），JS 采用的是后者。浮点数与整数不同，一个浮点数既包含整数部分，又包含小数部分，因为其表示法的不同，需要分析为整数和小数部分，然后相加得到结果。0.1 和 0.2 先转成二进制，在转换为同一维度计算，得到二进制后，再转换为十进制后，就成了<code>0.30000000000000004</code></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端法门：自适应方案和高清方案</title>
      <link href="/2021/12/29/2021-12-22-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B3%95%E9%97%A8%EF%BC%9A%E8%87%AA%E9%80%82%E5%BA%94%E6%96%B9%E6%A1%88%E5%92%8C%E9%AB%98%E6%B8%85%E6%96%B9%E6%A1%88/"/>
      <url>/2021/12/29/2021-12-22-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B3%95%E9%97%A8%EF%BC%9A%E8%87%AA%E9%80%82%E5%BA%94%E6%96%B9%E6%A1%88%E5%92%8C%E9%AB%98%E6%B8%85%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>笔者从毕业开始做前端到现在，90% 的项目是移动端打交道，所以当简历上写了“移动H5”几个字时，必会被问到自适应方案与高清方案</p><p>”自适应“讲的是一套UI（例如750*1334），在多端下展示近乎一样的效果；而”高清“是因为 DPR 提升而所做的各种精度适配</p><p>这篇文章讲讲笔者理解的自适应方案和高清方案</p><h2 id="先说结论"><a href="#先说结论" class="headerlink" title="先说结论"></a>先说结论</h2><p><strong>自适应方案</strong></p><ul><li>rem <ul><li>适配思路<ul><li>选择一个尺寸作为设计和开发基准</li><li>定义一套适配规则，自动适配剩余的尺寸</li><li>特殊适配效果给出设计效果</li></ul></li><li>属于<strong>历史产物</strong>，CSS 视窗单位未得到主流浏览器的支持</li><li>原理<ul><li>根据视窗宽度动态调整根元素 html 的 font-size 的值</li><li>把总宽度设置为 100 份，每一份被称为一个单位 x，同时设置 <code>1rem</code> 单位为 <code>10x</code></li></ul></li><li>缺点<ul><li>需要加载 js 脚本，而且根据设备的视窗宽度进行计算，影响性能</li></ul></li><li>影响力：从2015年出世至今，在 H5 适配领域占据一定比例</li><li>相关技术库：<a href="https://github.com/amfe/lib-flexible">flexible</a>、<a href="https://github.com/songsiqi/px2rem">px2rem</a></li></ul></li><li>vw <ul><li>适配思路（如上）</li><li>原理<ul><li>利用 CSS 视窗的特性，总宽度为 <code>100vw</code>，每一份为一个单位 <code>1vw</code>，设置 <code>1rem</code> 单位为 <code>10vw</code></li></ul></li><li>缺点<ul><li>因为是根据视图的宽度计算，所以不适用平板和PC</li></ul></li><li>影响力：2018年出的方案，目前 H5 适配主流</li><li>相关技术库：<a href="https://link.zhihu.com/?target=https://github.com/evrone/postcss-px-to-viewport">postcss-px-to-viewport</a></li></ul></li><li>px + calc + clamp<ul><li>适配思路<ul><li>根据 CSS 的新特性：css变量、calc()函数、clamp()、@container函数实现</li></ul></li><li>特点<ul><li>解决了rem、vw布局的致命缺点：<strong>失去像素的完美性，而且一旦屏幕低于或高于某个阈值，通常就会出现布局的移动或文字内容的溢出</strong></li><li>大漠在2021年提出，最先进，但没看到大厂使用（clamp函数浏览器支持率暂且不高），具体可以看看大漠的这篇：<a href="https://www.w3cplus.com/css/how-to-get-a-pixel-perfect-and-linearly-scaled-ui.html">如何构建一个完美缩放的UI界面</a></li></ul></li><li>缺点<ul><li>因为方案先进，暂没看到大厂使用</li></ul></li></ul></li></ul><p><strong>高清方案</strong></p><ul><li>1 像素问题的解决方案</li><li>不同 DPR 下图片的高清解决方案</li></ul><p>综上，自适应方案是解决<strong>各终端的适配问题</strong>，高清方案是解决<strong>Retina屏的细节处理</strong></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在说移动端适配方案之前先整明白一些技术概念</p><h3 id="设备独立像素"><a href="#设备独立像素" class="headerlink" title="设备独立像素"></a>设备独立像素</h3><p>设备独立像素（DIP）=== CSS 像素 === 逻辑像素，在 Chrome 中能直接看到 375* 667</p><p><img src="https://s2.loli.net/2021/12/27/Fh24klg6fDjGEB7.png" alt="chrome中查看css像素"></p><p>当你看到设备独立像素时，不要慌，它表示 CSS 像素，而它的长宽就是在 Chrome 中所查到的。可这样记忆，“设备独立像素”，字数长，文绉绉就是 CSS 像素，也是理论上人为给定的指标，也叫逻辑像素</p><h3 id="物理像素"><a href="#物理像素" class="headerlink" title="物理像素"></a>物理像素</h3><p>物理像素可以理解为手机厂商在卖手机时宣传的分辨率，即物理像素 = 分辨率，它表示垂直和水平上所具有的像素点数</p><p>也就是说设备屏幕的水平方向上有 1920 像素点，垂直方向有 1080 像素点（假设屏幕分辨率为1920*1080），即屏幕分辨率表示物理像素，它在出厂时就定下来，单位为 pt，<code>1pt=0.376mm</code></p><p><img src="https://s2.loli.net/2021/12/27/MLvSHVK7XRxpWas.png" alt="手机分辨率"></p><p>物理像素，又被称为设备像素，即表示 设备像素 === 物理像素。可这样记忆，设备在物理世界能测量的长度</p><h3 id="DPR（Device-Pixel-Ratio）"><a href="#DPR（Device-Pixel-Ratio）" class="headerlink" title="DPR（Device Pixel Ratio）"></a>DPR（Device Pixel Ratio）</h3><p>而设备像素比（DPR）是什么？</p><p>DPR = 设备像素 / 设备独立像素，它通常与视网膜屏（Retina 屏）有关</p><p>以 iPhone7 为例子，iPhone7 的 DPR = iPhone7 物理像素 / iPhone7 设备独立像素 = 2</p><blockquote><p>宽 1334 / 667 = 2</p><p>高 750 / 375 = 2</p></blockquote><p>得到 iPhone7 的 DPR 为 2，也就是我们常说的视网膜屏幕，而这就是营销术语，它就是因为技术的进步，使得一个 CSS 像素塞入更多的物理像素</p><blockquote><p>营销术语还有哪些：农夫山泉的大自然的搬运工、元气森林的“気”</p></blockquote><p>笔者是这么记忆的：</p><ul><li><p>CSS 像素（设备独立像素）就像一个容器，以前是一比一塞入，所以 DPR 为 1，后来技术发展进步了，一个容器中能塞入更多的真实像素（物理像素）</p></li><li><p>DPR = 设备像素 / 设备独立像素</p></li><li><p>DPR = 物理像素（真实）/ CSS 像素（虚的）</p></li></ul><p>在视网膜屏幕中，以 DPR = 2 为例，把 4（2x2）个物理像素当一个 CSS 像素使用，这样让屏幕看起来更加清晰（精致），但是元素的大小（CSS像素）本身不会改变</p><p><img src="https://s2.loli.net/2021/12/27/soPJAgUTNmnF4ju.png" alt="DPR对比"></p><p>随着硬件的发展，像 iPhone13 Pro 等手机的 DPR 已经为 3，未来 DPR 突破 4 不是问题</p><p>说回来，DPR 为 2 或 3 会有什么问题？我们以 CSS 为最小单位来写代码的，展示在屏幕上也是以 CSS 为最小单位来展示，也就是说在 DPR 为 2 时，我们想要模拟 <code>1 单位物理像素</code>是做不到的（如果浏览器支持用 <code>0.5px</code> CSS 的话，可以模拟，但是DPR为 3 呢，用 <code>0.333px</code>？）；又因为手机的设备独立像素（CSS 像素）固定，使用传统静态布局（固定 px）时，会出现样式的错位</p><blockquote><p>iPhone 5/SE: 320 * 568 DPR: 2</p><p>iPhone 6/7/8: 375 * 667 DPR: 2</p><p>iPhone 6/7/8 Plus: 414* 736 DPR: 3</p><p>iPhone X: 375 * 812 DPR: 3</p></blockquote><p>所以我们要适配各终端的 CSS 像素以及不同 DPR 下，出现的 1 像素问题、图片高清问题等。随着技术的发展，前端们摆脱了 IE 的兼容，同时陷入了各大手机品牌的兼容沼泽</p><h2 id="自适应方案"><a href="#自适应方案" class="headerlink" title="自适应方案"></a>自适应方案</h2><h3 id="Rem-布局——天下第二"><a href="#Rem-布局——天下第二" class="headerlink" title="Rem 布局——天下第二"></a>Rem 布局——天下第二</h3><p>简介：rem 就是相对于根元素 html 的 font-size 来做计算 </p><p>与 rem 相关联的是 em：</p><blockquote><p>em 作为 font-size 单位时，其代表父元素的字体大小，em 作为其它属性单位时，代表自身字体大小</p><p>rem 作用于非根元素时，相对于根元素字体大小，rem 作用于根元素字体时，相对于其初始字体大小</p></blockquote><p>本质：<strong>等比缩放</strong>，是通过 JavaScript 来模拟 vw 的特性</p><p>假设将屏幕宽度平均分为 100 份，每一份的宽度用 x 表示，x = 屏幕宽度 / 100，如果将 x 作为单位，x 前面的数值就代表屏幕宽度的百分比</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">width</span>: <span class="number">50</span>x &#125; <span class="comment">/* 屏幕宽度的 50% */</span> </span><br></pre></td></tr></table></figure><p>如果想要页面元素随着屏幕宽度等比变化，我们就需要上面的 x，这个 x 就是 vw，但是 vw 是在浏览器支持后才大规模使用，在此之前，js + rem 可模拟这种效果</p><p>之前说了，rem 作用于非根元素时，相对于根元素字体大小，所以我们设置根元素单位后，非根元素使用 rem 做相对单位</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">16px</span> &#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">width</span>: <span class="number">2rem</span> &#125; <span class="comment">/* 32px */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">32px</span> &#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">width</span>: <span class="number">2rem</span> &#125; <span class="comment">/* 64px */</span></span><br></pre></td></tr></table></figure><p>问题来了，我们要获取到一个动态的根元素 font-size，并以此变化各个元素大小</p><blockquote><p>有趣的是，我司两个项目目前的做法是通过媒体查询设置根元素，分为四档，默认16px</p><p>笔者对这种做法表示不理解，原开发人员说我们这套运行了6年，UI适配也没人说什么问题。这里就有个疑问了，真的如他所说UI适配的很好吗，”媒体查询根元素+rem“也能适配好吗？是否完美呢？</p><p>后续笔者也会在 demo 中展示这种做法</p></blockquote><p>但是根元素的 font-size 怎么变化，它不可能一直是 16px，在中大屏下还可以，但是在小屏下字体就太大了，所以它的大小也应该是动态获取的。如何让其动态化，就是上文所说，让根元素的 font-size 大小恒等于屏幕宽度的 1/100</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: width / <span class="number">100</span>&#125;;</span><br></pre></td></tr></table></figure><p>如何设置 html 的字体大小恒等于屏幕宽度的百分之一呢？可以通过 js 来设置，一般需在页面 dom ready、resize 和屏幕旋转中设置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span> / <span class="number">100</span> + <span class="string">&#x27;px&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/amfe/lib-flexible/blob/2.0/index.js#L18">flexible 源码</a>就如以上思路写的</p></blockquote><p>我们设置了百分之一的宽度后，在写 css 时，就需要利用 scss/less 等 css 处理器来对 css 编译处理。假设给出的设计图为 750 * 1334，其中一个元素宽度为 200 px，根据公式：</p><p><code>width: 200 / 750 * 100 = 26.67 rem</code></p><p>在 sass 中，需要设置设计图宽度来做换算：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@use</span> <span class="string">&#x27;sass:math&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$width</span>: <span class="number">750px</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@function</span> px2rem(<span class="variable">$px</span>) &#123;</span><br><span class="line">  <span class="keyword">@return</span> #&#123;math<span class="selector-class">.div</span>($px, $width) * <span class="number">100</span>&#125;rem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面编译完后</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;<span class="attribute">width</span>: <span class="number">26.667rem</span>&#125;</span><br></pre></td></tr></table></figure><p>在不同尺寸下，它的宽度不同</p><table><thead><tr><th>机型</th><th>尺寸</th><th>width</th></tr></thead><tbody><tr><td>iPhone 5/SE</td><td>320 * 568</td><td>170 *  170</td></tr><tr><td>iPhone 6/7/8</td><td>375 * 667</td><td>200 * 200</td></tr><tr><td>iPhone 6/7/8 Plus</td><td>414 * 736</td><td>220.797 * 220.797</td></tr><tr><td>iPhone X</td><td>375 * 812</td><td>200 * 200</td></tr></tbody></table><p>效果如下（特意说明：图中演示的是引入 flexible 库，它的根元素的 font-size 为屏幕的 1/10）</p><p><img src="https://s2.loli.net/2021/12/30/xad7fIRbQUBJMth.gif" alt="rem布局"></p><p><a href="https://demo.azhubaby.com/%E8%87%AA%E9%80%82%E5%BA%94%E6%96%B9%E6%A1%88/flexible/index.html">REM 布局(flexible)demo</a></p><p>优点：rem 的兼容性能低到 ios 4.1，android 2.1</p><p>缺点：</p><ul><li><p>等比放大（可以说优点也可以理解为缺点，不同场景下使用）</p><ul><li>用户选择大屏幕有几个出发点，有些人想要更大的字体，更大的图片，有些人想要更多的内容，并不想要更大的图标</li></ul></li><li><p>字体大小不能使用 rem（一般使用媒体查询控制 font-size 大小）</p></li><li><p>在 PC 端浏览破相，一般设置一个最大宽度</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> clientWidth = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>;</span><br><span class="line">clientWidth = clientWidth &lt; <span class="number">780</span> ? clientWidth : <span class="number">780</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">style</span>.<span class="property">fontSize</span> = clientWidth / <span class="number">100</span> + <span class="string">&#x27;px&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">margin</span>: auto;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>如果用户禁止 js 怎么办？</p><ul><li><p>添加 noscripe 标签提示用户</p></li><li><p><code>&lt;noscript&gt;开启JavaScript，获得更好的体验&lt;/noscript&gt;</code></p></li><li><p>给 HTML 添加一个 默认字体大小</p></li></ul></li></ul><p>相关技术方案：flexible（<code>amfe-flexible</code> 或者 <code>lib-flexible</code>） + <code>postcss-pxtorem</code></p><h3 id="Viewport-布局——天不生我VW，适配万古如长夜"><a href="#Viewport-布局——天不生我VW，适配万古如长夜" class="headerlink" title="Viewport 布局——天不生我VW，适配万古如长夜"></a>Viewport 布局——天不生我VW，适配万古如长夜</h3><p>vw 是基于 Viewport 视窗的长度单位，这里的视窗（Viewport） 指的是浏览器可视化的区域，而这个可视区域是 window.innerWidth/window.innerHeight 的大小</p><p>根据  CSS Values and Units Module Level 4： vw 等于初始包含块（html元素）宽度的1%，也就是</p><ul><li><code>1vw</code> 等于 <code>window.innerWidth</code> 的数值的 1%</li><li><code>1vh</code> 等于 <code>window.innerHeight</code> 的数值的 1%</li></ul><p>看图理解</p><p><img src="https://s2.loli.net/2021/12/23/nXASjaI65Pbtdiu.png" alt="屏幕的宽高"></p><p>在说 rem 布局时，曾经举过 x 的例子，x 就是 vw</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* rem 方案 */</span></span><br><span class="line"><span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: width / <span class="number">100</span>&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">width</span>: <span class="number">26.67rem</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* vw 方案 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">width</span>: <span class="number">26.67vw</span> &#125;</span><br></pre></td></tr></table></figure><p>vw 还可以和 rem 方案结合，这样计算 html 字体大小就不需要 js 了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">1vw</span> &#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;<span class="attribute">width</span>: <span class="number">26.67rem</span> &#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://s2.loli.net/2022/01/27/iRu1grvwK5Hy3aT.gif" alt="vw适配"></p><p>vw 适配是 CSS 原生支持，而且目前兼容性大多数手机是支持的，也不需要加载 js ，也不会因为 js引发性能问题</p><p>vw 确实看上去很不错，但是也存在一些问题</p><ul><li>也没能很好的解决 1px 边框在高清屏下的显示问题，需要自行处理</li><li>由于 vw 方案是完全的等比缩放，在 PC 端上会破相（和 rem一样）</li></ul><p>相关技术方案：<code>postcss-px-to-viewport</code></p><p><a href="https://demo.azhubaby.com/%E8%87%AA%E9%80%82%E5%BA%94%E6%96%B9%E6%A1%88/vw/index.html">VW 布局demo</a></p><h3 id="px适配——一力降十会"><a href="#px适配——一力降十会" class="headerlink" title="px适配——一力降十会"></a>px适配——一力降十会</h3><p>不用 rem/vw，用传统的响应式布局也能在移动端布局中使用，需要设计规范</p><p>使用<strong>css 变量</strong>适配（篇幅原因暂不详细介绍，可直接看<a href="https://github.com/johanazhu/demo/blob/master/%E8%87%AA%E9%80%82%E5%BA%94%E6%96%B9%E6%A1%88/px/index.scss#L3">代码</a>）</p><p>使用场景：新闻、内容型的网站，不太适用 rem，因为大屏用户想要看到更多的内容，如网易新闻、知乎、taptap</p><p><a href="https://demo.azhubaby.com/%E8%87%AA%E9%80%82%E5%BA%94%E6%96%B9%E6%A1%88/px/index.html">PX + CSS变量 demo</a></p><h3 id="媒体查询——可有我一席？"><a href="#媒体查询——可有我一席？" class="headerlink" title="媒体查询——可有我一席？"></a>媒体查询——可有我一席？</h3><p>上文讲到我司原先H5端采用媒体查询的方式来做适配，笔者尝试复刻了下，只能说大差不差，能看出媒体查询想做成这件事，但还是心有余而力不足</p><p>采用rem、vw、px等方法能实现非标准尺寸（375 * 667设计稿）下 header 的高度为 <code>165.59px</code>，而 media 因为大屏，将根font-size 设置为17px，结果 header 的高度成为 <code>159.38px</code>（17 * 9.375rem）</p><p>如下GIF所示：</p><p><img src="https://s2.loli.net/2022/04/14/QqPdNMXZt1OGc2U.gif" alt="媒体查询布局与其他布局对比"></p><p>所以说仅用媒体查询还是差强人意</p><p><a href="https://demo.azhubaby.com/%E8%87%AA%E9%80%82%E5%BA%94%E6%96%B9%E6%A1%88/media/index.html">媒体查询布局demo</a></p><h3 id="各种适配的对比"><a href="#各种适配的对比" class="headerlink" title="各种适配的对比"></a>各种适配的对比</h3><p>vw、rem 适配的本质都是等比例缩放，px 直接写，孰优孰劣看自己</p><table><thead><tr><th></th><th>REM布局</th><th>VW布局</th><th>PX + css变量布局</th></tr></thead><tbody><tr><td>容器最小宽度</td><td>支持</td><td>不支持</td><td>支持</td></tr><tr><td>容器最大宽度</td><td>支持</td><td>不支持</td><td>支持</td></tr><tr><td>高清设备1px边框</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>容器固定纵横比</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>优点</td><td>1.老牌方案<br />2.支持高清设备1px边框时，可按以往方式直接写</td><td>1.无需引入js<br />2. 天然支持，写法规范</td><td>同VW</td></tr><tr><td>缺点</td><td>1. 需要引入 js 设置 html 的font-size<br />2. 字体大小不能使用 rem <br />3. 在 PC 端浏览会破相，一般需设置最大宽度</td><td>1.在PC端会破相<br />2.不支持老旧手机</td><td>同VW</td></tr></tbody></table><p>除此之外，还有搭配 vw 和rem 的方案</p><ul><li>给根元素大小设置随着视窗变化而变化的vw单位，动态变化各元素大小</li><li>限制根元素字体大小的最大最小值，配合body加上最大宽度和最小宽度</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rem 单位换算：定为 75px 只是方便运算，750px-75px、640-64px、1080px-108px，如此类推</span></span><br><span class="line"><span class="variable">$vm_fontsize</span>: <span class="number">75</span>; <span class="comment">// iPhone 6尺寸的根元素大小基准值</span></span><br><span class="line"><span class="keyword">@function</span> rem(<span class="variable">$px</span>) &#123;</span><br><span class="line">     <span class="keyword">@return</span> (<span class="variable">$px</span> / <span class="variable">$vm_fontsize</span> ) * <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 根元素大小使用 vw 单位</span></span><br><span class="line"><span class="variable">$vm_design</span>: <span class="number">750</span>;</span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: (<span class="variable">$vm_fontsize</span> / (<span class="variable">$vm_design</span> / <span class="number">2</span>)) * <span class="number">100vw</span>; </span><br><span class="line">    <span class="comment">// 同时，通过Media Queries 限制根元素最大最小值</span></span><br><span class="line">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">320px</span>) &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">64px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">540px</span>) &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">108px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// body 也增加最大最小宽度限制，避免默认100%宽度的 block 元素跟随 body 而过大过小</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">540px</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">320px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高清方案"><a href="#高清方案" class="headerlink" title="高清方案"></a>高清方案</h2><h3 id="1像素问题"><a href="#1像素问题" class="headerlink" title="1像素问题"></a>1像素问题</h3><p>1像素指在 Retina 屏显示 <code>1单位物理像素</code></p><p>很好理解，CSS 像素（设备独立像素）是我们人为规定的，当 DPR 为 1 时，1像素（指我们写的 CSS 像素） 等于 1物理像素；但当 DPR 为 3 时，1像素就为 3 物理像素</p><ul><li>DPR = 1，此时 1 物理像素 等于 1 CSS 像素</li><li>DPR = 2，此时 1 物理像素等于 0.5 CSS 像素<ul><li>border-width: 1px，这里的 1px 其实是 1 CSS 像素宽度，等于 2 物理像素，设计师其实想要的是 border-width: 0.5px</li></ul></li><li>DPR = 3，此时 1 物理像素等于 0.33 CSS 像素<ul><li>设计师想要的是 border-width: 0.33px</li></ul></li></ul><p><img src="https://s2.loli.net/2021/12/29/yzp1QCo4M6DHi9s.jpg" alt="1像素问题"></p><h4 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h4><p>使用 <code>0.5px</code> 。有局限性，iOS 8及以上，苹果系统支持，但是 iOS 8以下和 Android（部分低端机），会将<code>0.5px</code> 显示为 <code>0px</code></p><p>既然 1 个 CSS 像素代表 2（DPR 为2）、3（DPR为3）物理像素，设备又不认识 0.5px 的写法，那就画 1px，然后想办法将宽度减少一半 </p><h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><ul><li>渐变实现<ul><li>background-image: linear-gradient(to top, ,,,)</li></ul></li><li>使用缩放实现<ul><li>transform: scaleY(0.333)</li></ul></li><li>使用图片实现<ul><li>base64</li></ul></li><li>使用 SVG 实现<ul><li>嵌入 background url</li></ul></li><li>border-image<ul><li>低端机下支持度不好</li></ul></li></ul><p>以上都是通过 CSS 的媒体查询来实现的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">2</span>),</span><br><span class="line">    <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-device-pixel-ratio</span>: <span class="number">2</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">3</span>),</span><br><span class="line">    <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-device-pixel-ratio</span>: <span class="number">3</span>) &#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图片适配和优化"><a href="#图片适配和优化" class="headerlink" title="图片适配和优化"></a>图片适配和优化</h3><p>图像通常占据了网页上下载资源绝大部分，优化图像通常可以最大限度地减少从网站下载的字节数以及提高网站性能</p><p>通常可以，有一些通用的优化手段：为不同 DPR 屏幕提供最适合的图片尺寸</p><h2 id="各大厂商的适配分析"><a href="#各大厂商的适配分析" class="headerlink" title="各大厂商的适配分析"></a>各大厂商的适配分析</h2><p>看了不少文章，类似如：<a href="https://www.jianshu.com/p/2d2d1dfd196f">大厂是怎么做移动端适配的</a></p><p>各大厂，有用rem适配的、也有用vm适配的、也有vm+rem结合适配的，纯用 px 方案的也有</p><ul><li>新闻、社区等可阅读内容较多的场景：px+flex+百分比<ul><li>如携程、知乎、TapTap</li></ul></li><li>对视觉组件种类较多，依赖性较强的移动端页面：vw+rem<ul><li>如电商、论坛</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>rem 方案，引入 <code>amfe-flexible</code> 库</p><p>设计：设计出图是 750 * 1334，设计切好图后，上传蓝湖，按照尺寸写 px。</p><p>开发：</p><ul><li>使用 rem 方案<ul><li>引入 <code>amfe-flexible</code> 库</li><li>安装 <code>px2rem</code> 之类的 px 转 rem 工具</li><li>配置 <code>px2rem</code> </li><li>在项目中写 px ，输出时是 rem</li><li>适用任何场景</li></ul></li><li>使用 vw 方案<ul><li>安装 <code>px2vw</code> 之类的 px 转 vw 工具</li><li>配置 <code>px2vw</code></li><li>在项目中写 px，输出时是 vw</li><li>适用任何场景</li></ul></li><li>使用 px 方案<ul><li>该怎么样就怎么写，不过因为有设计规划，按钮的大中小尺寸固定、icon 的尺寸有标准、TabBar 的高度也是写死的，当一切都有标准后，写页面就方便了</li><li>例如<ul><li>左边固定 100 * 50，右边 flex 布局</li><li>左边固定 100 * 50，右边 calc(100% - 100px)（使用 CSS3 中的 calc 计算）</li></ul></li></ul></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="https://caniuse.com/">caniuse</a> 网站测试CSS属性与浏览器的兼容性问题</p><h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><p>Q：<a href="https://www.zhihu.com/question/275803537/answer/383675406">为什么 H5 移动端UI库单位大都是用 px？这样不会有适配问题吗？</a></p><p>其实我们写好 px 后，如果项目采用 rem 写业务，引入 <a href="https://github.com/songsiqi/px2rem">px2rem</a>（已经六年没有维护了） 即可转换。</p><p>在有赞 vant 库中，它对浏览器适配的介绍是：</p><blockquote><p>Viewport 布局</p><p>Vant 默认使用 <code>px</code> 作为样式单位，如果需要使用 <code>viewport</code> 单位（vw、vh、vmin、vmax），推荐使用 postcss-px-to-viewport 进行转换</p><p>postcss-px-to-viewport 是一款 PostCSS 插件，用于将 px 单位转化为 vw/vh 单位</p><p>Rem 布局</p><p>如果需要使用 <code>rem</code> 单位进行适配，推荐使用以下两个工具：</p><ul><li>postcss-pxtorem 是一款 PostCSS 插件，用于将 px 单位转化为 rem 单位</li><li>lib-flexible 用于设置 rem 基准值</li></ul></blockquote><p>demo 合集：<a href="https://demo.azhubaby.com/">线上demo</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/chokcoco/cnblogsArticle/issues/25">前端基础知识概述 – 移动端开发的屏幕、图像、字体与布局的兼容适配</a></li><li><a href="https://yanhaijing.com/css/2017/09/29/principle-of-rem-layout/">Rem布局的原理解析</a></li><li><a href="https://juejin.cn/post/6844903571129892878">再谈Retina下1px的解决方案</a></li><li><a href="https://www.w3cplus.com/css/vw-for-layout.html">再聊移动端页面的适配</a></li><li><a href="https://juejin.cn/post/6844903571096338439">如何在Vue项目中使用vw实现移动端适配</a></li><li><a href="https://www.cnblogs.com/imwtr/p/9648233.html">细说移动端 经典的 REM 布局 与 新秀 VW 布局</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 移动端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何修改node_module中的源码</title>
      <link href="/2021/12/28/2021-12-28-%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9node_module%E4%B8%AD%E7%9A%84%E6%BA%90%E7%A0%81/"/>
      <url>/2021/12/28/2021-12-28-%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9node_module%E4%B8%AD%E7%9A%84%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p><code>patch-package</code></p><p><a href="https://juejin.cn/post/6844904163558555662">https://juejin.cn/post/6844904163558555662</a></p><p>修改nodejs项目中node_modules的代码，不能生效吗？</p><p><a href="https://www.zhihu.com/question/302249432">https://www.zhihu.com/question/302249432</a></p><p><a href="https://segmentfault.com/q/1010000010672361">https://segmentfault.com/q/1010000010672361</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搞轮子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搞轮子：SortBar排序栏的升级</title>
      <link href="/2021/12/23/2021-12-23-%E6%90%9E%E8%BD%AE%E5%AD%90%EF%BC%9ASortBar%E6%8E%92%E5%BA%8F%E6%A0%8F%E7%9A%84%E5%8D%87%E7%BA%A7/"/>
      <url>/2021/12/23/2021-12-23-%E6%90%9E%E8%BD%AE%E5%AD%90%EF%BC%9ASortBar%E6%8E%92%E5%BA%8F%E6%A0%8F%E7%9A%84%E5%8D%87%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在此之前，曾经写过两篇关于组件嵌套关系的组件文章：</p><p><a href="https://blog.azhubaby.com/2021/11/29/2021-11-29-%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%9A%E4%BB%8E%E4%B8%9A%E5%8A%A1%E5%88%B0%E7%BB%84%E4%BB%B6Tabs/">搞轮子：从业务到组件Tabs</a></p><p><a href="https://blog.azhubaby.com/2021/12/09/2021-12-09-%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%9ATabBar%E6%A0%87%E7%AD%BE%E6%A0%8F%E7%9A%84%E8%87%AA%E6%95%91/">搞轮子：TabBar标签栏的自救</a></p><p>Tabs 组件首次使用 React.Children.map 来”解构“子组件，释放子组件写法</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Tabs</span> value=&#123;value&#125; swipeable&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Tabs.Panel</span> <span class="attr">title</span>=<span class="string">&quot;标签1&quot;</span>&gt;</span>内容 1<span class="tag">&lt;/<span class="name">Tabs.Panel</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Tabs.Panel</span> <span class="attr">title</span>=<span class="string">&quot;标签2&quot;</span>&gt;</span>内容 2<span class="tag">&lt;/<span class="name">Tabs.Panel</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Tabs.Panel</span> <span class="attr">title</span>=<span class="string">&quot;标签3&quot;</span>&gt;</span>内容 3<span class="tag">&lt;/<span class="name">Tabs.Panel</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Tabs.Panel</span> <span class="attr">title</span>=<span class="string">&quot;标签4&quot;</span>&gt;</span>内容 4<span class="tag">&lt;/<span class="name">Tabs.Panel</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Tabs</span>&gt;</span><br></pre></td></tr></table></figure><p>TabBar 组件再次基础上，又使用了 React.cloneElement，使组件的状态变化由父组件提供</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">TabBar</span></span><br><span class="line">    activeKey=&#123;activeKey&#125;</span><br><span class="line">    onChange=&#123;<span class="function">(<span class="params">key: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setActiveKey</span>(key);</span><br><span class="line">    &#125;&#125;</span><br><span class="line">    &gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">TabBar.Item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">itemKey</span>=<span class="string">&quot;home&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">title</span>=<span class="string">&quot;主页&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">icon</span>=<span class="string">&#123;</span>&lt;<span class="attr">IconTabbarHome</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">TabBar.Item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">itemKey</span>=<span class="string">&quot;financial&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">title</span>=<span class="string">&quot;理财&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">icon</span>=<span class="string">&#123;</span>&lt;<span class="attr">IconTabbarFinancial</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">TabBar.Item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">itemKey</span>=<span class="string">&quot;user&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">title</span>=<span class="string">&quot;我的&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">icon</span>=<span class="string">&#123;</span>&lt;<span class="attr">IconTabbarUser</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line">&lt;/<span class="title class_">TabBar</span>&gt;</span><br></pre></td></tr></table></figure><p>TabBar 是底部的菜单栏，有选中和非选择两种状态，所以要给父组件设置”当前选中项“，每个子组件设置唯一标识符，这样才能判断那个元素被选中了</p><p>而今天说的 SortBar 状态变为三种，分别为未选择，降序、升序</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>我们要做成什么样子呢？如下图所示：</p><p><img src="https://s2.loli.net/2021/12/23/83ZaikEOqKB6vyG.png" alt="image-20211223091530386"></p><p>有筛选、和三个有状态的子组件。其实和 TabBar 组件很像，无非是多了<strong>筛选组件</strong>，<strong>把两种状态改为三种</strong></p><p>先看书写结构：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> &lt;<span class="title class_">SortBar</span></span><br><span class="line">     activeKey=&#123;activeKey&#125;</span><br><span class="line">     onChange=&#123;<span class="function">(<span class="params">key: <span class="built_in">string</span>, status: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setActiveKey</span>(key);</span><br><span class="line">    &#125;&#125;</span><br><span class="line">     onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击筛选&#x27;</span>);</span><br><span class="line">    &#125;&#125;</span><br><span class="line">     &gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">SortBar.Item</span> <span class="attr">title</span>=<span class="string">&quot;年化&quot;</span> <span class="attr">itemKey</span>=<span class="string">&quot;annualized&quot;</span> /&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">SortBar.Item</span> <span class="attr">title</span>=<span class="string">&quot;期限&quot;</span> <span class="attr">itemKey</span>=<span class="string">&quot;term&quot;</span> /&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">SortBar.Item</span> <span class="attr">title</span>=<span class="string">&quot;价格&quot;</span> <span class="attr">itemKey</span>=<span class="string">&quot;price&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">SortBar</span>&gt;</span><br></pre></td></tr></table></figure><p>和 TabBar 可以说一摸一样，其中 <code>onClick</code> 是针对点击筛选组件的，其核心思路和 TabBar一样，核心代码是：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> items = <span class="title class_">React</span>.<span class="property">Children</span>.<span class="title function_">map</span>(children, <span class="function">(<span class="params">element, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">React</span>.<span class="title function_">isValidElement</span>(element)) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">cloneElement</span>(element, &#123;</span><br><span class="line">        <span class="attr">key</span>: index,</span><br><span class="line">        <span class="attr">title</span>: element.<span class="property">props</span>.<span class="property">title</span>,</span><br><span class="line">        <span class="attr">itemKey</span>: element.<span class="property">props</span>.<span class="property">itemKey</span> || index,</span><br><span class="line">        <span class="attr">selected</span>: activeKey === element.<span class="property">props</span>.<span class="property">itemKey</span>,</span><br><span class="line">        <span class="attr">onClick</span>: <span class="function">(<span class="params">status: <span class="built_in">string</span></span>) =&gt;</span></span><br><span class="line">        <span class="title function_">onHandleClick</span>(element.<span class="property">props</span>.<span class="property">itemKey</span>, status),</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>React.Children 遍历子元素</p><p>React.isValidElement 判断子元素是否是 React 元素</p><p>cloneElement 在原来的子组件上添加其他元素</p><ul><li>selected：新添加的元素，判断当前选中key和自身的 key 是否是同一个</li><li>onClick：点击的时候哪个key，什么status（状态）传给父元素，好让父元素做业务处理</li></ul><p>选中和未选中此子组件由父组件控制，而选中此子组件的状态则在子组件中完成，请看代码：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Item</span>: <span class="variable constant_">FC</span>&lt;<span class="title class_">SortBarItemProps</span>&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; title, selected, onClick &#125; = props;</span><br><span class="line">    <span class="keyword">const</span> [status, setStatus] = <span class="title function_">useState</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (selected === <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="title function_">setStatus</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, [selected]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">onHandleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (status === <span class="string">&#x27;0&#x27;</span> || status === <span class="string">&#x27;2&#x27;</span>) &#123;</span><br><span class="line">            <span class="title function_">setStatus</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">            onClick &amp;&amp; <span class="title function_">onClick</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status === <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">            <span class="title function_">setStatus</span>(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">            onClick &amp;&amp; <span class="title function_">onClick</span>(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">prefixCls</span>&#125;`&#125; <span class="attr">onClick</span>=<span class="string">&#123;onHandleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;title&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;status === &#x27;0&#x27; &amp;&amp; <span class="tag">&lt;<span class="name">IconFilterEmty</span> <span class="attr">size</span>=<span class="string">&quot;sm&quot;</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;status === &#x27;1&#x27; &amp;&amp; <span class="tag">&lt;<span class="name">IconFilterDown</span> <span class="attr">size</span>=<span class="string">&quot;sm&quot;</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;status === &#x27;2&#x27; &amp;&amp; <span class="tag">&lt;<span class="name">IconFilterUp</span> <span class="attr">size</span>=<span class="string">&quot;sm&quot;</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>默认为都未选择，当点击后改变状态。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这一些告一段落，已经没什么好讲的了</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搞轮子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>知识点：preventDefault、stopPropagation</title>
      <link href="/2021/12/17/2021-12-17-%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9ApreventDefault%E3%80%81stopPropagation/"/>
      <url>/2021/12/17/2021-12-17-%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9ApreventDefault%E3%80%81stopPropagation/</url>
      
        <content type="html"><![CDATA[<p>JavaScript 冒泡和捕获是两种事件行为，使用 <code>event.stopPropagation()</code> 能起到阻止捕获和冒泡阶段中当前事件的进一步传播，使用 <code>event.preventDefault()</code> 可以取消默认事件</p><h2 id="防止冒泡和捕获"><a href="#防止冒泡和捕获" class="headerlink" title="防止冒泡和捕获"></a>防止冒泡和捕获</h2><p>w3c 的方法是 e.stopPropagation()，IE则是使用 e.cancelBubble = true</p><h2 id="取消默认事件"><a href="#取消默认事件" class="headerlink" title="取消默认事件"></a>取消默认事件</h2><p>w3c 的方法是 e.preventDefault()，IE则是使用 e.returnValue = false</p><p> preventDefault 及 stopPropagation</p><p>preventDefault 阻止元素的默认特性</p><p>stopPropagation 禁止冒泡</p><p>event.stopPropagation 阻止捕获和冒泡阶段</p><p>event.preventDefault 取消默认事件</p><p><a href="http://caibaojian.com/javascript-stoppropagation-preventdefault.html">http://caibaojian.com/javascript-stoppropagation-preventdefault.html</a></p><p><a href="https://segmentfault.com/a/1190000008227026">https://segmentfault.com/a/1190000008227026</a></p><p>Unable to preventDefault inside passive event listener invocation</p><p>addEventListener 不为人知的第三个参数 useCapture</p><p><a href="https://juejin.cn/post/6844903593024159752">https://juejin.cn/post/6844903593024159752</a></p><p>[筆記][JavaScript]所謂的「停止事件」到底是怎麼一回事？</p><p><a href="https://ithelp.ithome.com.tw/articles/10198999">https://ithelp.ithome.com.tw/articles/10198999</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener#%E4%BD%BF%E7%94%A8_passive_%E6%94%B9%E5%96%84%E7%9A%84%E6%BB%9A%E5%B1%8F%E6%80%A7%E8%83%BD">https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener#%E4%BD%BF%E7%94%A8_passive_%E6%94%B9%E5%96%84%E7%9A%84%E6%BB%9A%E5%B1%8F%E6%80%A7%E8%83%BD</a></p><p>在 react 如何解决</p><p>react 的事件是自己写的</p><p>在 组件中如何解决</p><p>{passive: true} 有什么用</p><h2 id="如何查看web元素绑定的监听事件"><a href="#如何查看web元素绑定的监听事件" class="headerlink" title="如何查看web元素绑定的监听事件"></a>如何查看web元素绑定的监听事件</h2><p><a href="https://cloud.tencent.com/developer/article/1705416">https://cloud.tencent.com/developer/article/1705416</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搞轮子：不依赖外部DIY Toast 需要考虑什么</title>
      <link href="/2021/12/14/2021-12-14-%E6%90%9E%E8%BD%AE%E5%AD%90%EF%BC%9A%E4%B8%8D%E4%BE%9D%E8%B5%96%E5%A4%96%E9%83%A8DIY%20Toast%20%E9%9C%80%E8%A6%81%E8%80%83%E8%99%91%E4%BB%80%E4%B9%88/"/>
      <url>/2021/12/14/2021-12-14-%E6%90%9E%E8%BD%AE%E5%AD%90%EF%BC%9A%E4%B8%8D%E4%BE%9D%E8%B5%96%E5%A4%96%E9%83%A8DIY%20Toast%20%E9%9C%80%E8%A6%81%E8%80%83%E8%99%91%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<p>mask（遮罩）</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="variable constant_">FC</span>, memo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> classnames <span class="keyword">from</span> <span class="string">&#x27;classnames&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MaskProps</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./PropType&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> prefixCls = <span class="string">&#x27;jing-mask&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Mask</span>: <span class="variable constant_">FC</span>&lt;<span class="title class_">MaskProps</span>&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; className, <span class="keyword">type</span>, visible, style, onClick &#125; = props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> classes = <span class="title function_">classnames</span>(className, prefixCls, &#123;</span><br><span class="line">        [<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>--<span class="subst">$&#123;<span class="keyword">type</span>&#125;</span>`</span>]: !!<span class="keyword">type</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> visible ? (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;classes&#125;</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span> /&gt;</span></span></span><br><span class="line">    ) : <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Mask</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;normal&#x27;</span>,</span><br><span class="line">    <span class="attr">visible</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">Mask</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>缺点在于它</p><p>前提</p><p>animation(transition) 组件</p><p>mask（遮罩）组件（搞定）</p><p>portal 组件</p><p>最简单版本的</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="variable constant_">FC</span>, useState, useEffect, memo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createPortal &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PortalProps</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./PropType&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Portal</span>: <span class="variable constant_">FC</span>&lt;<span class="title class_">PortalProps</span>&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; children, container, className &#125; = props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> [containerEl] = <span class="title function_">useState</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        el.<span class="property">className</span> += <span class="string">`jing-portal__container <span class="subst">$&#123;className&#125;</span>`</span>;</span><br><span class="line">        <span class="keyword">return</span> el;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(container || containerEl);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(containerEl);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;, []);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">createPortal</span>(children, containerEl);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">Portal</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>定位 popup，弹出层</p><p>popup 组件</p><p>使用方式</p><p>当作静态函数使用</p><p>Toast(…)</p><p>Toast.loading()</p><p>组件本身要考虑什么功能</p><p>遮罩（mask）、内容（message）、是否禁止背景点击（forbidClick），支持自定义图标（icon）、自定义出现的位置（position）、是否在点击遮罩层后关闭（closeOnClickOverlay）</p><p>展示时长（duration）、关闭时的回调函数（onClose）</p><p>提供 Toast.success 表示成功，</p><p>Toast.fail 表示失败</p><p>Toast.loading 表示加载</p><p>单例模式</p><p>allowMultiple</p><p>梳理一下</p><p>Toast的基础是 Popup，Popup的基础是 Mask 和 Portal</p><p>Popup要做的就是弹出层，属于基础组件</p><p>Modal 要做之前 popup.alert 之类的事情（Vant 是 Dialog）</p><p>Toast 要实例化</p><p>无论是 Toast 还是 Modal 都需要使用静态方法调用</p><p>Modal 可以大写</p><p>popup 和 portal 放一起</p><p>不可见的时候看不到元素，</p><p>可见的时候渲染元素</p><p>动画</p><p>react-transition-group 和 portal 的结合</p><p>因为 portal 是return 出的组件，所以不会有动画 </p><p>需要做 animation</p><p><a href="https://stackoverflow.com/questions/54672784/animating-react-transition-group-with-reactdom-createportal">https://stackoverflow.com/questions/54672784/animating-react-transition-group-with-reactdom-createportal</a></p><p>有人说给他加 animationDuration</p><p><a href="https://codesandbox.io/s/stupefied-bouman-ehszt?file=/src/components/Portal/index.js:517-526">https://codesandbox.io/s/stupefied-bouman-ehszt?file=/src/components/Portal/index.js:517-526</a></p><p>一定会有 div</p><p>节点从有到无</p><p><img src="C:/Users/hanbo/AppData/Roaming/Typora/typora-user-images/image-20211215181234263.png" alt="image-20211215181234263"></p><p>animatedVisible 成为 true，显示Portal 组件，先渲染父组件，再渲染子组件</p><p>先执行</p><p>破除魔咒，取消</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    mountContainer?.<span class="title function_">appendChild</span>(containerEl)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        mountContainer?.<span class="title function_">removeChild</span>(containerEl);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><p>react-transition-group 的用法</p><p><a href="http://reactcommunity.org/react-transition-group/transition#Transition-prop-onExited">http://reactcommunity.org/react-transition-group/transition#Transition-prop-onExited</a></p><p>Toast 不是一个组件，而是一个 ”方法“， <code>Toast(&quot;提示内容&quot;)</code></p><p>怎么把一个 <code>&lt;Toast&gt;提示文字&lt;Toast&gt;</code> 写法的组件改造成  <code>Toast(&quot;提示内容&quot;)</code></p><p>查看了别人做的 Toast，</p><p>先做个 React 版本的 Toast，即组件时写法，然后再将它作为基础组件使用，怎么使用，</p><p>生成一个 div（document.createElement(‘div’)）</p><p>插入 dom 中(bodyContainer.appendChild(container))</p><p>ReactDOM.render() 渲染它</p><p>我们先完成 Toast 组件</p><p>Toast.loading()</p><p>需要完成 loading 组件</p><p>loading 之后</p><p>要 useloading</p><p>show</p><p>hide</p><p>目的是把它当作一个静态函数使用</p><p> Loading.</p><p> const loading = Loading.useLoading();</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Button</span></span><br><span class="line">    size=<span class="string">&quot;xs&quot;</span></span><br><span class="line">    onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        loading.<span class="title function_">show</span>();</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            loading.<span class="title function_">hide</span>();</span><br><span class="line">        &#125;, <span class="number">3000</span>);</span><br><span class="line">    &#125;&#125;</span><br><span class="line">    &gt;</span><br><span class="line">    开启</span><br><span class="line">&lt;/<span class="title class_">Button</span>&gt;</span><br></pre></td></tr></table></figure><p>这里有个思考角度，loading 需不需要被 popup 包裹，我的想法是按照实际需求来做组件，我们可以做成像弹出层那样，但是 loading 的用法，一般是作为 Toast 的子组件来使用，所以这里，useLoading 对我们不适用</p><p>当然，做这个是为了铺垫 useToast，它也需要具备 Toast.show() 的用法</p><p>show 的时候 ReactDOM.render 过程</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搞轮子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搞轮子：TabBar标签栏的自救</title>
      <link href="/2021/12/09/2021-12-09-%E6%90%9E%E8%BD%AE%E5%AD%90%EF%BC%9ATabBar%E6%A0%87%E7%AD%BE%E6%A0%8F%E7%9A%84%E8%87%AA%E6%95%91/"/>
      <url>/2021/12/09/2021-12-09-%E6%90%9E%E8%BD%AE%E5%AD%90%EF%BC%9ATabBar%E6%A0%87%E7%AD%BE%E6%A0%8F%E7%9A%84%E8%87%AA%E6%95%91/</url>
      
        <content type="html"><![CDATA[<p>说到 TabBar 标签栏，我们自然会想到放在 App 底部的标签栏。同时，因为之前开发 Tabs 标签页时，曾经写过一篇文章（ <a href="https://blog.azhubaby.com/2021/11/29/2021-11-29-%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%9A%E4%BB%8E%E4%B8%9A%E5%8A%A1%E5%88%B0%E7%BB%84%E4%BB%B6Tabs/">组件开发：从业务到组件Tabs</a> ），讲诉开发 Tabs 的问题和困难。现在遇到的 TabBar 与之大差不差，为什么还要写一篇呢？</p><p>原因有二：一是为回顾知识，二是 TabBar 有必要写的知识点</p><p>无论是 Tabs 还是 TabBar 组件，都采用父组件控制标签和改变标签，子项提供具体内容的形式</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Tabs</span></span><br><span class="line">&lt;<span class="title class_">Tabs</span> value=&#123;value&#125;</span><br><span class="line">    onChange=&#123;<span class="function">(<span class="params">index</span>) =&gt;</span> &#123;</span><br><span class="line">        index &amp;&amp; <span class="title function_">setValue</span>(index);</span><br><span class="line">    &#125;&#125;</span><br><span class="line">    &gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Tabs.Panel</span> <span class="attr">title</span>=<span class="string">&quot;标签1&quot;</span>&gt;</span>内容 1<span class="tag">&lt;/<span class="name">Tabs.Panel</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Tabs.Panel</span> <span class="attr">title</span>=<span class="string">&quot;标签2&quot;</span>&gt;</span>内容 2<span class="tag">&lt;/<span class="name">Tabs.Panel</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Tabs.Panel</span> <span class="attr">title</span>=<span class="string">&quot;标签3&quot;</span>&gt;</span>内容 3<span class="tag">&lt;/<span class="name">Tabs.Panel</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Tabs</span>&gt;</span><br><span class="line"><span class="comment">// TabBar</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">TabBar</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">activeKey</span>=<span class="string">&#123;activeKey&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">onChange</span>=<span class="string">&#123;(key:</span> <span class="attr">any</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">        setActiveKey(key);</span></span><br><span class="line"><span class="language-xml">    &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    &gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">TabBar.Item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">itemKey</span>=<span class="string">&quot;home&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">title</span>=<span class="string">&quot;主页&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">icon</span>=<span class="string">&#123;</span>&lt;<span class="attr">IconTabbarHome</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">TabBar.Item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">itemKey</span>=<span class="string">&quot;financial&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">title</span>=<span class="string">&quot;理财&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">icon</span>=<span class="string">&#123;</span>&lt;<span class="attr">IconTabbarFinancial</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">TabBar.Item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">itemKey</span>=<span class="string">&quot;user&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">title</span>=<span class="string">&quot;我的&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">icon</span>=<span class="string">&#123;</span>&lt;<span class="attr">IconTabbarUser</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">TabBar</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="思绪源码"><a href="#思绪源码" class="headerlink" title="思绪源码"></a>思绪源码</h2><p>他们都用了 <code>React.Children</code> ，这是我们要回顾的。</p><blockquote><p>官网：<code>React.Children</code> 提供了用于处理 <code>this.props.children</code> 不透明数据结构的实用方法。</p></blockquote><p>而 TabBar 不同的是，他多了 <code>React.cloneElement</code> 和 <code>React.isValidElement</code></p><p><code>React.cloneElement</code> 介绍</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">React</span>.<span class="title function_">cloneElement</span>(</span><br><span class="line">  element,</span><br><span class="line">  [config],</span><br><span class="line">  [...children]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>官网：以 element 元素为样板克隆并返回新的 React 元素，config 中应包含新的 props，key 或 ref 。返回元素的 props 是将新的 props 与原始元素的 props 浅层合并后的结果。新的子元素将取代现有的子元素，如果在 config 中未出现 key 或 ref，那么原始元素的 key 和 ref 将被保留</p></blockquote><p>简单来说，他是个拷贝API，一般与 <code>React.Children</code> 配合，在原 <code>children</code> 上加上其他属性</p><p><code>React.isValidElement</code> 介绍</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">React</span>.<span class="title function_">isValidElement</span>(object)</span><br></pre></td></tr></table></figure><blockquote><p>官网：验证对象是否为 React 对象，返回值为 true 或 false</p></blockquote><p>回过头看 TabBar。我们要做的是，不仅要赋予 TabBar.Item 本来就要有的属性，而且要多给它几个属性，如：</p><ul><li>selected：判断它是否被选中。因为 TabBar 控制选择的 key</li><li>onChange：点击后的回调，这里要做”是否能切换标签“的判断，所以要处理</li></ul><p>结合三个 React 的顶层 API 后的代码：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> items = <span class="title class_">React</span>.<span class="property">Children</span>.<span class="title function_">map</span>(children, <span class="function">(<span class="params">element, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">React</span>.<span class="title function_">isValidElement</span>(element)) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">cloneElement</span>(element, &#123;</span><br><span class="line">        <span class="attr">key</span>: index,</span><br><span class="line">        <span class="attr">title</span>: element.<span class="property">props</span>.<span class="property">title</span>,</span><br><span class="line">        <span class="attr">icon</span>: element.<span class="property">props</span>.<span class="property">icon</span>,</span><br><span class="line">        <span class="attr">itemKey</span>: element.<span class="property">props</span>.<span class="property">itemKey</span> || index,</span><br><span class="line">        <span class="attr">className</span>: element.<span class="property">props</span>.<span class="property">className</span>,</span><br><span class="line">        <span class="attr">style</span>: element.<span class="property">props</span>.<span class="property">style</span>,</span><br><span class="line">        <span class="attr">selected</span>: <span class="title function_">getSelected</span>(index, element.<span class="property">props</span>.<span class="property">itemKey</span>),</span><br><span class="line">        <span class="attr">onChange</span>: <span class="function">() =&gt;</span> <span class="title function_">onChildChange</span>(element.<span class="property">props</span>.<span class="property">itemKey</span>),</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>具体代码可以去看 jing-ui 的源代码，这里做分析，先把它所有的子项都遍历，判断它是否是 React 元素，如果不是，返回 null，如果是拷贝子项原来的数据，并给予两个新的 props。其中 getSelected 代码如下：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getSelected</span> = (<span class="params">index: <span class="built_in">number</span>, itemKey: <span class="built_in">string</span> | <span class="built_in">number</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!activeKey) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!defaultActiveKey &amp;&amp; index === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> defaultActiveKey === itemKey;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> activeKey === itemKey;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>传入当前子项的索引值以及子项（TabBar.Item）的 itemKey 值，判断 TabBar 的 属性 activeKey 是否不存在，再判断 defaultActiveKey是否有或者索引值是否为0，如果都满足，说明默认选中的key没有，那就赋予第一个子项选中；如果 defaultActiveKey 有，就与 itemKey 匹配；再如果 activeKey 存在，就让它与 itemKey 匹配。其实看代码就能明白</p><p>onChildChange 代码：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">onChildChange</span> = (<span class="params">value: <span class="built_in">string</span> | <span class="built_in">number</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isFunction</span>(beforeChange)) &#123;</span><br><span class="line">        <span class="keyword">let</span> canClick = <span class="title function_">beforeChange</span>(value);</span><br><span class="line">        <span class="keyword">if</span> (canClick) &#123;</span><br><span class="line">            canClick.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> onChange === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">                    <span class="title function_">onChange</span>(value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isFunction</span>(onChange)) &#123;</span><br><span class="line">        <span class="title function_">onChange</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>beforeChange 属性指：切换标签前的回调函数，返回 false 课阻止切换</p><h2 id="安全区域的解决"><a href="#安全区域的解决" class="headerlink" title="安全区域的解决"></a>安全区域的解决</h2><p>两种方案</p><p>一是塞 <code>padding-bottom</code> 样式</p><ul><li><pre><code class="css">.jing-safe-area-bottom &#123;    padding-bottom: constant(safe-area-inset-bottom);    padding-bottom: env(safe-area-inset-bottom);&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 这个方法在 TabBar 上无效，因为 TabBar 注定是底部固定的</span><br><span class="line"></span><br><span class="line">二是包个容器，给它一个 height</span><br><span class="line"></span><br><span class="line">- ```css</span><br><span class="line">  .iphonex-extra-height &#123;</span><br><span class="line">      height: constant(safe-area-inset-bottom);</span><br><span class="line">      height: env(safe-area-inset-bottom);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>这个方法解决了</p></li></ul><p>在 props 上我们相对应提供 </p><ul><li>enableSafeArea：是否开启底部安全区适配，设置 fixed 时默认开启 </li><li>fixed：是否固定在底部，默认固定</li></ul><p>具体代码如下：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">enableSafeArea</span> = (<span class="params"></span>) =&gt; safeAreaInsetBottom ?? fixed;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">enableSafeArea</span>()) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &#123;<span class="comment">/* 提供父容器包裹 */</span>&#125;</span><br><span class="line">        &lt;div className=&#123;<span class="title function_">classnames</span>(<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-container`</span>)&#125;&gt;</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;classnames(prefixCls,</span> <span class="attr">className</span>)&#125;&gt;</span>&#123;items&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;jing-iphonex-extra-height&quot;</span> /&gt;</span></span></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>TabBar 与 Tabs 的不同之处在于，它用了 React.cloneElement，赋予了 （TabBar 中的）children 新的属性，这样我们就能再 TabBar 上控制它是否在切换前使用回调函数，方便我们后续实际业务中的操作</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搞轮子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从 Redux 说起，到手写，再到状态管理</title>
      <link href="/2021/12/06/2021-12-07-%E4%BB%8ERedux%E8%AF%B4%E8%B5%B7%EF%BC%8C%E5%88%B0%E6%89%8B%E5%86%99%EF%BC%8C%E5%86%8D%E5%88%B0%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
      <url>/2021/12/06/2021-12-07-%E4%BB%8ERedux%E8%AF%B4%E8%B5%B7%EF%BC%8C%E5%88%B0%E6%89%8B%E5%86%99%EF%BC%8C%E5%86%8D%E5%88%B0%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>学习一个东西之前，首先在大脑中积累充分的“疑惑感”。即弄清面临的问题到底是什么，再浏览方法本身之前，最好先使劲问问都想到什么方法。一个公认的事实是，你对问题的疑惑越大，在之前做的自己的思考越多，当看到解答之后印象就越深刻</p></blockquote><h2 id="先说结论"><a href="#先说结论" class="headerlink" title="先说结论"></a>先说结论</h2><ol><li>Redux 是状态管理库，也是一种架构</li><li>Redux 与 React 无关，但它是为了解决 React 组件中状态无法共享而出的一种解决方案</li><li>单纯的 Redux 只是一个状态机， store 中存放了所有的状态 state，要想改变里面的状态 state，只能 dispatch 一个动作</li><li>发出去的 action 需要用 reducer 来处理，传入 state 和 action，返回新的 state</li><li>subscribe 方法可以注册回调方法，当 dispatch action 的时候会执行里面的回调</li><li>Redux 其实是一个发布订阅模式</li><li>Redux 支持 enhancer，enhancer 其实就是一个装饰器模式，传入当前的 createStore，返回一个增强的 createStore</li><li>Redux 使用 applyMiddleware 函数支持中间件，它的返回值其实就是一个 enhancer</li><li>Redux 的中间件也是一个装饰器模式，传入当前的 dispatch，返回一个增强了的 dispatch</li><li>单纯的 Redux 是没有 View 层的</li></ol><h2 id="为什么出现-Redux？"><a href="#为什么出现-Redux？" class="headerlink" title="为什么出现 Redux？"></a>为什么出现 Redux？</h2><p>我们默认使用 React 技术栈，当页面少且简单时，完全没必要使用 Redux。Redux 的出现，是为了应对复杂组件的情况。即当组件复杂到三层甚至四层时（如下图），组件 4 想改变组件 1 的状态</p><p><img src="https://i.loli.net/2021/12/01/HruEAivF4DsxNcq.png" alt="react 组件树"></p><p>按照 React 的做法，状态提升，将状态提升至同一父组件（在图中为祖父组件）。但层级一多，根组件要管理的 state 就很多了，不方便管理。</p><p>所以当初有了 context（React 0.14 确定引入），通过 context 能实现”远房组件“的数据共享。但它也有缺点，使用 context 意味着所有的组件都可以修改 context 里面的状态，就像谁都可以修改共享状态一样，导致程序运行的不可预测，这不是我们想要的</p><p>facebook 提出了 <a href="https://facebook.github.io/flux/">Flux</a> 解决方案，它引入了<a href="#%E8%A1%A5%E5%85%85%EF%BC%9A%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81">单向数据流</a>的概念（没错，React 没有单向数据流的概念，Redux 是集成了 Flux 的单向数据流理念），架构如下图所示：</p><p><img src="https://i.loli.net/2021/12/01/YzWmMoJCILsVZaE.png" alt="Flux 流程图"></p><p>这里不表 Flux。简单理解，在 Flux 架构中，View 要通过 Action （动作）通知 Dispatcher（派发器），Dispatcher 来修改 Store，Store 再修改 View</p><p>Flux 的问题或者说缺点在哪？</p><p>store 之间存在依赖关系、难以进行服务器端渲染、 stores 混杂了逻辑和状态</p><p>笔者在学习的 React 技术栈时是 2018 年，那是已然流行 React + Redux 的解决方案，Flux 已经被淘汰了，了解 Flux 是为了引出 Redux</p><h2 id="Redux-的出现"><a href="#Redux-的出现" class="headerlink" title="Redux 的出现"></a>Redux 的出现</h2><p>Redux 主要解决状态共享问题</p><blockquote><p>官网：Redux 是 JavaScript 状态容器，它提供可预测的状态管理</p><p>它的作者是 <a href="https://overreacted.io/">Dan Abramov</a></p></blockquote><p>其架构为：</p><p><img src="https://i.loli.net/2021/12/02/eFszAQYxwLNMKUt.png" alt="Redux 流程图"></p><p>可以看得出，Redux 只是一个状态机，没有 View 层。其过程可以这样描述：</p><ul><li>自己写一个 reducer（纯函数，表示做什么动作会返回什么数据）</li><li>自己写一个 initState（store 初始值，可写可不写）</li><li>通过 createStore 生成 store，此变量包含了三个重要的属性<ul><li>store.getState：得到唯一值（使用了闭包老哥）</li><li>store.dispatch：动作行为（改变 store 中数据的唯一指定属性）</li><li>store.subscribe：订阅（发布订阅模式）</li></ul></li><li>通过 store.dispatch 派发一个 action</li><li>reducer 处理 action 返回一个新的 store</li><li>如果你订阅过，当数据改变时，你会收到通知</li></ul><p>按照行为过程，我们可手写一个 Redux，下文在表，先说特点</p><h3 id="三大原则"><a href="#三大原则" class="headerlink" title="三大原则"></a>三大原则</h3><ul><li>单一数据源<ul><li>整个应用的 全局 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中</li></ul></li><li>State 是只读的<ul><li>唯一改变 state 的方法就是触发 action，action 是一个用于描述已发生时间的普通对象</li></ul></li><li>使用纯函数来执行修改<ul><li>为了描述 action 如何改变 state tree，你需要编写纯的 reducers</li></ul></li></ul><p>三大原则是为了更好地开发，按照<a href="#%E8%A1%A5%E5%85%85%EF%BC%9A%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81">单向数据流</a>的理念，行为变得可回溯</p><p>让我们动手写一个 Redux 吧</p><h2 id="手写-redux"><a href="#手写-redux" class="headerlink" title="手写 redux"></a>手写 redux</h2><p>按照行为过程和原则，我们要避免数据的随意修改、行为的可回溯等问题</p><h3 id="基础版：23-行代码让你使用-redux"><a href="#基础版：23-行代码让你使用-redux" class="headerlink" title="基础版：23 行代码让你使用 redux"></a>基础版：23 行代码让你使用 redux</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createStore</span> = (<span class="params">reducer, initState</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> state = initState;</span><br><span class="line">  <span class="keyword">let</span> listeners = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">subscribe</span> = (<span class="params">fn</span>) =&gt; &#123;</span><br><span class="line">    listeners.<span class="title function_">push</span>(fn);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">dispatch</span> = (<span class="params">action</span>) =&gt; &#123;</span><br><span class="line">    state = <span class="title function_">reducer</span>(state, action);</span><br><span class="line">    listeners.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> <span class="title function_">fn</span>());</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getState</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getState,</span><br><span class="line">    dispatch,</span><br><span class="line">    subscribe,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>搞个测试用例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../redux/index.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initState = &#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;INCREMENT&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;DECREMENT&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        <span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(reducer, initState);</span><br><span class="line"></span><br><span class="line">store.<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> state = store.<span class="title function_">getState</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;state&#x27;</span>, state);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">store.<span class="title function_">dispatch</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;INCREMENT&#x27;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>PS：俺是在 node 中使用 ES6 模块，需要升级 Node 版本至 13.2.0</p></blockquote><h3 id="第二版：难点突破：中间件"><a href="#第二版：难点突破：中间件" class="headerlink" title="第二版：难点突破：中间件"></a>第二版：难点突破：中间件</h3><p>普通的 Redux 只能做最基础地根据动作返回数据，dispatch 只是一个取数据的命令，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">dispatch</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;INCREMENT&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// store 中的 count + 1</span></span><br></pre></td></tr></table></figure><p>但在开发中，我们有时候要查看日志、异步调用、记录日常等</p><p>怎么办，做成插件</p><p>在 Redux 中，类似的概念叫中间件</p><p><img src="https://i.loli.net/2021/12/03/xqXD5ynSbl6MWVu.png" alt="中间件"></p><p>Redux 的 createStore 共有三个参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">createStore</span>([reducer], [initial state], [enhancer]);</span><br></pre></td></tr></table></figure><p>第三个参数为 enhancer，意为增强器。它的作用就是代替普通的 createStore，转变成为附加上中间件的 createStore。打几个比方：</p><ul><li>托尼·斯塔克本来是一个普通有钱人，加上增强器（盔甲）后，成了钢铁侠</li><li>中央下发一笔救灾款，加上增强器（大小官员的打点）后，到灾民手上的钱只有一丢丢</li><li>路飞用武装色打人，武装色就是一个中间件</li></ul><p>enhancer 要做的就是：<strong>东西还是那个东西，只是经过了一些工序，加强了它</strong>。这些工序由 applyMiddleware 函数完成。按照行业术语，它是一个<strong>装饰器模式</strong>。它的写法大致是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">applyMiddleware</span>(...middlewares);</span><br><span class="line"><span class="comment">// 结合 createStore，就是</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(reudcer, initState, <span class="title function_">applyMiddleware</span>(...middlewares));</span><br></pre></td></tr></table></figure><p>所以我们需要先对 createStore 进行改造，判断当有 enhancer 时，我们需传值给中间件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createStore</span> = (<span class="params">reducer, initState, enhancer</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (enhancer) &#123;</span><br><span class="line">        <span class="keyword">const</span> newCreateStore = <span class="title function_">enhancer</span>(createStore)</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">newCreateStore</span>(reducer, initState)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> state = initState;</span><br><span class="line">    <span class="keyword">let</span> listeners = [];</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有 enhancer 的话，先传入 createStore 函数，生成的 newCreateStore 和原来的 createStore 一样，会根据 reducer, initState 生成 store。可简化为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (enhancer) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">enhancer</span>(createStore)(reducer, initState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>PS：为什么要写成这样，因为 redux 是按照函数式写法来写的</p><p>为什么 createStore 可以被传值，因为函数也是对象，也可以作为参数传递（老铁闭包了）</p></blockquote><p>这样我们的 applyMiddleware 自然就明确了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">applyMiddleware</span> = (<span class="params">...middlewares</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">oldCreateStore</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">reducer, initState</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> store = <span class="title function_">oldCreateStore</span>(reducer, initState)</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 store 表示的是普通版中的 store，接下来我们要增强 store 中的属性</p><p>我愿称之为：五行代码让女人为我花了 18 万</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">applyMiddleware</span> = (<span class="params">...middlewares</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">oldCreateStore</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">reducer, initState</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> store = <span class="title function_">oldCreateStore</span>(reducer, initState);</span><br><span class="line">      <span class="comment">// 以下为新增</span></span><br><span class="line">      <span class="keyword">const</span> chain = middlewares.<span class="title function_">map</span>(<span class="function">(<span class="params">middleware</span>) =&gt;</span> <span class="title function_">middleware</span>(store));</span><br><span class="line">      <span class="comment">// 获得老 dispatch</span></span><br><span class="line">      <span class="keyword">let</span> dispatch = store.<span class="property">dispatch</span>;</span><br><span class="line">      chain.<span class="title function_">reverse</span>().<span class="title function_">map</span>(<span class="function">(<span class="params">middleware</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 给每个中间件传入原派发器，赋值中间件改造后的dispatch</span></span><br><span class="line">        dispatch = <span class="title function_">middleware</span>(dispatch);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// 赋值给 store 上的 dispatch</span></span><br><span class="line">      store.<span class="property">dispatch</span> = dispatch;</span><br><span class="line">      <span class="keyword">return</span> store;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>现在写几个中间件来测试一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 记录日志</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">loggerMiddleware</span> = (<span class="params">store</span>) =&gt; <span class="function">(<span class="params">next</span>) =&gt;</span> <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this.state&#x27;</span>, store.<span class="title function_">getState</span>());</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;action&#x27;</span>, action);</span><br><span class="line">  <span class="title function_">next</span>(action);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;next state&#x27;</span>, store.<span class="title function_">getState</span>());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录异常</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">exceptionMiddleware</span> = (<span class="params">store</span>) =&gt; <span class="function">(<span class="params">next</span>) =&gt;</span> <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>(action);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;错误报告&#x27;</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间戳</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">timeMiddleware</span> = (<span class="params">store</span>) =&gt; <span class="function">(<span class="params">next</span>) =&gt;</span> <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;time&#x27;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>());</span><br><span class="line">  <span class="title function_">next</span>(action);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>引入项目中，并运行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">&#x27;../redux/index.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  loggerMiddleware,</span><br><span class="line">  exceptionMiddleware,</span><br><span class="line">  timeMiddleware,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;./middleware.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initState = &#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;INCREMENT&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;DECREMENT&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        <span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(</span><br><span class="line">  reducer,</span><br><span class="line">  initState,</span><br><span class="line">  <span class="title function_">applyMiddleware</span>(loggerMiddleware, exceptionMiddleware, timeMiddleware),</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">store.<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> state = store.<span class="title function_">getState</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;state&#x27;</span>, state);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">store.<span class="title function_">dispatch</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;INCREMENT&#x27;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行发现已经实现了 redux 最重要的功能——中间件</p><p><img src="https://i.loli.net/2021/12/03/F6l5Gfdow9OUSTn.png" alt="测试代码"></p><p>来分析下中间件的函数式编程，以 loggerMiddleware 为例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">loggerMiddleware</span> = (<span class="params">store</span>) =&gt; <span class="function">(<span class="params">next</span>) =&gt;</span> <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this.state&#x27;</span>, store.<span class="title function_">getState</span>());</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;action&#x27;</span>, action);</span><br><span class="line">  <span class="title function_">next</span>(action);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;next state&#x27;</span>, store.<span class="title function_">getState</span>());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 applyMiddleware 源码中，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> chain = middlewares.<span class="title function_">map</span>(<span class="function">(<span class="params">middleware</span>) =&gt;</span> <span class="title function_">middleware</span>(store));</span><br></pre></td></tr></table></figure><p>相当于给每个中间件传值普通版的 store</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dispatch = store.<span class="property">dispatch</span>;</span><br><span class="line">chain.<span class="title function_">reverse</span>().<span class="title function_">map</span>(<span class="function">(<span class="params">middleware</span>) =&gt;</span> (dispatch = <span class="title function_">middleware</span>(dispatch)));</span><br></pre></td></tr></table></figure><p>相当于给每个中间件在传入 store.dispatch，也就是 next，<strong>原 dispatch = next</strong>。这个时候的中间件已经本成品了，代码中的 <code>(action) =&gt; &#123;...&#125;</code> 就是函数 <code>const dispatch = (action) =&gt; &#123;&#125;</code>。当你执行 <code>dispatch(&#123; type: XXX &#125;)</code> 时执行中间件这段<code>(action) =&gt; &#123;...&#125;</code></p><blockquote><p>PS：柯里化一开始比较难理解，用多习惯就慢慢能懂</p></blockquote><h3 id="第三版：结构复杂化与拆分"><a href="#第三版：结构复杂化与拆分" class="headerlink" title="第三版：结构复杂化与拆分"></a>第三版：结构复杂化与拆分</h3><p>中间件理解起来或许有些复杂，先看看其他的概念换换思路</p><p>一个应用做大后，单靠一个 JavaScript 文件来维护代码显然是不科学的，在 Redux 中，为避免这类情况，它提供了 <code>combineReducers</code> 来整个多个 reducer，使用方法如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reducer = <span class="title function_">combinReducers</span>(&#123;</span><br><span class="line">  <span class="attr">counter</span>: counterReducer,</span><br><span class="line">  <span class="attr">info</span>: infoReducer,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在 <code>combinReducers</code> 中传入一个对象，什么样的 state 对应什么样的 reducer。这就好了，那么 <code>combinReducers</code> 怎么实现呢？因为比较简单，不做多分析，直接上源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">combinReducers</span> = (<span class="params">...reducers</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 拿到 counter、info</span></span><br><span class="line">  <span class="keyword">const</span> reducerKey = <span class="title class_">Object</span>.<span class="title function_">keys</span>(reducers);</span><br><span class="line">  <span class="comment">// combinReducers 合并的是 reducer，返回的还是一个 reducer，所以返回一样的传参</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">state = &#123;&#125;, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> nextState = &#123;&#125;;</span><br><span class="line">    <span class="comment">// 循环 reducerKey，什么样的 state 对应什么样的 reducer</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; reducerKey.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> key = reducerKey[i];</span><br><span class="line">      <span class="keyword">const</span> reducer = reducers[key];</span><br><span class="line">      <span class="keyword">const</span> previousStateForKey = state[key];</span><br><span class="line">      <span class="keyword">const</span> nextStateForKey = <span class="title function_">reducer</span>(previousStateForKey, action);</span><br><span class="line">      nextState[key] = nextStateForKey;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nextState;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>同级目录下新建一个 reducer 文件夹，并新建 <code>reducer.js</code>、<code>info.js</code>、<code>index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reducer.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state, action) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;INCREMENT&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;DECREMENT&#x27;</span>: &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// info.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state, action) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;SET_NAME&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        <span class="attr">name</span>: action.<span class="property">name</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;SET_DESCRIPTION&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        <span class="attr">description</span>: action.<span class="property">description</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>合并导出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> counterReducer <span class="keyword">from</span> <span class="string">&#x27;./counter.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> infoReducer <span class="keyword">from</span> <span class="string">&#x27;./info.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; counterReducer, infoReducer &#125;;</span><br></pre></td></tr></table></figure><p>我们现在测试一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  createStore,</span><br><span class="line">  applyMiddleware,</span><br><span class="line">  combinReducers,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;../redux/index.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  loggerMiddleware,</span><br><span class="line">  exceptionMiddleware,</span><br><span class="line">  timeMiddleware,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;./middleware.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; counterReducer, infoReducer &#125; <span class="keyword">from</span> <span class="string">&#x27;./reducer/index.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initState = &#123;</span><br><span class="line">  <span class="attr">counter</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">info</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;johan&#x27;</span>,</span><br><span class="line">    <span class="attr">description</span>: <span class="string">&#x27;前端之虎&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="title function_">combinReducers</span>(&#123;</span><br><span class="line">  <span class="attr">counter</span>: counterReducer,</span><br><span class="line">  <span class="attr">info</span>: infoReducer,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(</span><br><span class="line">  reducer,</span><br><span class="line">  initState,</span><br><span class="line">  <span class="title function_">applyMiddleware</span>(loggerMiddleware, exceptionMiddleware, timeMiddleware),</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">store.<span class="title function_">dispatch</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;INCREMENT&#x27;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>combinReducers</code> 也完成了</p><p><img src="https://i.loli.net/2021/12/03/afUen16QiKRy3l4.png" alt="测试代码"></p><p>既然拆分了 reducer，那么 state 是否也能拆分，并且它是否需要传，在我们平时的写法中，一般都不传 state。这里需要两点改造，一是每个 reducer 中包含了它的 state 和 reducer；二是改造 createStore，让 initState 变得可传可不传，以及初始化数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// counter.js 中写入对应的 state 和 reducer</span></span><br><span class="line"><span class="keyword">let</span> initState = &#123;</span><br><span class="line">  <span class="attr">counter</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state, action) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!state) &#123;</span><br><span class="line">    state = initState;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;INCREMENT&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;DECREMENT&#x27;</span>: &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// info.js</span></span><br><span class="line"><span class="keyword">let</span> initState = &#123;</span><br><span class="line">  <span class="attr">info</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;johan&#x27;</span>,</span><br><span class="line">    <span class="attr">description</span>: <span class="string">&#x27;前端之虎&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state, action) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!state) &#123;</span><br><span class="line">    state = initState;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;SET_NAME&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        <span class="attr">name</span>: action.<span class="property">name</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;SET_DESCRIPTION&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        <span class="attr">description</span>: action.<span class="property">description</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>改造 createStore</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createStore</span> = (<span class="params">reducer, initState, enhancer</span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> initState === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        enhancer = initState;</span><br><span class="line">        initState = <span class="literal">undefined</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getState</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 用一个不匹配任何动作来初始化store</span></span><br><span class="line">    <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="title class_">Symbol</span>() &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getState,</span><br><span class="line">        dispatch,</span><br><span class="line">        subscribe</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主文件中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware, combinReducers &#125; <span class="keyword">from</span> <span class="string">&#x27;./redux/index.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  loggerMiddleware,</span><br><span class="line">  exceptionMiddleware,</span><br><span class="line">  timeMiddleware,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;./middleware.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; counterReducer, infoReducer &#125; <span class="keyword">from</span> <span class="string">&#x27;./reducer/index.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="title function_">combinReducers</span>(&#123;</span><br><span class="line">  <span class="attr">counter</span>: counterReducer,</span><br><span class="line">  <span class="attr">info</span>: infoReducer,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(</span><br><span class="line">  reducer,</span><br><span class="line">  <span class="title function_">applyMiddleware</span>(loggerMiddleware, exceptionMiddleware, timeMiddleware),</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(store.<span class="title function_">getState</span>());</span><br></pre></td></tr></table></figure><p>到此为止，我们已经实现了一个七七八八的 redux 了</p><h3 id="完整体的-Redux"><a href="#完整体的-Redux" class="headerlink" title="完整体的 Redux"></a>完整体的 Redux</h3><h4 id="退订"><a href="#退订" class="headerlink" title="退订"></a>退订</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">subscribe</span> = (<span class="params">fn</span>) =&gt; &#123;</span><br><span class="line">  listeners.<span class="title function_">push</span>(fn);</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> index = listeners.<span class="title function_">indexOf</span>(listener);</span><br><span class="line">    listeners.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="中间件拿到的-store"><a href="#中间件拿到的-store" class="headerlink" title="中间件拿到的 store"></a>中间件拿到的 store</h4><p>现在的中间件能拿到完整的 store，他甚至可以修改我们的 subscribe 方法。按照<strong>最小开放策略</strong>，我们只用给 getState 即可，修改下 applyMiddleware 中给中间件传的 store</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const chain = middlewares.map(middleware =&gt; middleware(store))</span></span><br><span class="line"><span class="keyword">const</span> simpleStore = &#123; <span class="attr">getState</span>: store.<span class="property">getState</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> chain = middlewares.<span class="title function_">map</span>(<span class="function">(<span class="params">middleware</span>) =&gt;</span> <span class="title function_">middleware</span>(simpleStore));</span><br></pre></td></tr></table></figure><h4 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h4><p>在我们的 applyMiddleware 中，把 [A, B, C] 转换成 A(B(C(next)))，效果是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> chain = [A, B, C];</span><br><span class="line"><span class="keyword">let</span> dispatch = store.<span class="property">dispatch</span>;</span><br><span class="line">chain.<span class="title function_">reverse</span>().<span class="title function_">map</span>(<span class="function">(<span class="params">middleware</span>) =&gt;</span> &#123;</span><br><span class="line">  dispatch = <span class="title function_">middleware</span>(dispatch);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Redux 提供了一个 compose ，如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">compose</span> = (<span class="params">...funcs</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (funcs.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">args</span>) =&gt;</span> args;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (funcs.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> funcs[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> funcs.<span class="title function_">reduce</span>(</span><br><span class="line">    <span class="function">(<span class="params">a, b</span>) =&gt;</span></span><br><span class="line">      <span class="function">(<span class="params">...args</span>) =&gt;</span></span><br><span class="line">        <span class="title function_">a</span>(<span class="title function_">b</span>(...args)),</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-行代码-replaceReducer"><a href="#2-行代码-replaceReducer" class="headerlink" title="2 行代码 replaceReducer"></a>2 行代码 replaceReducer</h4><p>替换当前的 reudcer ，使用场景：</p><ul><li>代码分割</li><li>动态加载</li><li>实时 reloading 机制</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">replaceReducer</span> = (<span class="params">nextReducer</span>) =&gt; &#123;</span><br><span class="line">  reducer = nextReducer;</span><br><span class="line">  <span class="comment">// 刷新一次，广播 reducer 已经替换，也同样把默认值换成新的 reducer</span></span><br><span class="line">  <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="title class_">Symbol</span>() &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="bindActionCreators"><a href="#bindActionCreators" class="headerlink" title="bindActionCreators"></a>bindActionCreators</h4><p>bindActionCreators 是做什么的，他通过闭包，把 dispatch 和 actionCreator 隐藏起来，让其他地方感知不到 redux 的存在。一般与 react-redux 的 connect 结合</p><p>这里直接贴源码实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">bindActionCreator</span> = (<span class="params">actionCreator, dispatch</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">dispatch</span>(actionCreator.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">bindActionCreators</span> = (<span class="params">actionCreators, dispatch</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreators === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">bindActionCreator</span>(actionCreators, dispatch);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreators !== <span class="string">&#x27;object&#x27;</span> || actionCreators === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(actionCreators);</span><br><span class="line">  <span class="keyword">const</span> boundActionCreators = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = keys[i];</span><br><span class="line">    <span class="keyword">const</span> actionCreator = actionCreators[key];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreator === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      boundActionCreators[key] = <span class="title function_">bindActionCreator</span>(actionCreator, dispatch);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> boundActionCreators;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以上，我们就已经完成了 Redux 中所有的代码。大体上这里 100 多行的代码就是 Redux 的全部，真 Redux 无非是加了些注释和参数校验</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我们把与 Redux 相关的名词列出来，梳理它是做什么的</p><ul><li>createStore<ul><li>创建 store 对象，包含 getState、dispatch、subscribe、replaceReducer</li></ul></li><li>reducer<ul><li>纯函数，接受旧的 state、action，生成新的 state</li></ul></li><li>action<ul><li>动作，是一个对象，必须包括 type 字段，表示 view 发出通知告诉 store 要改变</li></ul></li><li>dispatch<ul><li>派发，触发 action ，生成新的 state。是 view 发出 action 的唯一方法</li></ul></li><li>subscribe<ul><li>订阅，只有订阅了，当派发时，会执行订阅函数</li></ul></li><li>combineReducers<ul><li>合并 reducer 成一个 reducer</li></ul></li><li>replaceReudcer<ul><li>代替 reducer 的函数</li></ul></li><li>middleware<ul><li>中间件，扩展 dispatch 函数</li></ul></li></ul><p><a href="https://github.com/brickspert">砖家</a>曾经画过一张关于 Redux 的流程图</p><p><img src="https://s2.loli.net/2021/12/06/xD9omCG4OScBFiK.png" alt="流程图"></p><h2 id="换种思考方式理解"><a href="#换种思考方式理解" class="headerlink" title="换种思考方式理解"></a>换种思考方式理解</h2><p>我们说过， Redux 只是一个状态管理库，它是由数据来驱动，发起 action，会引发 reducer 的数据更新，从而更新到最新的 store</p><h3 id="与-React-结合"><a href="#与-React-结合" class="headerlink" title="与 React 结合"></a>与 React 结合</h3><p>拿着刚做好的 Redux，放到 React 中，试试什么叫 Redux + React 集合，注意，这里我们先不使用 React-Redux，单拿这两个结合</p><p>先创建项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app demo-5-react</span><br></pre></td></tr></table></figure><p>引入手写的 redux 库</p><p>在 <code>App.js</code> 中引入 createStore，并写好初始数据和 reducer，在 useEffect 中监听数据，监听好之后当发起一个 action 时，数据就会改变，看代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;./redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initState = &#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;INCREMENT&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;DECREMENT&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        <span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(reducer, initState);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(store.<span class="title function_">getState</span>().<span class="property">count</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> unsubscribe = store.<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setCount</span>(store.<span class="title function_">getState</span>().<span class="property">count</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (unsubscribe) &#123;</span><br><span class="line">        <span class="title function_">unsubscribe</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onHandle</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    store.<span class="title function_">dispatch</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;INCREMENT&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;store&#x27;</span>, store.<span class="title function_">getState</span>().<span class="property">count</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onHandle&#125;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>点击 button 后，数据跟着改变</p><p><img src="https://s2.loli.net/2021/12/06/E5xaY7dVv9OJUMP.png" alt="效果图"></p><blockquote><p>PS：虽然我们可以用这种方式订阅 store 和改变数据，但是订阅的代码重复过多，我们可以用高阶组件将他提取出去。这也是 React-Redux 所做的事情</p></blockquote><h3 id="与原生-JS-HTML-结合"><a href="#与原生-JS-HTML-结合" class="headerlink" title="与原生 JS+HTML 结合"></a>与原生 JS+HTML 结合</h3><p>我们说过，Redux 是个独立于 Redux 的存在，它不仅可在 Redux 充当数据管理器，还可以在原生 JS + HTML 中充当起职位</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;count&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;./redux/index.js&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> initState = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">count</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">case</span> <span class="string">&#x27;INCREMENT&#x27;</span>:</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              ...state,</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">case</span> <span class="string">&#x27;DECREMENT&#x27;</span>:</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              ...state,</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">default</span>:</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> state;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> store = <span class="title function_">createStore</span>(reducer, initState);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> count = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;count&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> add = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      add.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        store.<span class="title function_">dispatch</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">type</span>: <span class="string">&#x27;INCREMENT&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 渲染视图</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        count.<span class="property">innerHTML</span> = store.<span class="title function_">getState</span>().<span class="property">count</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">render</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 监听数据</span></span></span><br><span class="line"><span class="language-javascript">      store.<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> state = store.<span class="title function_">getState</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;state&#x27;</span>, state);</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">render</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://s2.loli.net/2021/12/06/zuaQsI9mhj5SAPF.png" alt="效果图"></p><h2 id="状态生态"><a href="#状态生态" class="headerlink" title="状态生态"></a>状态生态</h2><p>我们从 Flux 说到 Redux，再从 Redux 说了各种中间件，其中 React-saga 就是为解决异步行为而生的中间件，它主要采用 Generator（生成器）概念，比起 React-thunk 和 React-promise，它没有像其他两者将异步行为放在 action creator 上，而是把所有的异步操作看成“线程”，通过 action 触发它，当操作完成后再次发出 action 作为输出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">helloWorldGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;ending&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> helloWorld = <span class="title function_">helloWorldGenerator</span>();</span><br><span class="line"></span><br><span class="line">hewlloWorld.<span class="title function_">next</span>(); <span class="comment">// &#123; value: &#x27;hello&#x27;, done: false &#125;</span></span><br><span class="line">hewlloWorld.<span class="title function_">next</span>(); <span class="comment">// &#123; value: &#x27;world&#x27;, done: false &#125;</span></span><br><span class="line">hewlloWorld.<span class="title function_">next</span>(); <span class="comment">// &#123; value: &#x27;ending&#x27;, done: true &#125;</span></span><br><span class="line">hewlloWorld.<span class="title function_">next</span>(); <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><p>简单来说：遇到 yield 表达式，就暂停执行后面的操作，并将紧跟 yield 后面的那个表达式的值，作为返回值 value，等着下一个调用 next 方法，再继续往下执行</p><h3 id="Dva"><a href="#Dva" class="headerlink" title="Dva"></a>Dva</h3><p>Dva 是什么？</p><blockquote><p>官网：Dva 首先是一个基于 Redux + Redux-saga 的数据流方案。为了简化开发体验，Dva 还额外内置了 react-router 和 fetch，所以可以理解为一个轻量级的应用框架</p></blockquote><p>简单来说，它是整合了现在最流行的数据流方案，即一个 React 技术栈：</p><p>dva = React-Router + Redux + Redux-saga + React-Redux</p><p>它的数据流图为：</p><p><img src="https://s2.loli.net/2021/12/06/QUOfn9sW2NqEyCA.png" alt="Dva 流程图"></p><p>view dispatch 一个动作，改变 state（即 store），state 与 view 绑定，响应 view</p><p>其他不表，可去 <a href="https://dvajs.com/">Dva 官网</a>查看，这里讲讲 Model ，它包含了 5 个属性</p><ul><li>namespace<ul><li>model 的命名空间，同时也是他在全局 state 上的属性，只能用字符串，不支持通过 <code>.</code> 的方式创建多层命名空间</li></ul></li><li>state<ul><li>初始值</li></ul></li><li>reducers<ul><li>纯函数，以 key/value 格式定义 reducer。用于处理同步擦做，唯一可以修改 <code>state</code> 的地方，由 <code>action</code> 触发</li><li>格式为：<code>(state, action) =&gt; newState</code> 或 <code>[(state, action) =&gt; newState, enhancer]</code></li></ul></li><li>effects<ul><li>处理异步操作和业务逻辑，以 key/value 格式定义 effect</li><li>不直接修改 state。由 action 触发</li><li>call：执行异步操作</li><li>put：发出一个 Action，类似于 dispatch</li></ul></li><li>subscriptions<ul><li>订阅</li><li>在 <code>app.start()</code> 时被执行，数据源可以是当前的时间、服务器的 websocket 链接、 keyboard 输入、history 路由变化、geolocation 变化等等</li></ul></li></ul><h3 id="Mobx"><a href="#Mobx" class="headerlink" title="Mobx"></a>Mobx</h3><p>View 通过订阅也好，监听也好，不同的框架有不同的技术，总之 store 变化， view 也跟着变化</p><p>Mobx 使用的是响应式数据流方案。后续会单独写一篇，此篇太长，先不写</p><h2 id="补充：单向数据流"><a href="#补充：单向数据流" class="headerlink" title="补充：单向数据流"></a>补充：单向数据流</h2><p>先介绍 React 中数据传递，即通信问题</p><ul><li>向子组件发消息</li><li>向父组件发消息</li><li>向其他组件发消息</li></ul><p>React 只提供了一种通信方式：传参。</p><p>即父传值给子，子不能修改父传的数据，props 具有不可修改性。子组件想把数据传给父组件怎么办？通过 props 中的事件来传值通知父组件</p><p>仓库地址：<a href="https://github.com/johanazhu/jo-redux">https://github.com/johanazhu/jo-redux</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手写 </tag>
            
            <tag> redux </tag>
            
            <tag> 状态管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三句话测试你是否懂git</title>
      <link href="/2021/12/02/2021-12-02-%E4%B8%89%E5%8F%A5%E8%AF%9D%E6%B5%8B%E8%AF%95%E4%BD%A0%E6%98%AF%E5%90%A6%E6%87%82git/"/>
      <url>/2021/12/02/2021-12-02-%E4%B8%89%E5%8F%A5%E8%AF%9D%E6%B5%8B%E8%AF%95%E4%BD%A0%E6%98%AF%E5%90%A6%E6%87%82git/</url>
      
        <content type="html"><![CDATA[<p>同事和组长的一番对话引起了笔者对 git 的思考</p><p>先介绍一下我司小工坊式的 git 提交流程，本地打包，删除 dist 文件，重建 dist 文件，<code>git add .</code>，<code>git commit -m &#39;XX&#39;</code>，<code>git push origin 分支名</code></p><p>和传统公司的 git 提交不同，我司打包是本地打包，而且是把 dist 文件直接上传到仓库</p><h2 id="事故现象"><a href="#事故现象" class="headerlink" title="事故现象"></a>事故现象</h2><p>同事把代码推上去后，浏览器访问的还是原来的 js 和 css。</p><p>同事说：组长，需要你把 dist 删掉，重新再从仓库里拉一下最新的</p><p>组长：git 提交后不就把原来的 dist 替换了吗，你让我删 dist 有什么意义</p><p>扯皮了一会儿，组长还是删了然后重新拉，没想到好了</p><p>组长说：你的 dist 现在是最新的，所以现在就好了</p><p>同事具体说了什么笔者忘记了，大致上在辩护 git 提交不会把原来的 dist 文件删除问题，不过他没说服组长，组长也没说服他，反正已经安全上线而不了了之。</p><p>我正好在旁边听到了，要是两年前我也许会一直提出问题参与辩论，申援同事。但笔者没动，不是怕 PUA，而是表达能力太差，即使是对的，也说不好。其根本原因是笔者对这块知识了解的不深刻，所以不敢说大话</p><h2 id="理论知识"><a href="#理论知识" class="headerlink" title="理论知识"></a>理论知识</h2><p>按照理论知识，你 push 整个 dist 文件，即使远程仓库中有 dist，也不会把整个 dist 文件夹替换，只会替换其中相同的数据，而因为打了 hash 值，所以 css 和 js 都是不同的，所以一直这样做，dist 中的文件会越来越多，而因为 index.html 文件只有一个，所以不会出现替换了还引用之前文件的问题，如果出现，清除下浏览器的缓存就能解决</p><h2 id="实战检验"><a href="#实战检验" class="headerlink" title="实战检验"></a>实战检验</h2><p>因为生产环境和测试环境发布代码流程不同，所以先要把环境配置成一致先</p><p>需要做的事情很简单，把 nginx 中指向仓库地址，到时候从远端拉下代码即可</p><p>先修改 nginx 中的配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">7000</span>;</span><br><span class="line">    <span class="comment"># root /usr/share/nginx/html/dist</span></span><br><span class="line">    <span class="attribute">root</span> /home/xxx/dist</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再检查一下 nginx 配置是否 ok</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure><p>接着重启 nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>接着把代码提交到远端仓库，再上服务器进入 /home/xxx 目录下，<code>git pull origin XX</code> ，进入 dist 文件，查看打包后的 js</p><p><img src="https://s2.loli.net/2021/12/07/jZ3xflSJoguBMnP.png" alt="原js的hash值"></p><p>我们修改在项目中打印一些日志，表示文件改动，这样 build 之后会打出不同 hash 的 js</p><p><code>git push origin XX</code></p><p>再次登录服务器，进入 /home/xxx 目录，再拉代码<code>git pull origin xx</code></p><p><img src="https://s2.loli.net/2021/12/07/dqZx8PEW92IQ4NH.png" alt="再次提交后的代码"></p><p>发现，<code>umi.b0f5511b.js</code> 被删掉了，新生成的 <code>umi.f8280c0e.js</code> 在其中，dist 中是干净的源文件，这是为什么呢？</p><p>你 build 之后，是先删掉 dist 文件，生成的是一个干净的 dist，然后我的操作是：</p><ul><li>git add .</li><li>git commit -m ‘XX’</li><li>git push origin ‘XX 分支’</li></ul><p>我的操作中没有 pull 代码，而是直接 push 代码，这就意味着 dist 就是我本地的 dist，而非合并之后的</p><p>想想这种做法的缺点是多人开发时，pull 别人的代码后，merge 之后还要重新 build，才能再次提交</p><p>好险，还好没有逞英雄</p><p>谨言慎行是一辈子的学问</p><h2 id="三句话测试你是否懂-git"><a href="#三句话测试你是否懂-git" class="headerlink" title="三句话测试你是否懂 git"></a>三句话测试你是否懂 git</h2><p>这触发了笔者对 git 的新认知，结合平时经验，笔者觉得三个问题能测试别人对 git 的理解程度</p><ol><li>你和同事基于同一 commit 开发，后续合并时，如何按照时间顺序显示提交记录<ul><li>git rebase master XX(分支)</li><li>获得更优雅的提交树</li></ul></li><li>代码如何回滚<ul><li>git reset –hard XX</li><li>把当前代码指向另一个 commit 上</li></ul></li><li>你开发代码，提交了好几个 commit，后续使用 <code>git reset --hard xxxxx</code> 把代码指针指回原始 commit ，并在这个 commit 上开发了一个功能，并提交了一个 commit，怎么找回之前提交的那好几个 commit<ul><li>首先使用 <code>git reflog</code> ，它能展示你之前所有的 git 操作<ul><li>比较 git log，它不仅包括了 git log 上的操作，而且它记录了被删除的 commit 记录和 reset 操作</li></ul></li><li><code>git reset --hard XX</code><ul><li>将 git 指针指向回到原始代码前的那个 commit</li></ul></li><li><code>git cherry-pick XX</code><ul><li>合并二次开发时的 commit</li><li>cherry-pick 意为取出，将二次开发时的 commit 取出放入主分支上</li></ul></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 工作经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搞轮子：从业务到组件Tabs</title>
      <link href="/2021/11/29/2021-11-29-%E6%90%9E%E8%BD%AE%E5%AD%90%EF%BC%9A%E4%BB%8E%E4%B8%9A%E5%8A%A1%E5%88%B0%E7%BB%84%E4%BB%B6Tabs/"/>
      <url>/2021/11/29/2021-11-29-%E6%90%9E%E8%BD%AE%E5%AD%90%EF%BC%9A%E4%BB%8E%E4%B8%9A%E5%8A%A1%E5%88%B0%E7%BB%84%E4%BB%B6Tabs/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为之前为 UI 库由我来做且维护，但缺点是集成在项目中，不便于其他项目使用，且组件被同事改了之后会导致之前沿用的组件乱掉。所以 UI 由独立库维护是最好的。正逢项目不急，就将其排上了日期，其中写了</p><ul><li><a href="https://blog.azhubaby.com/2021/11/03/2021-11-03-%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%9A%E7%9A%AE%E8%82%A4%E6%A6%82%E5%BF%B5%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%A1%88/">组件开发：皮肤概念的几种方案</a></li><li><a href="https://blog.azhubaby.com/2021/11/11/2021-11-11-css%E5%AE%9A%E4%BD%8D%E5%B0%8F%E6%8A%80%E5%B7%A7/">css 定位小技巧</a></li></ul><p>皮肤概念解决的是 UI 库目前适用于两个主色调、次色调不同的项目</p><p>css 定位解决的是 Tag 组件的 border 边框让尺寸变长问题</p><p>现在要提取 Tab 组件，发现原来的组件不太合理</p><h2 id="业务中的-Tab-组件"><a href="#业务中的-Tab-组件" class="headerlink" title="业务中的 Tab 组件"></a>业务中的 Tab 组件</h2><p>业务效果如图所示，滑动它，能连带着切换下划线和内容</p><p><img src="https://i.loli.net/2021/11/15/6EpuBxSK8od9Il3.png" alt="image-20211115163300514"></p><p>后端返回数据结构</p><p>总结构：</p><p><img src="https://i.loli.net/2021/11/15/XzOrf6byKtVSj85.png" alt="image-20211115163114381"></p><p>详细结构：</p><p><img src="https://i.loli.net/2021/11/15/u6aZ8NmnOIqJB1e.png" alt="image-20211115163050904"></p><p>当时的写法：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Tab</span></span><br><span class="line">  ref=&#123;tabRef&#125;</span><br><span class="line">  data=&#123;tagGroupProductList&#125;</span><br><span class="line">  sticky=&#123;<span class="literal">true</span>&#125;</span><br><span class="line">  selected=&#123;selectedTab&#125;</span><br><span class="line">  onChange=&#123;onHandleChangeTab&#125;</span><br><span class="line">  onClick=&#123;onClickToBtn&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>组件 Tab 分为三部分，主 Tab、TabItem、TabContext</p><p><img src="https://i.loli.net/2021/11/15/pAycWGQR1BMH3f6.png" alt="image-20211115163152899"></p><p>在 Tab 中，集成了 TabItem 和 TabContext</p><p>TabItem：头部图片+文字</p><p>TabContext：内容卡片，支持滑动</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码，此为 Tab</span></span><br><span class="line">&lt;div className=<span class="string">&quot;jing-tab&quot;</span> style=&#123;style&#125; ref=&#123;ref&#125;&gt;</span><br><span class="line">  <span class="comment">// 遍历&lt;TabItem&gt;&lt;/TabItem&gt;</span></span><br><span class="line">  <span class="comment">// 塞入当前下标页的数据，展示 TabContext &lt;TabContext /&gt;</span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>又提供滑动后的回调 changeSwiper。当滑动后，意味着组件头部的位置改变，也意味着 context 数据的改变。虽然写的有点饶，但我想表达的是原来的组件的业务和逻辑绑定密切</p><p>这种写法是封装好了样式，只要传 props 即可，相当于木偶组件，使用者传入数据即可。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Tab</span></span><br><span class="line">  ref=&#123;tabRef&#125;</span><br><span class="line">  data=&#123;tagGroupProductList&#125; <span class="comment">// 传入一次性参数</span></span><br><span class="line">  sticky=&#123;<span class="literal">true</span>&#125;</span><br><span class="line">  selected=&#123;selectedTab&#125;</span><br><span class="line">  onChange=&#123;onHandleChangeTab&#125;</span><br><span class="line">  onClick=&#123;onClickToBtn&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>缺点是子组件不能传参数，你不能控制子组件，当遇到类似的 Tab（标签页）效果，但内容结构不一致就会导致不可用。说白了，这个 Tab 只适用于当前页面的效果，没有普世性</p><p>为了组件的可拓展性，业务和项目尽量分开</p><h2 id="重构组件"><a href="#重构组件" class="headerlink" title="重构组件"></a>重构组件</h2><p>我一开始的设想是希望做成这样：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Tabs</span> swiper=&#123;<span class="literal">true</span>&#125; active=<span class="string">&quot;0&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Tab</span> <span class="attr">title</span>=<span class="string">&quot;标签1&quot;</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">Tab</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Tab</span> <span class="attr">title</span>=<span class="string">&quot;标签2&quot;</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">Tab</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Tab</span> <span class="attr">title</span>=<span class="string">&quot;标签3&quot;</span>&gt;</span>内容3<span class="tag">&lt;/<span class="name">Tab</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Tabs</span>&gt;</span><br></pre></td></tr></table></figure><p>Tabs 控制标签页是否能滑动，能否点击，滑动到那个标签页等等，Tab 控制当前标签的标题和内容</p><p>但这样，Tabs 和 Tab 就分离成了两个组件，有必要分离吗？用到标签页（Tabs）的时候必然会用 Tab，所以我后面改造成了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Tabs</span> <span class="attr">value</span>=<span class="string">&quot;&#123;value&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Tabs.Panel</span> <span class="attr">title</span>=<span class="string">&quot;标签1&quot;</span>&gt;</span>内容 1<span class="tag">&lt;/<span class="name">Tabs.Panel</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Tabs.Panel</span> <span class="attr">title</span>=<span class="string">&quot;标签2&quot;</span>&gt;</span>内容 2<span class="tag">&lt;/<span class="name">Tabs.Panel</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Tabs.Panel</span> <span class="attr">title</span>=<span class="string">&quot;标签3&quot;</span>&gt;</span>内容 3<span class="tag">&lt;/<span class="name">Tabs.Panel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Tabs</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Tab 嫁接在 Tabs 的子组件中</p><h2 id="思路与做法"><a href="#思路与做法" class="headerlink" title="思路与做法"></a>思路与做法</h2><p>Tabs 的作用是为了外界的 props</p><p>Tab 的作用是展示数据，如 title 和 content</p><p>思路有了，怎么做？</p><p>Tabs 的属性包括但不限于：</p><ul><li><p>value：绑定当前选中标签的标识符</p></li><li><p>swipeable：是否开启手势滑动切换</p></li><li><p>sticky：是否使用粘性定位布局</p></li><li><p>disabled：是否禁用标签</p></li><li><p>swipeThreshold：滚动阈值</p></li><li><p>…</p></li></ul><p>拆开了 Tabs 和 Tab 的结构是怎么样的</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Panel</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> classes = <span class="title function_">classnames</span>(prefixCls, props.<span class="property">className</span>, &#123;</span><br><span class="line">        [<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>--active`</span>]: !!props.<span class="property">selected</span>,</span><br><span class="line">        [<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>--disabled`</span>]: !!props.<span class="property">disabled</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;jing-tabs__panel&quot;</span> <span class="attr">style</span>=<span class="string">&#123;props.style&#125;</span> <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;props.children&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Tabs</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;jing-tabs&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;jing-tabs__wrap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          React.Children.map(children, (item: any, index: number) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">            // 简化</span></span><br><span class="line"><span class="language-xml">          return (</span></span><br><span class="line"><span class="language-xml">             <span class="tag">&lt;<span class="name">Title</span> <span class="attr">...item.props</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">          );</span></span><br><span class="line"><span class="language-xml">    &#125;)</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;jing-tabs__content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">         // 遍历 React.Children,将Children中的数据塞入 TabPanel 中</span></span><br><span class="line"><span class="language-xml">          React.Children.map(children, (item,index) =&gt; (</span></span><br><span class="line"><span class="language-xml">           <span class="tag">&lt;<span class="name">TabPanel</span> &#123;<span class="attr">...item.props</span>&#125;/&gt;</span></span></span><br><span class="line"><span class="language-xml">          ))</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Tabs</span>.<span class="property">Panel</span> = <span class="title class_">Panel</span></span><br></pre></td></tr></table></figure><p>这里有个知识点：React.Children</p><h3 id="什么是-React-Children？"><a href="#什么是-React-Children？" class="headerlink" title="什么是 React.Children？"></a>什么是 React.Children？</h3><blockquote><p><code>React.Children</code> 提供了用于处理 <code>this.props.children</code> 不透明数据结构的实用方法。</p></blockquote><h4 id="React-Children-map-的使用方法"><a href="#React-Children-map-的使用方法" class="headerlink" title="React.Children.map 的使用方法"></a>React.Children.map 的使用方法</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">React</span>.<span class="property">Children</span>.<span class="title function_">map</span>(children, <span class="keyword">function</span>[(thisArg)])</span><br></pre></td></tr></table></figure><p>所以在代码中</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">React</span>.<span class="property">Children</span>.<span class="title function_">map</span>(children, <span class="function">(<span class="params">item, index</span>) =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">TabPanel</span> &#123;<span class="attr">...item.props</span>&#125; /&gt;</span></span>)</span><br></pre></td></tr></table></figure><p><code>(item, index) =&gt; &lt;TabPanel /&gt;</code> 表示的是 children 中的每个 <code>Tabs.Panel</code></p><p>联想到组件</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Tabs</span> value=&#123;value&#125;&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Tabs.Panel</span> <span class="attr">title</span>=<span class="string">&quot;标签1&quot;</span>&gt;</span>内容 1<span class="tag">&lt;/<span class="name">Tabs.Panel</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Tabs.Panel</span> <span class="attr">title</span>=<span class="string">&quot;标签2&quot;</span>&gt;</span>内容 2<span class="tag">&lt;/<span class="name">Tabs.Panel</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Tabs.Panel</span> <span class="attr">title</span>=<span class="string">&quot;标签3&quot;</span>&gt;</span>内容 3<span class="tag">&lt;/<span class="name">Tabs.Panel</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Tabs</span>&gt;</span><br></pre></td></tr></table></figure><p>在这个案例中，React.Children 表示 children，即三个 <code>Tabs.Panel</code>，并且将其遍历</p><p><code>(item, index) =&gt; &lt;TabPanel /&gt;</code> ，就一一对应每个 <code>TabPanel</code></p><p>所以 children 中的内容必须是 <code>Tans.Panel</code> 组件，这样才不会出差错</p><p>同理，我们可以把标题抽离出来，成一”木偶组件”，<code>React.Children.map</code> 时传入所需要的数据</p><p>这里需要注意的是，<code>Tabs.Panel</code> 组件承担了 <code>Tabs.Title</code> 传值的作用，其 title、img 等都是传给 <code>Tabs.Title</code> 的参数。</p><h2 id="做组件需要注意什么"><a href="#做组件需要注意什么" class="headerlink" title="做组件需要注意什么"></a>做组件需要注意什么</h2><ol><li><p>它的结构</p><ul><li>我对 标签页组件是拆分为 <code>Tabs</code> 、<code>Tabs.Panel</code>、<code>Tabs.Title</code>。其中 <code>Tabs.Title</code> 没有暴露出来，因为不需要</li></ul></li><li><p>它有什么属性</p><ul><li>swipeable：支持滑动<ul><li>如果需要滑动，那么就需要用到 <code>Swiper</code> 滑块组件</li><li>当它滑动时，标题中的 line 也要跟着滚动到相应的位置</li></ul></li><li>sticky：粘性布局<ul><li>同样，粘性布局在很多场景下都有用到，是否需要抽离成组件</li></ul></li><li>swipeThreshold：滚动阈值<ul><li>当 children 中的数量（React.Children.Count）大于阈值时支持横向滚动</li></ul></li></ul></li><li><p>它的下标跟随怎么做</p><ol><li><p>首先要先获取每个 <code>Tabs.Title</code> 的 ref，即获取它的 dom</p><ol><li>做 <code>Tabs.Title</code> 时转发（forwardRef） 此组件</li><li>使用 <code>&lt;Title ref=&#123;(el) =&gt; (tabsTitleRef.current[index] = el)&#125; ... /&gt;</code> 获取每个 <code>Tabs.Title</code> 的 dom</li></ol></li><li><p>补间动画</p><ol><li>拿到点击后的值的 dom 的 坐标，<code>transform: translateX(XX)</code></li></ol></li><li><p>当达到滚动阈值后，<code>tabsNavRef</code>（<code>Tabs.Title</code> 的父容器） 移动，移动是有公式的</p><ul><li><pre><code class="ts">function scrollLeftTo() &#123;  cancelRaf(rafId)  let count = 0  const from = scroller.scrollLeft  const frames = duration === 0 ? 1 : Math.round((duration * 1000) / 16)  function animate() &#123;    scroller.scrollLeft += (to - from) / frames    if (++count &lt; frames) &#123;      rafId = raf(animate)    &#125;  &#125;  animate()&#125;</code></pre></li></ul></li></ol></li></ol><p>其余的没什么难度了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Tabs 标签页组件的核心在于什么？标签的标题和内容，点击标签时，内容切换到该页面以及当它可以滑动时，变化的是当前的下标。我们需要以它为切入点，当它变化时，下划线滚动。而点击 Title 或者滑动 Content 都会触发 <code>setCurrentIndex(index)</code>，用 hooks 写完美解决”关注点问题“</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搞轮子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回调函数到promise再到理解async/await</title>
      <link href="/2021/11/23/2021-11-23-%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%88%B0promise%E5%86%8D%E5%88%B0%E7%90%86%E8%A7%A3asyncawait/"/>
      <url>/2021/11/23/2021-11-23-%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%88%B0promise%E5%86%8D%E5%88%B0%E7%90%86%E8%A7%A3asyncawait/</url>
      
        <content type="html"><![CDATA[<p>推特上有人发了个”在 7 秒内理解 async/await“ 的视频，地址看<a href="https://twitter.com/manekinekko/status/855824609299636230">这里</a></p><p>拆分成就是写法的变化：回调函数 -&gt; promise -&gt; async/await</p><p>js 天生支持异步，如果你的数据依赖于异步请求，那么需要在它的回调中获取，一旦写的多了，就形成了回调地狱，如下图所示</p><p><img src="https://i.loli.net/2021/11/23/Vd3iSezX26foOtc.png" alt="回调函数模式"></p><p>后来，ES6 出了 promise，promise 的意思是承诺，情景如下：</p><blockquote><p>未婚妻：你一定要回来！</p><p>出去打战的士兵：I promise</p></blockquote><p>这样写法上就有个先后顺序，不用再嵌套，而是串联（但换行之后看起来也很清晰）</p><p><img src="https://i.loli.net/2021/11/23/F9BpCzkjWVExeK5.png" alt="promise模式"></p><p>promise 的问题在于，它的语境还是异步，当 <code>getDate</code> 拿到数据后做事情（then）</p><p>人的惯性思维是同步，即写就写了，开心就开心了，怒就怒了，没有说等五秒后再笑</p><p>所以 promise 是虽好，但可以再换个写法——async/await</p><p><img src="https://i.loli.net/2021/11/23/SOHWn1dm4KVf3gc.png" alt="async/await模式"></p><p>async/awiat 是绑定在一起的，缺一不可</p><p><code>const a = await getData()</code> 其中的 a 就是请求数据拿到的结果，从理解上更符合人的思维</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回调函数 </tag>
            
            <tag> promise </tag>
            
            <tag> async/await </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闲人闲谈之执行力</title>
      <link href="/2021/11/21/2021-11-21-%E9%97%B2%E4%BA%BA%E9%97%B2%E8%B0%88%E4%B9%8B%E6%89%A7%E8%A1%8C%E5%8A%9B/"/>
      <url>/2021/11/21/2021-11-21-%E9%97%B2%E4%BA%BA%E9%97%B2%E8%B0%88%E4%B9%8B%E6%89%A7%E8%A1%8C%E5%8A%9B/</url>
      
        <content type="html"><![CDATA[<p>最近一年来，开始将博客公开，为的是在在简历上给人一个能持续输出的印象。但本身却不爱在网上更多公开自己的信息，以至于当同事知道自己的 Github 后</p><p>主要是执行力不行。春夏天还行，但今年记录了一下，十月份过后（也许是十一综合征），状态就不行了</p><p>想挽回，即使执行了计划，还是不能很好的完成它</p><p>怎么能做到很好的执行自己的计划</p><p>迷茫有三：</p><p>为什么哪些大牛能一直持续更新？</p><ul><li>勤奋。强迫自己做</li><li>兴趣。因为热爱不在乎</li><li>生活。不得已</li></ul><p>为什么我做不到？</p><ul><li>自身不够勤奋</li><li>做了之后没有成就感，即使我写了文章，写了知识地图，但是成就感获得不多。但自己又不是那种特别爱成就感的人</li></ul><p>设计属于自己的课程？</p><p>兴趣很廉价，专注力才可贵</p>]]></content>
      
      
      <categories>
          
          <category> 有知有行 </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 执行力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scss不能用除法?</title>
      <link href="/2021/11/16/2021-11-16-scss%E4%B8%8D%E8%83%BD%E7%94%A8%E9%99%A4%E6%B3%95/"/>
      <url>/2021/11/16/2021-11-16-scss%E4%B8%8D%E8%83%BD%E7%94%A8%E9%99%A4%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>之前在项目中就遇到过，scss 不是用除法的问题，当时项目忙，没有及时处理，但心里一直有一根刺，像张爱玲的红玫瑰一样闹的我心烦，现在有时间就想拔掉这根刺</p><h2 id="错误定位"><a href="#错误定位" class="headerlink" title="错误定位"></a>错误定位</h2><p>因为运行项目后，用到除法，提示错误为</p><p><img src="https://i.loli.net/2021/11/16/CfRtovKG2zYT5Xq.png" alt="scss警告不能除法"></p><p>点进官方的<a href="https://sass-lang.com/documentation/breaking-changes/slash-div">解决方案</a></p><p>有两种，一种是引用 <code>@use &quot;sass:math&quot;;</code>，使用 <code>math.div(100%, 24)</code> 这类写法，另一种是全局下载<code>sass-migrator</code> 对目标文件进行转换</p><p>网上查了一番，<a href="https://github.com/twbs/bootstrap"> bootstrap</a> 鸡贼，换了个思路，用乘法代替，具体可看<a href="https://github.com/twbs/bootstrap/issues/34051">代码</a>。但也应该会遇到必须使用除法的情况，从 PR 上看，没有看到必须用除法的场景，可惜一番</p><p>算了，再去查一番，发现用指定绑定的 sass 可以，是个日本佬写的<a href="https://www.webdesignleaves.com/wp/htmlcss/1956/">方案</a> 。所以大概三种方法解决</p><p>先用第一种方法解决，确实，在开发环境上不报错了，但是在 build 时，报 <code>Error: Invalid CSS after &quot;...ion-delay: math&quot;</code></p><p><img src="https://i.loli.net/2021/11/16/A9ws2HEkO3Gvb7Y.png" alt="报错信息"></p><p>第二种、第三种都不好使</p><blockquote><p>PS：这里要批评一下自己，看报错信息就知道使用到了 node-sass，node-sass 不支持这种写法，但是当时自己没认真看报错信息，直接去 Google 了</p></blockquote><h2 id="换种思路"><a href="#换种思路" class="headerlink" title="换种思路"></a>换种思路</h2><p>我的项目是基于 umi 开发，用 scss 是因为安装了它的插件：<a href="https://umijs.org/zh-CN/plugins/plugin-sass">@umijs/plugin-sass</a></p><p><img src="https://i.loli.net/2021/11/16/xfcLwGKrYFbuU1k.png" alt="umijs/plugin-sass文档"></p><p>我的 <code>@umijs/plugin-sass</code> 已经升级到最新版本，也就是说使用到了 Dart Sass，难道 Dart Sass 的问题？</p><p>在胡乱找的时候，发现了<a href="https://stackoverflow.com/questions/66761273/invalid-css-after-content-expected-was-material-light">这篇文章</a> ，解惑了</p><blockquote><p>This is because you need to use <code>sass</code> instead of <code>node-sass</code>. Remove <code>node-sass</code> and use <code>sass</code> instead and this error should go away</p></blockquote><p>翻译过来就是</p><blockquote><p>这是因为您需要使用<code>sass</code>而不是<code>node-sass</code>. 删除<code>node-sass</code>并使用<code>sass</code>，此错误应该消失。</p></blockquote><h2 id="我的做法"><a href="#我的做法" class="headerlink" title="我的做法"></a>我的做法</h2><p>直接升级整个项目，粗暴</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update</span><br></pre></td></tr></table></figure><p>接着删掉 <code>package.json</code> 中的 <code>node-sass</code>（当初的自己害了自己）</p><p>再接着删掉整个 <code>node_modules</code>，再重新下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf node_modules</span><br><span class="line">yarn</span><br></pre></td></tr></table></figure><p>结果通了，这样解决了一个心头刺</p><h2 id="umijs-plugin-sass-源码解读"><a href="#umijs-plugin-sass-源码解读" class="headerlink" title="@umijs/plugin-sass 源码解读"></a>@umijs/plugin-sass 源码解读</h2><p>在找问题的时候看了下 @umijs/plugin-sass 的源码，贴出来看一下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">IApi</span>, utils &#125; <span class="keyword">from</span> <span class="string">&#x27;umi&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (<span class="attr">api</span>: <span class="title class_">IApi</span>) =&gt; &#123;</span><br><span class="line">  api.<span class="title function_">describe</span>(&#123;</span><br><span class="line">    <span class="attr">config</span>: &#123;</span><br><span class="line">      <span class="title function_">schema</span>(<span class="params">Joi</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Joi</span>.<span class="title function_">object</span>(&#123;</span><br><span class="line">          <span class="attr">implementation</span>: <span class="title class_">Joi</span>.<span class="title function_">any</span>(),</span><br><span class="line">          <span class="attr">sassOptions</span>: <span class="title class_">Joi</span>.<span class="title function_">object</span>(),</span><br><span class="line">          <span class="attr">prependData</span>: <span class="title class_">Joi</span>.<span class="title function_">alternatives</span>(<span class="title class_">Joi</span>.<span class="title function_">string</span>(), <span class="title class_">Joi</span>.<span class="title function_">func</span>()),</span><br><span class="line">          <span class="attr">sourceMap</span>: <span class="title class_">Joi</span>.<span class="title function_">boolean</span>(),</span><br><span class="line">          <span class="attr">webpackImporter</span>: <span class="title class_">Joi</span>.<span class="title function_">boolean</span>(),</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  api.<span class="title function_">chainWebpack</span>(<span class="function">(<span class="params">memo, &#123; createCSSRule &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">createCSSRule</span>(&#123;</span><br><span class="line">      <span class="attr">lang</span>: <span class="string">&#x27;sass&#x27;</span>,</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.(sass|scss)(\?.*)?$/</span>,</span><br><span class="line">      <span class="attr">loader</span>: <span class="built_in">require</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;sass-loader&#x27;</span>),</span><br><span class="line">      <span class="attr">options</span>: utils.<span class="title function_">deepmerge</span>(</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">implementation</span>: <span class="built_in">require</span>(<span class="string">&#x27;sass&#x27;</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">        api.<span class="property">config</span>.<span class="property">sass</span> || &#123;&#125;,</span><br><span class="line">      ),</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> memo</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>介于对 webpack 的不熟悉，下面的说法不带有参考性</p><ul><li><code>api.describe</code> 不懂</li><li><code>api.chainWebpack</code> 这段大概是对 webpack 的规则的一些写入，即是用 sass 写法</li></ul><p>后续学习前端工程化系列的时候再对其做补充</p><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><p>Sass 是采用 Ruby 语言编写的一款 CSS 预处理语言</p><p>Sass 和 Scss 其实就是同一种东西，我们平时都称之为 Sass，两者不同之处主要有两点：</p><ol><li>文件扩展名不同，Sass 是以“.sass”后缀为扩展名，而 Scss 是以“.scss”后缀为扩展名。</li><li>语法书写方式不同，Sass 是以严格的缩进式语法规则来书写，不带大括号({})和分号(;)，而 Scss 的语法书写和我们的 CSS 语法书写方式非常类似。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目实战 </tag>
            
            <tag> SCSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css定位小技巧</title>
      <link href="/2021/11/11/2021-11-11-css%E5%AE%9A%E4%BD%8D%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/2021/11/11/2021-11-11-css%E5%AE%9A%E4%BD%8D%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<p>最近在忙着做组件，发现之前的组件做的不好看，其关键在于我们没有 UI 标准，所有的标准由产品定，设计就出一个看上去大差不差的效果图（尺寸没有按标准来做，多少会差个几像素）。然后开发按照原型标准来做</p><p>这倒是的我们前端出的产品处于没有标准但看上去是一回事的状况</p><p>这不，在重构过程中，我发现之前的组件的不合理之处</p><p>在做 <code>Tag</code> 标签组件时，发现加 border 的标签比其他的都长了</p><p><img src="https://i.loli.net/2021/11/11/dQjh4stNzDMi9YO.png" alt="image-20211111142921445"></p><p>查看 CSS，发现是因为 border 的长度导致，因为这里有三个标签，加起来就有 6 个像素，所以看起来就很明显</p><p>使用 <code>box-sizing: border-box</code> 更改盒模型，回顾一下，盒模型有哪几种，</p><p>标准盒模型</p><ul><li>width= content</li></ul><p>IE 盒模型（怪异盒子）</p><ul><li>width=content+border+padding</li></ul><p>但问题是我所有的盒模型都已经格式化为 <code>border-box</code>。所以这个方法没有用</p><p>参考了一下同行的做法，这里给有赞一个赞</p><p>他们的做法是对主 UI 做相对定位，再在 before 中添加绝对定位，即</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.Tag</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  &amp;<span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">    <span class="attribute">border-color</span>: inherit;</span><br><span class="line">    <span class="attribute">border-radius</span>: inherit;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">pointer-events</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就做到了在 主容器中（Tag 组件）实现边框的内嵌</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目实战 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的历史梳理</title>
      <link href="/2021/11/06/2021-11-06-%E6%88%91%E7%9A%84%E5%8E%86%E5%8F%B2%E6%A2%B3%E7%90%86/"/>
      <url>/2021/11/06/2021-11-06-%E6%88%91%E7%9A%84%E5%8E%86%E5%8F%B2%E6%A2%B3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在微博写周末闲谈，写着写着就超过了一千字，想着干脆写完整了，放在博客上，记录一下 27 岁时我的历史观</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>最近这两周来，一直在看温铁军教授的视频，很受感触，从三农问题说到国家战略；从国际政治说到马列主义，再到中国特色社会主义；从东西方文明接触的始点说到现在的贸易战，再到中国的应对。总之，我的历史观有被重塑。强烈推荐朋友们去看一看</p><p>这里我抛砖引玉把我的所知所记写下来，东西在脑子里，想到哪写什么</p><p>秦始皇统一中国，二世被灭。起源于不在于秦的暴政，而是他“<strong>车同轨，书同文，统一度量尺</strong>”等一些列措施得罪了各种利益阶级。像车同轨，得罪的就是贵族，为什么呢？各个国家的车轨尺寸不同，你一统一，尺寸不同意味着身份不同；同理书同文得罪的是文人；统一度量尺得罪的是商人（商人可在各个国家套利）。秦统一为了管理整个天下，必须要中央集权，搞郡县制，不再搞分封，毕竟周朝的分封已经证明失败，但要把不统一改为统一，必然招到反噬</p><p>像现在 200 多个国家和地区，要是有强人想统一整个地球，即靠武力统一地球，实现统一语言、文字、标准，阻力肯定很大，也许根本推行不下去。秦那个时候就处于那样的状况，结果是屁股还没坐稳几年，就被灭了</p><p>到了汉朝，前几代皇帝休养生息，文景之治就在这时发生的，安稳了几年，国库里有了存款。汉武帝也是千古一帝，他想打匈奴了。再次之前，汉朝是要每年给匈奴钱交不侵略费的，现在汉武帝硬气不干了。其实匈奴来犯也是有原因的，因为那个时候正处于 XX 时期，气候正好变冷，他们必须南下生存，所以来犯。</p><p>汉武帝做到了每户人家没儿子的必须养马，有男丁的必须出一人，去打战时是一个人牵着两匹马上的，霍去病、卫青、李广就是那个时候的出来的英雄，因为他们打的是外来侵略者，所以在历史上的名气大，而秦国时期大将白起、蒙恬知道的人就少了（对老百姓而言）。匈奴被汉武帝打败后，还是要生活啊，怎么办，往西走，翻过喀尔巴阡山脉，进入东欧，跟欧洲的原始部落冲突，最终进入中欧、北欧一代，把这一代的日耳曼蛮族南压，罗马人打不过，允许日耳曼南下，进入意大利，最终是日耳曼蛮族灭了西罗马</p><p>简单来说，东方把匈奴（游牧民族）打到大漠以北，匈奴进入欧洲，引起欧洲动乱，使得西罗马灭亡（外因）。这次天气变化引起的打仗、让东西方文明都倒退了。东方倒退了 400 年，期间经历了东汉、三国、魏晋、十六国、南北朝，直到隋唐又一大一统；西方进入中世纪，直接倒退 1000 年，抗打击能力属实不行。</p><p>而在唐朝时期，听说又是因为天气原因。不过面对的是突厥。突厥分东西突厥。唐朝李世民照样打，打败了突厥后，吸纳了一部分，即新疆地区同胞，而另一部分突厥人往西跑，经过突厥走廊，并南下，到了今天的土耳其（安纳托利亚半岛），导致了东罗马（拜占庭）灭亡的一个外因</p><p>这就是两次文明冲突的</p>]]></content>
      
      
      <categories>
          
          <category> 有知有行 </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 历史 </tag>
            
            <tag> 温铁军 </tag>
            
            <tag> 东西文明 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搞轮子：皮肤概念的几种方案</title>
      <link href="/2021/11/03/2021-11-03-%E6%90%9E%E8%BD%AE%E5%AD%90%EF%BC%9A%E7%9A%AE%E8%82%A4%E6%A6%82%E5%BF%B5%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%A1%88/"/>
      <url>/2021/11/03/2021-11-03-%E6%90%9E%E8%BD%AE%E5%AD%90%EF%BC%9A%E7%9A%AE%E8%82%A4%E6%A6%82%E5%BF%B5%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>而且我还希望能有灰度模式和暗黑模式，皮肤概念孕育而生</p><p>大厂的做法</p><p>vant</p><p>ant-design</p><p>zarm</p><p>考察下来，zarm 最符合我的预期</p><p>按 zarm 的来</p><p>简单来说，使用 context 来做主题色，因为 context 能传递到任意组件，接下来就看怎么写</p><p>皮肤解决方案</p><p><a href="https://segmentfault.com/a/1190000041195585?_ea=195391016">https://segmentfault.com/a/1190000041195585?_ea=195391016</a></p><p>CSS 变量</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--bg-color</span>: brown; // 定义颜色变量</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  // 直接使用颜色预定义的颜色变量</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--bg-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://css-tricks.com/switch-font-color-for-different-backgrounds-with-css/">https://css-tricks.com/switch-font-color-for-different-backgrounds-with-css/</a></p><p><a href="https://zhuanlan.zhihu.com/p/494460951">https://zhuanlan.zhihu.com/p/494460951</a></p><p><a href="https://mp.weixin.qq.com/s/6bmqki5IPDlD4H7a7C1HXw">https://mp.weixin.qq.com/s/6bmqki5IPDlD4H7a7C1HXw</a></p><p>张鑫旭的换肤方案</p><p><a href="https://www.bilibili.com/video/BV1kU4y1X7a8?vd_source=55c655c3b4aed7bb7a250da7eea13eb8">https://www.bilibili.com/video/BV1kU4y1X7a8?vd_source=55c655c3b4aed7bb7a250da7eea13eb8</a></p><p><a href="https://juejin.cn/post/7117911005841063944">https://juejin.cn/post/7117911005841063944</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搞轮子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目实战：服务器中的nginx和docker起的nginx冲突怎么办</title>
      <link href="/2021/11/02/2021-11-02-%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E7%9A%84nginx%E5%92%8Cdocker%E8%B5%B7%E7%9A%84nginx%E5%86%B2%E7%AA%81%E6%80%8E%E4%B9%88%E5%8A%9E/"/>
      <url>/2021/11/02/2021-11-02-%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E7%9A%84nginx%E5%92%8Cdocker%E8%B5%B7%E7%9A%84nginx%E5%86%B2%E7%AA%81%E6%80%8E%E4%B9%88%E5%8A%9E/</url>
      
        <content type="html"><![CDATA[<p>今天，后端过来说有个需求需要前端帮忙，我立即摆谱：“哼，什么问题？”</p><p>他连忙跑到我的座位前，窜着手机跟我说：“我发你一个链接，能不能把这些代码放到 hosts 文件里。”</p><p>我说：“这是什么？为什么要放。”</p><p>经过他的解释，大致是</p><blockquote><p>前端点击一个按钮，调用 API ，后端返回一个 url，url 是第三方链接（后端对接第三方公司返回的链接），因为第三方链接的测试环境需要内网环境才能测试，所以要测试这个产品需要配置 hosts 文件</p></blockquote><p>我的理解是，这个只需要在本机上添加 hosts 文件，让测试添加即可，管我前端什么事！</p><p>后来经过拉锯战，他找来技术负责人，负责人亲自讲解，希望我把这些代码放到前端服务器的 hosts 文件中</p><p>没办法，说了不听，听了不悦，要我做。官大一级压死人。这里也很有意思，技术人员中，如果你技术真的过硬，听你的，确实没问题，到后面下级还能学到东西。但是如果上级技术一般，这个知识点不是很懂，那么只能试，试就需要成本，这次就是一次成本代价</p><p>我在服务器上的 hosts 中添加代码后，网站就访问不了了，nginx 502</p><p>我感觉删掉添加的代码，再重启 DNS 服务，结果还是不行</p><p>继续搞，搞半天才想起来我的站点部署在 docker 中，启动服务器的 nginx 没用</p><h2 id="搞-docker"><a href="#搞-docker" class="headerlink" title="搞 docker"></a>搞 docker</h2><p>常用命令</p><ul><li><code>docker ps</code> 查看运行的容器</li><li><code>docker exec -it containerID /bin/bash</code> 进入指定容器的 docker 服务</li></ul><p>先删掉原本的 docker，在手动启动 docker 命令（同事写好的 bash 文件）</p><p>直接报错，反向代理不能用字母</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">host not found <span class="keyword">in</span> upstream <span class="string">&quot;XXX.com&quot;</span> <span class="keyword">in</span> /etc/nginx/conf.d/default.conf:18</span><br><span class="line">nginx: [emerg] host not found <span class="keyword">in</span> upstream <span class="string">&quot;XXX.com&quot;</span> <span class="keyword">in</span> /etc/nginx/conf.d/default.conf:18</span><br></pre></td></tr></table></figure><p>暂时找不到原因，先改，改成 ip 后，启动成功，使用</p><p><code>docker exec -it containerID /bin/bash</code> 进入容器中，查看 docker 中的 nginx 和静态文件是否有问题，发现都是最新的，理论上是没问题的</p><p>回到服务中，再查看端口占用</p><p><code>ps -ef | grep nginx</code></p><p>有好几个 nginx 的服务是启动的</p><p>所以猜想是不是 hosts 文件添加之后，docker 自动被弄坏了，然后我再启动了 nginx，nginx 和 docker 启动的 nginx 冲突，所以即使把 hosts 文件恢复了，因为 nginx 一直启动着，所以 docker 启动的容器一直不能访问</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>简单来说，把服务器中的 <code>nginx</code> 关掉，再重启 <code>docker</code> 容器即可</p><p>一、查找 <code>nginx</code> 所占的端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure><p>二、杀掉所有的与 <code>nginx</code> 相关的端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 12782</span><br></pre></td></tr></table></figure><p>三、重启 <code>docker</code> 相关容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart f4d</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到最后解决方案很简单，但主要是排查能力和对命令的熟悉</p><p>这次排查唤起了我对很多 nginx 和 docker 的知识点，明年要对这两块做重新的知识梳理</p>]]></content>
      
      
      <categories>
          
          <category> 实战 </category>
          
          <category> 公司项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验之谈 </tag>
            
            <tag> Nginx </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>左边固定宽，右边自适应的6种方法</title>
      <link href="/2021/10/28/2021-10-28-%E5%B7%A6%E8%BE%B9%E5%9B%BA%E5%AE%9A%E5%AE%BD%EF%BC%8C%E5%8F%B3%E8%BE%B9%E8%87%AA%E9%80%82%E5%BA%94/"/>
      <url>/2021/10/28/2021-10-28-%E5%B7%A6%E8%BE%B9%E5%9B%BA%E5%AE%9A%E5%AE%BD%EF%BC%8C%E5%8F%B3%E8%BE%B9%E8%87%AA%E9%80%82%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<p>这是一道面试题，你有多少种办法呢？</p><p>这里我们假设左边名为 left，宽度为 200 px，右边名为 right。即默认</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我的理解分四大类</p><ul><li>flex 布局<ul><li>需设置父元素高度</li></ul></li><li>grid 布局<ul><li>需设置父元素高度</li></ul></li><li>绝对定位<ul><li>双子元素 absolute<ul><li>不需要设置父元素高度</li><li>子元素都设置高度，右边子元素 <code>left：200px</code> + <code>width: 100%</code></li></ul></li><li>左元素 absolute + 右元素 margin-left<ul><li>不需要设置父元素高度</li><li>子元素都设置高度，右边子元素 <code>margin-left: 200px</code> + <code>width: 100%</code></li></ul></li></ul></li><li>float 浮动<ul><li>左元素左浮动，右元素不动<ul><li>无需父元素</li><li>左元素需设置宽高和浮动，右元素设置高度即可</li></ul></li><li>左元素左浮动，右元素右浮动<ul><li>无需父元素</li><li>左元素设置宽高和左浮动，右元素设置右浮动以及高和宽（<code>width: calc(100% - 200px)</code>）</li></ul></li></ul></li></ul><h2 id="flex-布局"><a href="#flex-布局" class="headerlink" title="flex 布局"></a>flex 布局</h2><p>需要一个父元素做 flex 布局，且需要给它一个高度（撑开容器）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="grid-布局"><a href="#grid-布局" class="headerlink" title="grid 布局"></a>grid 布局</h2><p>高级的布局方式，子元素不需要设置宽度，单单设置父元素属性即可。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">200px</span> <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双子元素-absolute"><a href="#双子元素-absolute" class="headerlink" title="双子元素 + absolute"></a>双子元素 + absolute</h2><p>需要给子元素设置宽高，不然撑不起来。右元素设置<code>left: 200px</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="左元素-absolute-右元素-margin-left"><a href="#左元素-absolute-右元素-margin-left" class="headerlink" title="左元素 absolute + 右元素 margin-left"></a>左元素 absolute + 右元素 margin-left</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="无父元素-左元素左浮动，右元素不动"><a href="#无父元素-左元素左浮动，右元素不动" class="headerlink" title="无父元素 + 左元素左浮动，右元素不动"></a>无父元素 + 左元素左浮动，右元素不动</h2><p>前两种都需要有个父元素，但浮动不需要</p><p>左边浮动，下一个元素独占位置，并排一行</p><p>同样，需要设置高度，子元素才能撑开</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="无父元素-左边左浮动，右边有浮动"><a href="#无父元素-左边左浮动，右边有浮动" class="headerlink" title="无父元素 + 左边左浮动，右边有浮动"></a>无父元素 + 左边左浮动，右边有浮动</h2><p>浮动不需要父元素，浮动就区别于正常文档流</p><p>我的理解是正常文档流是二维层面，而浮动相当于成了三维，区别于 Z 轴</p><p>右边元素有浮动不够，还需要设置宽度</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">200px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要是 float 实现此功能的，都不需要父元素，以及自身都需要设置高度</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>简单来说，实现布局最好的方式是 flex，简单兼容现代浏览器和机型。当然，我是因为还没有学 grid（但 grid 要记得参数比较多）。绝对定位和浮动各有优缺点</p><table><thead><tr><th>各大方法</th><th>优缺点</th><th>需要什么</th></tr></thead><tbody><tr><td>flex</td><td>布局简单</td><td>需要父元素、高度。子项 <code>flex:1</code></td></tr><tr><td>grid</td><td>布局最简单，但兼容性更现代</td><td>只需要父元素设置属性就好</td></tr><tr><td>绝对定位</td><td>兼容性更高</td><td>需要父元素做相对定位、高度</td></tr><tr><td>浮动</td><td>兼容性更高</td><td>不需要父元素，子项都需要宽高</td></tr></tbody></table><p>float 区别于其他三种，不需要父元素做容器</p><p>grid 区别于其他三种，不需要设置子元素（左元素的）宽</p><p>绝对定位区别于其他三种，它的方法不仅要父元素有高，其子元素也要有高</p><p>flex 最简单</p><p>附上<a href="https://demo.azhubaby.com/%E5%B7%A6%E8%BE%B9%E5%9B%BA%E5%AE%9A%EF%BC%8C%E5%8F%B3%E8%BE%B9%E8%87%AA%E9%80%82%E5%BA%94.html">线上 demo</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水平垂直居中的17种方法</title>
      <link href="/2021/10/25/2021-10-25-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/"/>
      <url>/2021/10/25/2021-10-25-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<blockquote><p>面试的时候，绝不能只说一种，绝不能说一种解决方案，绝不能停下你吞吞吐吐的嘴</p></blockquote><p>CSS 方面问的最多的问题之一，我想分三种情况，水平居中、垂直居中和水平垂直居中来分析</p><p>单单就水平垂直居中而言，大概有以下几种方案：</p><p>居中元素不定宽高</p><ul><li>absolute + transform</li><li>flex 属性居中</li><li>flex + 子项 margin auto</li><li>grid 属性居中</li><li>grid + 子项 margin auto</li><li>grid + 子项属性居中</li><li>-webkit-box 属性居中</li><li>table-cell + text-align</li><li>line-height + text-align</li><li>writing-mode</li><li>table</li></ul><p>仅居中元素定宽高适用：</p><ul><li>须知宽高 + absolute + 负 margin</li><li>须知宽高 + absolute + calc</li><li>须知宽高 + absolute + margin auto</li></ul><p>局限性较大的全局居中</p><ul><li>须知宽高 + fixed + transform</li><li>须知宽高 + fixed + 负 margin</li><li>须知宽高 + fixed + calc</li><li>须知宽高 + fixed + margin auto</li></ul><h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><h3 id="text-align：-center"><a href="#text-align：-center" class="headerlink" title="text-align： center"></a>text-align： center</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-align</span>: center;</span><br></pre></td></tr></table></figure><p>需设置 <code>display: inline-block</code> 行内块元素</p><h3 id="绝对定位-transform-位移"><a href="#绝对定位-transform-位移" class="headerlink" title="绝对定位 + transform 位移"></a>绝对定位 + transform 位移</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span><br></pre></td></tr></table></figure><p>脱离文档流</p><h3 id="宽度-margin-0-auto"><a href="#宽度-margin-0-auto" class="headerlink" title="宽度+ margin: 0 auto"></a>宽度+ margin: 0 auto</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br></pre></td></tr></table></figure><p>这里说明下，<code>width:100px</code> 必须是具体的数字，且这个居中是外层居中，宽度中的内容没有居中</p><h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><h3 id="绝对定位-transform-位移-1"><a href="#绝对定位-transform-位移-1" class="headerlink" title="绝对定位 + transform 位移"></a>绝对定位 + transform 位移</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br></pre></td></tr></table></figure><p>与水平方向的居中一样，都是脱离文档流的做法</p><h3 id="table-cell-vertical-align"><a href="#table-cell-vertical-align" class="headerlink" title="table-cell + vertical-align"></a>table-cell + vertical-align</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: table-cell;</span><br><span class="line"><span class="attribute">vertical-align</span>: middle;</span><br></pre></td></tr></table></figure><p><code>display: table-cell</code> ，让其标签元素以表格单元格的形式呈现，类似于 <code>td</code> 标签，</p><p><code>vertical-align: middle</code>，用来指定行内元素（inline）或表格单元格（table-cell）元素的垂直居中</p><h2 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h2><h3 id="绝对居中-transform-位移"><a href="#绝对居中-transform-位移" class="headerlink" title="绝对居中 + transform 位移"></a>绝对居中 + transform 位移</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line">    123123</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="flex-属性居中"><a href="#flex-属性居中" class="headerlink" title="flex 属性居中"></a>flex 属性居中</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line">    123123</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="flex-margin-auto"><a href="#flex-margin-auto" class="headerlink" title="flex + margin auto"></a>flex + margin auto</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line">    123123</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="grid-属性居中"><a href="#grid-属性居中" class="headerlink" title="grid 属性居中"></a>grid 属性居中</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span>123123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">// 或者</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line">    123123</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="grid-子项属性居中"><a href="#grid-子项属性居中" class="headerlink" title="grid 子项属性居中"></a>grid 子项属性居中</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line">    123123</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: center;</span><br><span class="line">  justify-self: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="grid-margin-auto"><a href="#grid-margin-auto" class="headerlink" title="grid + margin auto"></a>grid + margin auto</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line">    123123</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>grid 和 flex 很像，是 flex 的升级版，所以 grid 能做的事情更多</p><p>以上绝对定位、flex、grid 关于水平垂直居中的做法，剩下再说居中比较老的布局方法</p><h3 id="webkit-box-属性居中"><a href="#webkit-box-属性居中" class="headerlink" title="-webkit-box 属性居中"></a>-webkit-box 属性居中</h3><p>这是一个已经过时的布局，可以看看这篇文章 <a href="https://www.zhihu.com/question/22991944">CSS3 display: flex 和 display: box 有什么区别？</a></p><p>网友一丝说：</p><blockquote><p>flex 是 2012 年的语法，是以后的标准</p><p>box 是 2009 年的语法，已经过时，需要加上对应前缀</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line">    123123</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  -webkit-box-pack: center;</span><br><span class="line">  -webkit-box-align: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="table-cell-text-align"><a href="#table-cell-text-align" class="headerlink" title="table-cell + text-align"></a>table-cell + text-align</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line">    123123</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="line-height-text-align"><a href="#line-height-text-align" class="headerlink" title="line-height + text-align"></a>line-height + text-align</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line">    123123</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>line-height</code> 与 <code>height</code> ，行高和高度一样高，自然就垂直方向居中了</p><h3 id="writing-mode"><a href="#writing-mode" class="headerlink" title="writing-mode"></a>writing-mode</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;“son”&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;“sonson”&quot;</span>&gt;</span></span><br><span class="line">      123123</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">writing-mode</span>: tb-lr;</span><br><span class="line">  <span class="attribute">writing-mode</span>: vertical-lr;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.father</span> <span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">writing-mode</span>: lr-tb;</span><br><span class="line">  <span class="attribute">writing-mode</span>: horizontal-tb;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father9</span> <span class="selector-class">.son</span> <span class="selector-class">.sonson</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">text-align</span>: initial;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个很冷闷，有人介绍过<a href="https://liyongleihf2006.github.io/center-box/">这种情况</a></p><h3 id="table"><a href="#table" class="headerlink" title="table"></a>table</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line">          123123</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>table 标签自己将它垂直居中了，<code>text-align:center</code> 后就是水平居中了</p><p>可以看 <a href="https://codepen.io/jojobo/pen/ExvWPbP">demo</a></p><p>当<strong>元素有宽高</strong>的情况，又多了三种方案</p><h3 id="须知宽高-绝对居中-margin-负边距"><a href="#须知宽高-绝对居中-margin-负边距" class="headerlink" title="须知宽高 + 绝对居中 + margin 负边距"></a>须知宽高 + 绝对居中 + margin 负边距</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;father&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;son&quot;&gt;</span><br><span class="line">        <span class="number">123123</span></span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">50px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>父元素必须要有个高度，这样才能撑开容器。子元素必须要有个宽高，才能计算出 margin 值</p><h3 id="须知宽高-绝对定位-calc"><a href="#须知宽高-绝对定位-calc" class="headerlink" title="须知宽高 + 绝对定位 + calc"></a>须知宽高 + 绝对定位 + calc</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line">    123123</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">50px</span>);</span><br><span class="line">  <span class="attribute">left</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">50px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与 margin 负边距一个道理，父元素需要设置一个高度。子元素必须要有高度，不用 margin，而用 CSS3 中的 calc，计算出要居中位移，兼容性需要支持 CSS3 属性</p><h3 id="须知宽高-绝对居中-margin-auto"><a href="#须知宽高-绝对居中-margin-auto" class="headerlink" title="须知宽高 + 绝对居中 + margin: auto"></a>须知宽高 + 绝对居中 + margin: auto</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line">    123123</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同以上两种情况。</p><p>这三种需要定位方式来实现水平垂直居中的方法，需要设置父元素的高度（一定要有，撑开画面），子元素需要设置宽高，前两种方法是为了算出它在父元素中的相对位置，后一种方法是为了说明子元素是个容器（如果不设置宽高，就是无）</p><h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><p>其实，水平垂直居中方面，如果面试官硬要问还有吗？还真的有，用 <strong>fixed 定位</strong>。但这个方法有缺陷，虽然能实现水平垂直居中，但它是相对于视口（viewport），而非父元素</p><p>方法就是以上用 absolute 实现的改成 fixed 即可</p><ul><li>须知宽高 + fixed + transform</li><li>须知宽高 + fixed + 负 margin</li><li>须知宽高 + fixed + calc</li><li>须知宽高 + fixed + margin auto</li></ul><p>这四种方法，都需要设置子元素的宽高</p><p>这里贴一下代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line">    123123</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* transform */</span></span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 负 margin */</span></span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* calc */</span></span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">50px</span>);</span><br><span class="line">  <span class="attribute">left</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">50px</span>);</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* margin: auto */</span></span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>随着微软宣布放弃 IE11，现实项目中完全可以使用 flex 布局，grid 部分还不适配，但是以后肯定会取代 flex。</p><p>虽然写了很多，但是自己工作中也不会使用 table 、writing-mode、-webkit-box 等过时的布局方式，写这篇文章，纯粹是为了面试时被问到这种问题。</p><p>收获是 absolute 的居中要父子同心（父元素设置高度，子元素设置宽高），fixed 的居中只需要设置子元素的宽高。</p><p>线上 <a href="https://demo.azhubaby.com/%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD.html">demo</a> 查看</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/ljianshu/Blog/issues/29">如何居中一个元素（终结版）</a></li><li><a href="https://juejin.cn/post/6844904121862979597#heading-2">给你一份详细的 CSS 布局指南，请查收</a></li><li><a href="https://yanhaijing.com/css/2018/01/17/horizontal-vertical-center/">CSS 实现水平垂直居中的 1010 种方式（史上最全）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 布局 </tag>
            
            <tag> 水平垂直居中 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flex从总结到了解</title>
      <link href="/2021/10/19/2021-10-19-flex%E4%BB%8E%E6%80%BB%E7%BB%93%E5%88%B0%E4%BA%86%E8%A7%A3/"/>
      <url>/2021/10/19/2021-10-19-flex%E4%BB%8E%E6%80%BB%E7%BB%93%E5%88%B0%E4%BA%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>flex 是一种布局方式，在 CSS3 之后开始有。它主要由父容器和子项组成，父容器有六个属性，分别为：</p><ul><li>控制主轴轴向：<code>flex-direction</code><ul><li>row：横轴（默认）</li><li>row-reverse：倒过来的横轴</li><li>column：竖轴</li><li>column-reverse：倒过来的竖轴</li></ul></li><li>换行方式：<code>flex-wrap</code><ul><li>nowrap：不换行（默认）</li><li>wrap：换行</li><li>wrap-reverse：反着换行</li></ul></li><li>主轴排列：<code>justify-content</code></li><li>交叉轴排列：<code>align-items</code></li><li>轴向与换行组合设置：<code>flex-flow</code>（流向）<ul><li>一般很少用这个属性，即改变子项的布局顺序，正着来，倒着来</li></ul></li></ul><p>子项也有六个属性，分别为：</p><ul><li>弹性扩展：<code>flex-grow</code><ul><li>指定容器剩余空间多余时的分配规则</li><li>默认值为 0，多余空间不分配</li></ul></li><li>弹性收缩：<code>flex-shrink</code><ul><li>指定容器剩余空间不足时的分配规则</li><li>默认值为 1，空间不足要分配；如果为 0，表示不分配</li></ul></li><li>基础尺寸：<code>flex-basis</code><ul><li>指定 flex 元素在主轴方向上的初始大小（基础尺寸）</li><li>默认值为 auto，即项目本身大小</li></ul></li><li><strong>缩写：<code>flex</code></strong><ul><li>flex-grow、flex-shrink、flex-basis 的缩写</li><li>默认值为 0 1 auto</li></ul></li><li>主轴顺序：<code>order</code></li><li>交叉轴对齐方式：<code>align-self</code></li></ul><p>总的来说，<strong>父容器控制整体布局，子项控制子项布局</strong></p><p>在面试中，常常不会问怎么宽泛，最常见的 flex 面试题为：</p><ul><li><code>flex: 0 1 auto</code> 怎么理解？</li><li><code>flex: 1</code>具体代表什么，有什么应用场景</li><li><code>flex: 0</code>、<code>flex: 1</code>、<code>flex: none</code>、<code>flex: auto</code>，表示什么意思，并应用在什么场景下使用？</li></ul><p>要想回答这些问题，我们必须了解子项中的 flex 属性</p><h2 id="flex-语法"><a href="#flex-语法" class="headerlink" title="flex 语法"></a>flex 语法</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex</span>: none | auto | [&lt; <span class="string">&#x27;flex-grow&#x27;</span> &gt; &lt; <span class="string">&#x27;flex-shrink&#x27;</span> &gt;? || &lt; <span class="string">&#x27;flex-basis&#x27;</span> &gt; ];</span><br></pre></td></tr></table></figure><p>单管道符 <code>|</code> ，表示排他。也就是这个符号前后的属性值都是支持的，且不能同时出现。因此，下面这些语法都是支持的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex</span>: auto;</span><br><span class="line"><span class="attribute">flex</span>: none;</span><br><span class="line"></span><br><span class="line"><span class="attribute">flex</span>: [&lt; <span class="string">&#x27;flex-grow&#x27;</span> &gt; &lt; <span class="string">&#x27;flex-shrink&#x27;</span> &gt;? || &lt; <span class="string">&#x27;flex-basis&#x27;</span> &gt;];</span><br></pre></td></tr></table></figure><p>方括号 <code>[...]</code> 表示范围。支持的属性在这个范围内</p><p>其中 <code>?</code> ，表示 0 个或者 1 个，也就是说 <code>flex-shrink</code> 属性可有可无。因为 flex 属性值也可以是 2 个值</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex</span>: auto;</span><br><span class="line"><span class="attribute">flex</span>: none;</span><br><span class="line"><span class="comment">/* 2个值 */</span></span><br><span class="line"><span class="attribute">flex</span>: <span class="number">1</span> <span class="number">100px</span>;</span><br><span class="line"><span class="comment">/* 3个值 */</span></span><br><span class="line"><span class="attribute">flex</span>: <span class="number">1</span> <span class="number">1</span> <span class="number">100px</span>;</span><br></pre></td></tr></table></figure><p>双管道 <code>||</code> ，表示”或者“的意思。表示前后可以分开独立使用，也就是 <code>flex: flex-grow flex-shrink?</code> 和 <code>flex-basis</code> 都是合法的。于是我们又多了 2 种合法的写法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1个值，flex-basis */</span></span><br><span class="line"><span class="attribute">flex</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="comment">/* 2个值，flex-grow 和 flex-shrink */</span></span><br><span class="line"><span class="attribute">flex</span>: <span class="number">1</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="转为文字表述"><a href="#转为文字表述" class="headerlink" title="转为文字表述"></a>转为文字表述</h3><p>单值语法：</p><p> 如果 flex 的属性值只有一个值，有三种情况</p><ul><li><p>一个无单位数，例如例如 <code>flex: 1</code>，表示 <code>flex-shrink: 1</code>，剩余空间扩展。此时，<code>flex-shrink</code> 和 <code>flex-basis</code> 的值分别是 1 和 0%。注意，这里的 <code>flex-basis</code> 的值是 0%，而不是默认值 <code>auto</code></p><ul><li>只要改变 <code>flex: 数字</code>，<code>flex-basis</code> 的值就为 0</li></ul></li><li><p>一个有效的宽度（width）值，表现形式为长度值，例如 <code>flex: 100px</code>，表示<code>flex-basis: 100px</code>，基础尺寸为 100px。此时，<code>flex-grow</code> 和 <code>flex-shrink</code> 的值都是 1，注意，这里的 <code>flex-grow</code> 的值是 1，而不是默认值 0</p></li><li><p>关键字 <code>none</code>，<code>auto</code> 或 <code>initial</code></p></li></ul><p>双值语法：</p><p> 如果 flex 的属性值有两个值，则第 1 个值一定是 <code>flex-grow</code>，第 2 个根据值的类型不同表示不同的 CSS 属性，具体规则如下：</p><ul><li>数值：例如<code>flex: 1 2</code>，则这个 2 表示 <code>flex-shrink</code>，此时 <code>flex-basis</code> 的值为 0%，而非默认值 auto</li><li>长度值，例如<code>flex: 1 100px</code>，则这个 <code>100px</code> 值 <code>flex-basis</code>，此时 <code>flex-shrink</code> 默认值为 0</li></ul><p>三值语法：</p><p> 如果 flex 的属性值有 3 个值，则长度值表示 <code>flex-basis</code>，其余 2 个数值分别表示<code>flex-grow</code> 和 <code>flex-shrink</code>。下面两行 CSS 语句的语法都是合法的，且含义也是一样的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex</span>: <span class="number">1</span> <span class="number">2</span> <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">flex</span>: <span class="number">50%</span> <span class="number">1</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h2 id="flex-属性值场景应用"><a href="#flex-属性值场景应用" class="headerlink" title="flex 属性值场景应用"></a>flex 属性值场景应用</h2><p>flex 默认值为 0 1 auto。除此之外，还有各种其他值</p><ul><li><p>flex: none，等同于 flex: 0 0 auto;</p></li><li><p>flex: auto，等同于 flex: 1 1 auto;</p></li><li><p>flex: 1，等同于 flex: 1 1 0%;</p></li><li><p>flex: 0，等同于 flex 0 1 0%;</p></li></ul><p>张鑫旭大神画过一张图：</p><table><thead><tr><th>单值语法</th><th>等同于</th><th>备注</th></tr></thead><tbody><tr><td>flex: initial</td><td>flex: 0 1 auto</td><td>初始值，常用</td></tr><tr><td>flex: 0</td><td>flex: 0 1 0%</td><td>适用场景少</td></tr><tr><td>flex: none</td><td>flex: 0 0 auto</td><td>推荐</td></tr><tr><td>flex: 1</td><td>flex: 1 1 0%</td><td>推荐</td></tr><tr><td>flex: auto</td><td>flex: 1 1 auto</td><td>适用场景少</td></tr></tbody></table><h3 id="默认值-flex-initial"><a href="#默认值-flex-initial" class="headerlink" title="默认值 flex: initial"></a>默认值 flex: initial</h3><p>它等同于 <code>flex:0 1 auto</code>，表示 flex 容器有剩余空间时尺寸不增长（<code>flex-grow</code>: 0），flex 容器尺寸不足时尺寸会收缩变小（<code>flex-shrink</code>:1），尺寸自适应于内容（<code>flex-basis</code>:auto）</p><p>我的理解：子项总长度小于总容器时，不会去撑满（<code>flex-grow</code>:0），而按实际宽高度存在(<code>flex-basis</code>:auto)；当子项总长度大于总容器时，子项会相对于的收缩相对比例（<code>flex-shrink</code>:1）</p><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><p>适用于子项总长度小于总容器的场景，例如按钮、标题、小图标等小部件的排版布局</p><h3 id="flex-0-和-flex-none-的区别"><a href="#flex-0-和-flex-none-的区别" class="headerlink" title="flex: 0 和 flex: none 的区别"></a>flex: 0 和 flex: none 的区别</h3><p><code>flex: 0</code> 等同于设置 <code>flex: 0 1 0%</code>，<code>flex:none</code> 等同于 <code>flex: 0 0 auto</code></p><p><code>flex: 0</code>，因为是一个值且为数值，所以它表示 <code>flex-grow</code>，后续我发现只用设置了<code>flex: 数字</code>，那么 <code>flex-basis</code> 就自动成了 0%，所以，设置<code>flex:0</code> 的元素的最终尺寸表示为最小内容宽度；</p><blockquote><p>注意：</p><p>flex: 1 === flex: 1 1 0%</p><p>flex: 0 === flex: 0 1 0%</p><p>flex 设置为数字后，虽然 <code>flex-basis</code> 为最小宽度，但是前者的 <code>flex-grow</code> 有值，可以把子项扩充满容器，后者为 0，不扩展</p></blockquote><p><code>flex: none</code>，既不是数值也不是长度值，<code>none</code> 关键字。<code>flex: 0 0 auto</code> 表示元素尺寸不会收缩也不会扩展，再加上 <code>flex-basis: auto</code> 表示固定尺寸由内容决定，由于元素不具有弹性，因为，元素内的元素不会换行，最终尺寸通常表现为最大内容宽度</p><h4 id="适用使用-flex-0-的场景"><a href="#适用使用-flex-0-的场景" class="headerlink" title="适用使用 flex: 0 的场景"></a>适用使用 flex: 0 的场景</h4><p><img src="https://i.loli.net/2021/10/19/PpGRc8WHfSVTw9a.png" alt="flex：0的应用场景"></p><p>无论文字的内容给如何设置，左侧内容的宽度都是图像的宽度</p><h4 id="适合使用-flex-none-的场景"><a href="#适合使用-flex-none-的场景" class="headerlink" title="适合使用 flex: none 的场景"></a>适合使用 flex: none 的场景</h4><p>当 flex 子项的宽度就是内容的宽度，且内容永远不会换行，则适合使用 <code>flex:none</code>，例如如下的场景，图片和按钮固定长度，内容弹性</p><p><img src="https://i.loli.net/2021/10/19/ANQzfkuT4xiaXsO.png" alt="flex:none适用场景"></p><h3 id="flex-1-和-flex-auto-的区别和适用场景"><a href="#flex-1-和-flex-auto-的区别和适用场景" class="headerlink" title="flex: 1 和 flex: auto 的区别和适用场景"></a>flex: 1 和 flex: auto 的区别和适用场景</h3><p><code>flex:1</code> 等同于设置 <code>flex: 1 1 0%</code> ，<code>flex: auto</code> 等同于 <code>flex: 1 1 auto</code></p><p>可以看出两者的 <code>flex-grow</code> 和 <code>flex-shrink</code> 都是一样的，意味着它们都可以弹性扩展以及弹性收缩，区别在于 <code>flex: 1</code> 中 <code>flex-basis</code> 为 0，即宽度为 0。<code>flex:auto</code> 中的 <code>flex-basis</code>为 auto，即宽度为自身宽度</p><p>表现的样子为：</p><p><img src="https://i.loli.net/2021/10/19/SKf1ap8zXUxWiMP.png" alt="flex:1"></p><p>这里需要解释一下，因为我最开始也不理解，其公式为：</p><p>每个子项的宽度 = （总宽度 - <code>flex-basis</code> 的宽度）/ 3（以这个例子为例）</p><p>因为 <code>flex:1</code> 的 <code>flex-basis</code> 的宽度为 0 ，所以最后它的总宽度扩张或者收缩时每个子项都能等分</p><h4 id="适用于-flex-1-的场景"><a href="#适用于-flex-1-的场景" class="headerlink" title="适用于 flex: 1 的场景"></a>适用于 flex: 1 的场景</h4><p>当希望元素充分利用剩余空间，同时不会侵占其他元素应用的宽度的适用，适合适用 <code>flex:1</code>，例如所有的等分列表</p><p>之前适用 <code>flex: none</code> 的例子，同样设置文字部分<code>flex: 1</code> 也能实现类似的效果</p><p><img src="https://i.loli.net/2021/10/19/xjmG7w3JEhv86Ms.png" alt="flex:1"></p><h4 id="适用于-flex-auto-的场景"><a href="#适用于-flex-auto-的场景" class="headerlink" title="适用于 flex: auto 的场景"></a>适用于 flex: auto 的场景</h4><p>当希望元素充分利用剩余空间，但是各自的尺寸按照各自内容进行分配的时候，适用于 <code>flex: auto</code></p><p>例如导航数量不固定，每个导航文字数量页不固定的导航效果就适合适用 <code>flex: auto</code></p><p><img src="https://i.loli.net/2021/10/19/z5jdOucg6e3UxHq.png" alt="flex-auto"></p><p>回过头来看之前说的面试题</p><ol><li><code>flex: 0 1 auto</code> 怎么理解？</li><li><code>flex: 1</code>具体代表什么，有什么应用场景</li><li><code>flex: 0</code>、<code>flex: 1</code>、<code>flex: none</code>、<code>flex: auto</code>，表示什么意思，并应用在什么场景下使用？</li></ol><p>第一个问题回答</p><p>flex 的默认值为 0 1 auto，表示容器剩余空间有多余的时候不扩展，不足的时候收缩，子项的宽度根据自身的宽度来展示</p><p>第二个问题回答</p><p>脑子思考 flex 的值如果是一个值且为数字，说明是 <code>flex-grow:1</code>，当它为数字时，<code>flex-basis</code> 会自动变成 0，所以它具体表示为 <code>flex:1 1 0%</code>，表示容器剩余空间有多余的时候扩展，不足的时候收缩，子项的宽度为 0。它一般适用于充分利用剩余空间，又不侵占其他元素的宽度，例如等分布局</p><p>第三个问题回答</p><p><code>flex:0</code>，表示 <code>flex: 0 1 0%</code>，表示容器剩余空间有多余的时候不扩展，不足的时候收缩，子项的宽度为 0，适用设置在替换元素的父元素上</p><p><code>flex:1</code>，看第二个回答</p><p><code>flex: none</code>，表示 <code>flex: 0 0 auto</code>，表示容器剩余空间有多余的时候不扩展，不足的时候也不收缩，子项的宽度为自身宽度，适用于不换行的内容或者较少的小控件元素上</p><p><code>flex: auto</code>，表示 <code>flex: 1 1 auto</code>，表示容器剩余空间有多余的时候扩展，不足的时候收缩，子项的宽度为自身宽度，适用于基于内容动态适配的布局（例如导航数量文字长度不固定）</p><p><code>flex:initial</code>，表示 <code>flex: 0 1 auto</code>，表示容器剩余空间有多余的时候不扩展，不足的时候收缩，子项的宽度为自身宽度，适用于小控件元素的分布布局，或者某一项内容动态变化的布局</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p><a href="https://www.zhangxinxu.com/wordpress/2020/10/css-flex-0-1-none/">flex:0 flex:1 flex:none flex:auto 应该在什么场景下使用？</a></p></li><li><p><a href="https://www.zhangxinxu.com/wordpress/2019/12/css-flex-deep/">CSS flex 属性深入理解</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex">MDN Web Docs flex</a></p></li><li><p><a href="https://juejin.cn/post/6844903474774147086">一劳永逸的搞定 flex 布局</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程题：为什么最后一个a是1不是5</title>
      <link href="/2021/10/15/2021-10-15-%E7%BC%96%E7%A8%8B%E9%A2%98%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AAa%E6%98%AF1%E4%B8%8D%E6%98%AF5/"/>
      <url>/2021/10/15/2021-10-15-%E7%BC%96%E7%A8%8B%E9%A2%98%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AAa%E6%98%AF1%E4%B8%8D%E6%98%AF5/</url>
      
        <content type="html"><![CDATA[<p>最近立下的 flag 是每周回答至少三个知乎回答，不限编程，希望能提高自己的书面表达能力。这不，有人邀请我回答一个问题：<a href="https://www.zhihu.com/question/492311084">为什么最后一个 a 是 1 不是 5？</a></p><p>题目如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  a = <span class="number">1</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  a = <span class="number">5</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/15/LuQ9gHj2ZJvzOoE.png" alt="结果"></p><p>我的第一反应是：undefined，5，5。估计和题主想的一样</p><h2 id="分析一波"><a href="#分析一波" class="headerlink" title="分析一波"></a>分析一波</h2><p>假设没有 if(true)，即如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">a = <span class="number">5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br></pre></td></tr></table></figure><p>那么答案什么？</p><p>a()、5、5</p><p>这解释了两个特性</p><ol><li>变量、函数提升且函数的权重大于变量</li><li>在 a 没有用 var 声明时，<code>a=XX</code> 默认是用 var 来声明</li></ol><p>变量、函数提升方面的知识点在于：</p><p>变量会提升，函数也会提升，并且函数提升的优先级大于变量，如下例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">a</span>())</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">3</span></span><br><span class="line">a = <span class="number">4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">a</span>())</span><br></pre></td></tr></table></figure><p>a()、2、1、4、<code>a is not a function</code></p><p>回过头来看这道题目</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  a = <span class="number">1</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  a = <span class="number">5</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br></pre></td></tr></table></figure><p>if (ture) {} ，形成了作用域，锁住了这片变量，<code>function a()&#123;&#125;</code> 无法逃逸。换句话说，只有 <code> &#123;&#125;</code> 块级标识符在，<code>function a() &#123;&#125;</code> 就被所在块级作用域中，也就说在 <code>if (ture) &#123;&#125;</code> 这片块级作用域下，它不会提升到全局顶层，而是在 <code>if(true)&#123;&#125;</code> 下，即代码执行时是这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  +<span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line">  a = <span class="number">1</span>;</span><br><span class="line">  -<span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line">  a = <span class="number">5</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br></pre></td></tr></table></figure><p>如果你在 <code>a = 1</code> 前打印 a，a 的值就是 <code>function a()&#123;&#125;</code></p><p>所以这道题全局环境下，没有变量提升，写在第一行的 <code>console.log(a)</code> 因为找不到 a，所以值为 <code>undefined</code></p><p>进入 <code>if(true) &#123;&#125;</code> 中，<code>function a()&#123;&#125;</code> 函数提升，且权重最高，所以赋值之前的块级作用域中的 a 为 <code>function a() &#123;&#125;</code>，<code>window.a</code> 为 <code>undefined</code></p><p>代码执行到 <code>function a() &#123;&#125;</code> 后，块级作用域中的 a 还是为 1，但是全局变量 a 被赋值为 1</p><p>执行到 <code>a = 5</code>，传统赋值，影响的是块级作用域中的 a，而不会影响全局变量 a，所以打印的第二个 <code>console.log(a)</code> 为 5，第三个 <code>console.log(a)</code> 为 1</p><p>那么问题来了，<strong>为什么一执行 <code>function a()&#123;&#125;</code>，全局变量 a 就被赋值为 1？</strong></p><p>我陷入的沉思，后来在回答中发现[<a href="https://www.zhihu.com/people/xie-guo-feng-46">云补断山</a>]回答了，说是</p><blockquote><p>历史原因，为了兼容之前的 ES5 的语法，所以在规范规定了块级作用域内函数声明的一些行为，各个浏览器实现可能不一样</p><p>简单来说，在块级作用域内的函数函数声明，行为类似于 var ，都会在全局作用域声明一个同名变量（也就是 window 上挂一个同名的属性，默认值是 undefined），因为 ES6 遇到块级作用域，会基于块级作用域创建 environment record，存放当前块级作用域内的变量，所以这个函数声明会提升到块级作用域顶部（而非全局作用域顶部）</p><p><a href="https://tc39.es/ecma262/#sec-additional-ecmascript-features-for-web-browsers">ECMA262 目录 B</a></p></blockquote><p>我们学的 JavaScript 是 ECMAScript，但是我们把代码运行在浏览器上时就要按照浏览器的标准，浏览器里会有一些私货在，最经典的是 <code>__proto__</code> ，倒逼 ECMA 采纳。话说回来，按照这位仁兄的意思</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为 function a() 声明过，所以全局有个 window.a</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="comment">// 声明归声明，但是函数提升提升与作用域相关，所以提升至此块级作用域顶部</span></span><br><span class="line">  a = <span class="number">1</span></span><br><span class="line">  <span class="comment">// 块级作用域中的 a 被赋值为 1</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="comment">// 原地爆炸，执行函数后，全局 window.a 被赋值为块级作用域中的 a</span></span><br><span class="line">  a = <span class="number">5</span></span><br><span class="line">  <span class="comment">// 块级作用域中的 a 又被赋值为 5</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br></pre></td></tr></table></figure><p>最诡异的是执行 <code>function a() &#123;&#125;</code> 后，全局 window.a 被赋值且为块级作用域中的 a</p><p>这个事情没完！！</p><p>等等，我就说的玩玩的，如果工作中或面试中真遇到这类问题，我也许还是不会解。</p><p>太诡异了，这不是考题范围（块级作用域、函数提升、变量提升）</p><p>就这样先吧</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目实战：弹出广告任意页面展示</title>
      <link href="/2021/10/14/2021-10-14-%E5%BC%B9%E5%87%BA%E5%B9%BF%E5%91%8A%E4%BB%BB%E6%84%8F%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA/"/>
      <url>/2021/10/14/2021-10-14-%E5%BC%B9%E5%87%BA%E5%B9%BF%E5%91%8A%E4%BB%BB%E6%84%8F%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<p>最近接到一个需求，产品经理希望能新增弹窗广告，广告可根据后台配置在应用任意页面弹出展示。当后台改变当前页面广告次数、链接或者目标页后，当前页面数据修改，不影响其他页面数据</p><p>例如后台设置“首页”出现广告 1 次，“我的”页面广告出现 3 次，用户进去后关闭了“首页”广告 1 次，关闭了“我的”页面广告 2 次。此时退出应用，后台将“首页”广告设置为 2 次，那么该用户“首页”广告重置为 2 次，“我的”页面广告仍为 1 次（ 3 - 2）</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>后端返回的数据必然是个数组，每个对象中会有<strong>目标页（展示的页面</strong>），<strong>跳转链接</strong>，<strong>总出现的次数</strong>三参数。前端要对数据进行处理：</p><ul><li>当本地没有数据时（第一次进入），将总出现次数赋值给一参数 firstTotalTimes（记录原总出现次数）</li><li>当本地有数据（非第一次进入）<ol><li>将本地存储中的 firstTotalTimes 清除，返回值赋值为 removeLocalTotalTimeList</li><li>将 removeLocalTotalTimeList 与 请求返回的数据 advertisementList 进行对比<ul><li>相等，说明后台数据没有改变，查看你本地存储中的总出现次数是否大于 0 ，大于则展示广告</li><li>不相等，说明后台修改了数据，这里还要分析，只重置修改处页的，未修改的地方不做处理</li></ul></li></ol></li></ul><p>笔者用的框架是 umi3，其中有 wrappers 概念，即一个配置路由的高阶组件封装，在 umi.conf 中加上后，任何页面都要先经过这一道。关键代码如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;common/fetchGetPopUpAdvertisementList&#x27;</span> &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">resData: any</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (resData?.<span class="property">resultCode</span> === <span class="string">&quot;S00000&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable language_">localStorage</span>.<span class="property">advertisementList</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> addFirstTotalTimes = resData.<span class="property">advertisementList</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">item: any</span>) =&gt;</span> &#123;</span><br><span class="line">                item.<span class="property">firstTotalTimes</span> = item.<span class="property">totalTimes</span></span><br><span class="line">                <span class="keyword">return</span> item;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="variable language_">localStorage</span>.<span class="property">advertisementList</span> = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(addFirstTotalTimes);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> localAdvertisementList = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="property">advertisementList</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> cloneLocalAdvertisementList = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(localAdvertisementList))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> removeLocalTotalTimeList = cloneLocalAdvertisementList.<span class="title function_">map</span>(<span class="function">(<span class="params">item: any</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">delete</span> item.<span class="property">firstTotalTimes</span></span><br><span class="line">            <span class="keyword">return</span> item</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span> (_.<span class="title function_">isEqual</span>(removeLocalTotalTimeList, resData.<span class="property">advertisementList</span>)) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;相等&#x27;</span>)</span><br><span class="line">            localAdvertisementList.<span class="title function_">filter</span>(<span class="function">(<span class="params">item: any</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (item.<span class="property">targetUrl</span>.<span class="title function_">indexOf</span>(history.<span class="property">location</span>.<span class="property">pathname</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (item.<span class="property">firstTotalTimes</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="title function_">setAdItem</span>(item)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不相等&#x27;</span>)</span><br><span class="line">            <span class="keyword">const</span> cloneList = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(resData.<span class="property">advertisementList</span>));</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cloneList.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; cloneLocalAdvertisementList.<span class="property">length</span>; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (_.<span class="title function_">isEqual</span>(cloneList[i].<span class="property">pkId</span>, cloneLocalAdvertisementList[j].<span class="property">pkId</span>)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (_.<span class="title function_">isEqual</span>(cloneList[i], cloneLocalAdvertisementList[j])) &#123;</span><br><span class="line">                            cloneList[i].<span class="property">firstTotalTimes</span> = localAdvertisementList[j].<span class="property">firstTotalTimes</span></span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            cloneList[i].<span class="property">firstTotalTimes</span> = cloneList[i].<span class="property">totalTimes</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">localStorage</span>.<span class="property">advertisementList</span> = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(cloneList);</span><br><span class="line">            cloneList.<span class="title function_">filter</span>(<span class="function">(<span class="params">item: any</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (item.<span class="property">targetUrl</span>.<span class="title function_">indexOf</span>(history.<span class="property">location</span>.<span class="property">pathname</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (item.<span class="property">firstTotalTimes</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="title function_">setAdItem</span>(item)</span><br><span class="line">                        <span class="title function_">setIsShow</span>(<span class="literal">true</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">                                                                     &#125;)</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure><h2 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h2><h3 id="JS-的数据可变性"><a href="#JS-的数据可变性" class="headerlink" title="JS 的数据可变性"></a>JS 的数据可变性</h3><p>第一个坑点在 JS 的数据是可变的，所以要对其数据进行深拷贝，才不会影响到其他数据，这里我用了最简单的深拷贝：JSON.parse(JSON.stringify)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cloneLocalAdvertisementList = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(</span><br><span class="line">  <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(localAdvertisementList),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="判断后台那个数据修改"><a href="#判断后台那个数据修改" class="headerlink" title="判断后台那个数据修改"></a>判断后台那个数据修改</h3><p>在之前表述中已经表明，当本地存储和请求过来的数据不一致时要判断，哪要做重置，哪些页面则维持原状。这就要对两个数组进行对比，最简单的方法就是做双循环（On2）.</p><p>先 <code>const cloneList = JSON.parse(JSON.stringify(resData.advertisementList));</code>，深拷贝后台返回数据，这样对 cloneList 进行处理时就不会影响到原数据。<code>cloneLocalAdvertisementList</code> 则是本地的存储</p><p><code>if (_.isEqual(cloneList[i].pkId, cloneLocalAdvertisementList[j].pkId))</code> ，pkId 是广告唯一标识，先识别数组中的每一个对象，这是一一对应的，再判断 <code>if (_.isEqual(cloneList[i], cloneLocalAdvertisementList[j]))</code> ，对比对象中的值，如果是 true，即完全相等，说明后台数据没有变化，那就将本地存储中的 firstTotalTimes 赋值给 cloneList 上的 firstTotalTimes 。如果是 false，说明后台已经修改，就把 firstTotalTimes 重置为本次拉取数据中的 totalTimes</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> localAdvertisementList = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="property">advertisementList</span>)</span><br><span class="line"><span class="keyword">const</span> cloneLocalAdvertisementList = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(localAdvertisementList))</span><br><span class="line"> ...</span><br><span class="line"><span class="keyword">const</span> cloneList = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(resData.<span class="property">advertisementList</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cloneList.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; cloneLocalAdvertisementList.<span class="property">length</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_.<span class="title function_">isEqual</span>(cloneList[i].<span class="property">pkId</span>, cloneLocalAdvertisementList[j].<span class="property">pkId</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (_.<span class="title function_">isEqual</span>(cloneList[i], cloneLocalAdvertisementList[j])) &#123;</span><br><span class="line">                    cloneList[i].<span class="property">firstTotalTimes</span> = localAdvertisementList[j].<span class="property">firstTotalTimes</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cloneList[i].<span class="property">firstTotalTimes</span> = cloneList[i].<span class="property">totalTimes</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上，就是对这次项目的核心代码，当然，还要考虑到 App 端打开和 微信打开的差异，以及当未登录状态下的去登录后数据的更新等等，但这些可以通过监听登录来判断（useEffect 依赖数据）实现</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次被数据可变性坑了，通过 debugger 来排查</p><p>双循环在实际项目中用的次数不多，所以对此做记录</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 实战 </category>
          
          <category> 微信 </category>
          
          <category> 公司项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验之谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信网页授权</title>
      <link href="/2021/09/27/2021-09-27-%E5%BE%AE%E4%BF%A1%E7%BD%91%E9%A1%B5%E6%8E%88%E6%9D%83/"/>
      <url>/2021/09/27/2021-09-27-%E5%BE%AE%E4%BF%A1%E7%BD%91%E9%A1%B5%E6%8E%88%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<p>微信网页授权步骤差不多有三步，具体文档可查看<a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html">这里</a>，我画了下流程图：</p><p><img src="https://i.loli.net/2021/09/26/aPZvclQdzDTmjoL.png" alt="微信授权流程图"></p><p>以下为代码实战</p><h2 id="第一步：用户同意授权，获取-code"><a href="#第一步：用户同意授权，获取-code" class="headerlink" title="第一步：用户同意授权，获取 code"></a>第一步：用户同意授权，获取 code</h2><p>需先调用 <code>/auth</code> 接口，传入必传参数 <code>url</code> 以及 <code>scope</code>（此为参数名）</p><p>请求方式：GET</p><ul><li>url 为回调地址</li></ul><ul><li>scope 有两个可选参数<ul><li>snsapi_base 只能获取进入页面用户的 openid，用户无感知，叫静默授权</li><li>snsapi_userinfo 能获取用户的基本信息，但需要用户接受，叫手动授权，如下图</li></ul></li></ul><p><img src="https://i.loli.net/2021/05/21/gKzl6PTUmQYos4L.png" alt="snsapi_userinfo示意图"></p><p>具体区别可前往 <a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html">微信文档</a> 查看</p><h2 id="第二步：通过-code-换取网页授权-access-token"><a href="#第二步：通过-code-换取网页授权-access-token" class="headerlink" title="第二步：通过 code 换取网页授权 access_token"></a>第二步：通过 code 换取网页授权 access_token</h2><p>这里以手动授权为例</p><p>获取到微信的 code 后，再请求 <code>/getUserInfo</code></p><p>请求方式： GET</p><p>请求参数：code，需请求 <code>/auth</code> 获取到 <code>code</code> 先，如果你在请求 <code>/auth</code> 时传入的 <code>scope</code> 为 <code>snsapi_userinfo</code> , 那么返回微信个人信息，包括微信名，性别，所在地区，国籍，头像等等，如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;openid&quot;</span>:<span class="string">&quot; OPENID&quot;</span>,</span><br><span class="line">  <span class="string">&quot;nickname&quot;</span>: <span class="variable constant_">NICKNAME</span>,</span><br><span class="line">  <span class="string">&quot;sex&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;province&quot;</span>:<span class="string">&quot;PROVINCE&quot;</span>,</span><br><span class="line">  <span class="string">&quot;city&quot;</span>:<span class="string">&quot;CITY&quot;</span>,</span><br><span class="line">  <span class="string">&quot;country&quot;</span>:<span class="string">&quot;COUNTRY&quot;</span>,        <span class="string">&quot;headimgurl&quot;</span>:<span class="string">&quot;https://thirdwx.qlogo.cn/mmopen/g3MonUZtNHkdmzicIlibx6iaFqAc56vxLSUfpb6n5WKSYVY0ChQKkiaJSgQ1dZuTOgvLLrhJbERQQ4eMsv84eavHiaiceqxibJxCfHe/46&quot;</span>,</span><br><span class="line">  <span class="string">&quot;privilege&quot;</span>:[ <span class="string">&quot;PRIVILEGE1&quot;</span> <span class="string">&quot;PRIVILEGE2&quot;</span>     ],</span><br><span class="line">  <span class="string">&quot;unionid&quot;</span>: <span class="string">&quot;o6_bmasdasdsad6_2sgVt7hMZOPfL&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但如果 <code>scope</code> 为 <code>snsapi_base</code> ，请求成功时只返回用户的 <code>openid</code></p><blockquote><p>PS: 请求<code>/getOpenId</code>、 <code>/getUserInfo</code> 成功时会返回 <code>access_token</code>，但此 <code>access_token</code> 和 微信服务端开发中的 <code>access_token</code> 不同，一个是微信与服务器打交道（微信票据服务），另一个是微信网页的 OAuth2.0 服务（网页授权）</p></blockquote><h2 id="第三步：请求-userInfo"><a href="#第三步：请求-userInfo" class="headerlink" title="第三步：请求 userInfo"></a>第三步：请求 userInfo</h2><p>拿着 access_token 和 openid，去请求微信官方接口</p><blockquote><p><code>http：GET（请使用 https 协议） https://api.weixin.qq.com/sns/userinfo?access_token=ACCESS_TOKEN&amp;openid=OPENID&amp;lang=zh_CN</code></p></blockquote><p>返回 openid、nickname、sex、province、city、country、headimgurl 等信息，拿着 openid 和你想要的数据返回到原来 <code>/auth</code> 参数中的 url 上</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>先调用 <code>/auth</code> 接口，传入参数 url 和 scope</p><p>请求接口：<code>http://192.168.230.209/auth?url=http://192.168.230.209/home&amp;scope=snsapi_userinfo</code></p><p>redis 存 <code>url=http://192.168.230.209/home</code>，即最后授权完成拿到数据后返回的前端地址</p><p>判断参数 scope，如果是 <code>snsapi_userinfo</code>，用户点击授权后跳转至 <code>/getWxUserInfo</code> 接口；</p><p>如果是 <code>snsapi_base</code>，静默授权后跳转至 <code>getOpenId</code> 接口</p><p>这里我们传的 scope 为 <code>snsapi_userinfo</code>，所以请求成功后会有授权页面</p><p><img src="https://i.loli.net/2021/05/21/gKzl6PTUmQYos4L.png" alt="授权示意图"></p><p>点击”同意“会跳转至页面</p><p><code>http://192.168.230.209:8888/api/wechat/getWxUserInfo?code=081UcAFa1s1OAz0o7wGa1wb8vG1UcAFX&amp;state=123</code></p><blockquote><p>PS：<code>http://192.168.230.209:8888/api/wechat</code> 为该后端服务地址，<code>getWxUserInfo</code> 为路由（即请求接口）</p></blockquote><p>从<code>ctx.request.query</code> 中拿到 code，拿着 code 请求 access_token 服务，access_token 服务也是微信官方提供的一个方法</p><blockquote><p><code>获取code后，请求以下链接获取access_token： https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=CODE&amp;grant_type=authorization_code</code></p></blockquote><p>请求成功的话，拿着这个返回值中的 access_token 和 openid，请求 userinfo 接口，在上文已经介绍过，这里不做重复</p><blockquote><p>这里要说明的一点是，如果请求 access_token 的返回 code 为 40029，说明 access_token 已经失效，我们需要重新刷新 access_token</p></blockquote><p>拿到 userinfo 的返回值后，在最开始存在 redis 中的 url 上拼接 openid、headimgurl 等即可</p><p>这里需要说明一点</p><p>需要先配置 OAuth2.0 网页授权的回调页面域名，类似这种</p><p><img src="https://i.loli.net/2021/09/27/PufDxSq7m3abZcA.png" alt="授权回调页面域名"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一定要知道一点，微信网页开发和调用微信的 JS-SDK 不一样，也和微信服务端开发不一样</p><p>它可以当初拎出来说，坑也比较少，不会遇到像 JS-SDK 那样的各种报错</p><p>只要知道，它为为了获取 openid （以及微信个人信息）而弄的一个服务就好了</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 微信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
            <tag> 项目实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战独立项目「几行字」：从想法到上线全过程</title>
      <link href="/2021/09/24/2021-09-24-%E5%AE%9E%E6%88%98%E7%8B%AC%E7%AB%8B%E9%A1%B9%E7%9B%AE%5B%E5%87%A0%E8%A1%8C%E5%AD%97%5D%EF%BC%9A%E4%BB%8E%E6%83%B3%E6%B3%95%E5%88%B0%E4%B8%8A%E7%BA%BF%E5%85%A8%E8%BF%87%E7%A8%8B/"/>
      <url>/2021/09/24/2021-09-24-%E5%AE%9E%E6%88%98%E7%8B%AC%E7%AB%8B%E9%A1%B9%E7%9B%AE%5B%E5%87%A0%E8%A1%8C%E5%AD%97%5D%EF%BC%9A%E4%BB%8E%E6%83%B3%E6%B3%95%E5%88%B0%E4%B8%8A%E7%BA%BF%E5%85%A8%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前尝试过几个小项目，自己也很想做独立的项目，这种自己创造一样东西的感觉很棒，奈何之前太差，虽然现在能力也不是特别强，但好歹有这个心了</p><p>我的最终想法是想做个关于”中国美“的项目，但是这个项目太大，能实现是一件特别有成就的事情，但现在还是先做一个独立的项目先</p><p>这里记录自己的想法，非礼勿言</p><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>最开始是看到 <a href="https://github.com/egotong/nows">毒鸡汤</a> 的项目（作者自己的域名已经不能访问，当初自己为了学习部署，也搞了一份，网址：<a href="http://du.azhubaby.com/">毒</a>），觉得很有趣，简单又有趣</p><p>后来看到 <a href="https://www.jinrishici.com/">今日诗词</a>，这不是差不多吗，无非是提供了 API 调用罢了。</p><p>这两则的 star 数都超过了 1000+，这么简单的应用竟然这么受欢迎，有点羡慕嫉妒感</p><p>因为好奇，接触了 vite 、tailwindcss 等新技术，就想着用 vite 搭建一个 react 应用，样式用 tailwindcss 定制，于是就想要做个简单的应用，后来脑洞越想越大，就有了后续的规划，直接说规划</p><h2 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h2><p>这个项目从想法、画原型、写前端、做设计、部署、搞后端、后台一整套，从想法到实现</p><p>我最截止到写这篇文章时的规划是：</p><p>第一阶段：提出想法、画出原型、做好一个静态页面、部署到线上，即静态独立项目</p><p>第二阶段：用 vite + react 开发此项目，并添加功能点，如可选主题色、分享卡片等功能</p><p>第三阶段：数据不能裸泳，配置后端功能以及后台编辑功能</p><p>第四阶段：将其做成 Flutter 版本</p><p>第五阶段：将其做成小程序版本</p><p>这五个阶段笔者不会一口气做出来，有些东西只是想法，具体实施时困难肯定比想象中多的很</p><h2 id="收集素材"><a href="#收集素材" class="headerlink" title="收集素材"></a>收集素材</h2><p>之前混知乎，也关注了几个关于句子的问题，例如 <a href="https://www.zhihu.com/question/47436256">你读过的最有力量的一段文字是什么？</a>、 <a href="https://www.zhihu.com/question/63165436">有哪些适合摘抄的句子</a> ，有些句子很喜欢，有些能受启发，与其这样，不如把有些高赞的句子收集起来，也做成像 毒鸡汤、今日诗词这样应用</p><p>于是乎，每天去知乎上手动收录素材，加上自己以前的库存，大概收集了 100 多条数据（写于第一阶段），</p><h2 id="画原型"><a href="#画原型" class="headerlink" title="画原型"></a>画原型</h2><p>主要以简洁为主，能不要的东西统统不要，大致画出了这样</p><p><img src="https://i.loli.net/2021/09/24/ZWq3TKxvw9SiyzQ.png" alt="原型"></p><h2 id="写页面"><a href="#写页面" class="headerlink" title="写页面"></a>写页面</h2><h3 id="初始化页面"><a href="#初始化页面" class="headerlink" title="初始化页面"></a>初始化页面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>为什么要弄功能？因为我们要用到 tailwind，它官方支持用这种方式，等 build 的时候会 tree-shake，能减少很多不必要的代码</p><p>后续可看 <a href="https://www.tailwindcss.cn/docs/installation">官网安装指南</a></p><h3 id="通过-npm-安装-Tailwind"><a href="#通过-npm-安装-Tailwind" class="headerlink" title="通过 npm 安装 Tailwind"></a>通过 npm 安装 Tailwind</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install tailwindcss@latest postcss@latest autoprefixer@latest</span><br></pre></td></tr></table></figure><h3 id="作为-PostCSS-插件来添加-Tailwind"><a href="#作为-PostCSS-插件来添加-Tailwind" class="headerlink" title="作为 PostCSS 插件来添加 Tailwind"></a>作为 PostCSS 插件来添加 Tailwind</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// postcss.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: &#123;</span><br><span class="line">    <span class="attr">tailwindcss</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">autoprefixer</span>: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="创建-tailwindcss-配置文件"><a href="#创建-tailwindcss-配置文件" class="headerlink" title="创建 tailwindcss 配置文件"></a>创建 tailwindcss 配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx tailwindcss init</span><br></pre></td></tr></table></figure><p>这将会在您的工程根目录创建一个最小的 <code>tailwind.config.js</code> 文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tailwind.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">purge</span>: [],</span><br><span class="line">  <span class="attr">darkMode</span>: <span class="literal">false</span>, <span class="comment">// or &#x27;media&#x27; or &#x27;class&#x27;</span></span><br><span class="line">  <span class="attr">theme</span>: &#123;</span><br><span class="line">    <span class="attr">extend</span>: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">variants</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="新建-tailwind-css"><a href="#新建-tailwind-css" class="headerlink" title="新建 tailwind.css"></a>新建 <code>tailwind.css</code></h3><p>引入 tailwind 代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br></pre></td></tr></table></figure><h3 id="新建-index-html"><a href="#新建-index-html" class="headerlink" title="新建 index.html"></a>新建 <code>index.html</code></h3><p>在代码中引入 css、以及编写 html 代码</p><p>这里我不细讲，因为花了不少时间，参数太多，大多数是看到符合自己原型的就拿来，然后删删改改</p><h3 id="新建-data-js"><a href="#新建-data-js" class="headerlink" title="新建 data.js"></a>新建 <code>data.js</code></h3><p>之前收集了不少素材，将其导入到 <code>data.js</code> 中，并且编写以下逻辑，浏览器中读过的句子保存在本地存储里。句子是随机生成，如果随机生成的句子在本地存储中，那就重新生成。当所有的句子都存在本地存储中的话，就清空所有的本地存储。</p><p>因为我的内容有些不是一句话，而是一个数组，所有在插入内容时也需要判断，根据不同的情况做出不同的效果</p><p>这里遇到一些问题记录下，太久没有写原生，插入 html 的 api 忘记了，innerHTML 和 appendChild 的区别忘记了</p><blockquote><p>innerHTML ：可以插入一段 html，例如<p>我是 p 标签</p></p><p>appendChild ：在内容末插入节点，要先创建标签，在插入</p></blockquote><p>封装成三个方法，即拉取数据，存本地存储，插入网页</p><h2 id="做设计"><a href="#做设计" class="headerlink" title="做设计"></a>做设计</h2><p>参考了一些别人做 logo 的建议，推荐比较多的是 <a href="https://www.logosc.cn/">logo 神器</a>，我按照提示做下来是这样的设计</p><p><img src="https://i.loli.net/2021/09/24/LVEvkW2m7X9ewxd.png" alt="logo"></p><p>我表示遗憾，从个人审美上来看，这种设计太傻瓜了，所以自己用 Photoshop 做了一个，</p><h2 id="SEO-优化"><a href="#SEO-优化" class="headerlink" title="SEO 优化"></a>SEO 优化</h2><h3 id="favicon-处理"><a href="#favicon-处理" class="headerlink" title="favicon 处理"></a>favicon 处理</h3><p>在 logo 中扣出 <code>几</code> 字，然后上传至 <a href="https://favicon.io/">https://favicon.io/</a> 上，导出 favicon，</p><h3 id="设置-header-信息"><a href="#设置-header-信息" class="headerlink" title="设置 header 信息"></a>设置 header 信息</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>几行字<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">&quot;description&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">content</span>=<span class="string">&quot;几行字给你温暖、几行字给你激励、几行字给你灵感&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;几行字，文案，几行世界&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Cache-Control&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-siteapp&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:title&quot;</span> <span class="attr">content</span>=<span class="string">&quot;几行字&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:image&quot;</span> <span class="attr">content</span>=<span class="string">&quot;./favicon.ico&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:site_name&quot;</span> <span class="attr">content</span>=<span class="string">&quot;几行字&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">    <span class="attr">property</span>=<span class="string">&quot;og:description&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">content</span>=<span class="string">&quot;几行字，几行字给你温暖、几行字给你激励、几行字给你灵感&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;alternate icon&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;favicon.ico&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也写不出什么关键字来，先这样，后期有灵感了再补上</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>笔者之前写过利用 <a href="https://blog.azhubaby.com/2021/08/19/2021-08-19-GitHubActions-%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE/">Github Actions 部署前端</a> ，也成功部署过 <a href="https://du.azhubaby.com/">毒鸡汤</a>，大致流程如下</p><ol><li>申请阿里云容器镜像服务</li><li>将代码推到 Github 仓库，触发 Github Actions<ol><li>Github Actions 中登录 阿里云容器镜像服务，将代码打包成一个镜像，并推到个人镜像站远端</li><li>再登录服务器，执行拉取镜像脚本</li></ol></li></ol><p>主要逻辑是这样，但执行起来很麻烦，还不如直接部署来着算，什么直接部署，就是本地部署到线上，最有用的当属 now，也就是现在的 <a href="https://vercel.com/">vercel</a>，笔者之前部署过好几个项目，所以轻车熟路</p><p>直接部署上线：<a href="https://jihangzi-static.vercel.app/">https://jihangzi-static.vercel.app/</a></p><p>在阿里云做一下映射：<a href="https://jihangzi.azhubaby.com/">https://jihangzi.azhubaby.com/</a></p><p>第一阶段到此就告一段落</p>]]></content>
      
      
      <categories>
          
          <category> 实战 </category>
          
          <category> 独立项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 几行字 </tag>
            
            <tag> 独立项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用微信wx-open-launch-app标签实现微信网页打开App</title>
      <link href="/2021/09/16/2021-09-16-%E4%BD%BF%E7%94%A8%E5%BE%AE%E4%BF%A1wx-open-launch-app%E6%A0%87%E7%AD%BE%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E7%BD%91%E9%A1%B5%E6%89%93%E5%BC%80App/"/>
      <url>/2021/09/16/2021-09-16-%E4%BD%BF%E7%94%A8%E5%BE%AE%E4%BF%A1wx-open-launch-app%E6%A0%87%E7%AD%BE%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E7%BD%91%E9%A1%B5%E6%89%93%E5%BC%80App/</url>
      
        <content type="html"><![CDATA[<h2 id="前提须知"><a href="#前提须知" class="headerlink" title="前提须知"></a>前提须知</h2><p>笔者公司的项目在微信端的功能定位为基础功能交易及服务，通知用户交易提醒、交易流水等，而 APP 为主要的交易功能。之前是在多个页面有引流按钮跳转至 App，功能点比较粗暴，直接 <code>location.href = 应用宝链接</code>。现在产品有需求，说要用微信提供的标签来唤起 App</p><h2 id="需求点："><a href="#需求点：" class="headerlink" title="需求点："></a>需求点：</h2><p>所有跳转至 App 下载页面的部分，改成</p><p><img src="https://i.loli.net/2021/09/15/j7IGH2FzqK3ACrP.png" alt="需求点"></p><h2 id="Demo-先行"><a href="#Demo-先行" class="headerlink" title="Demo 先行"></a>Demo 先行</h2><p>遇事不决，<a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_Open_Tag.html#22">官网文档</a>。查看后与微信 JS-SDK 功能点很像，这里我不废话，直接跳过。按照官网 demo，把示例写进业务代码中</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; toDownloadApp, isWechat, getWeixinVersion &#125; <span class="keyword">from</span> <span class="string">&#x27;utils&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Download</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> wxRef = <span class="title function_">useRef</span>(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (wxRef.<span class="property">current</span>) &#123;</span><br><span class="line">            <span class="comment">// @ts-ignore</span></span><br><span class="line">            wxRef.<span class="property">current</span>?.<span class="title function_">addEventListener</span>(<span class="string">&#x27;launch&#x27;</span>, <span class="keyword">function</span> (<span class="params">e: any</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// @ts-ignore</span></span><br><span class="line">            wxRef.<span class="property">current</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fail&#x27;</span>, e.<span class="property">detail</span>);</span><br><span class="line">                <span class="title function_">toDownloadApp</span>()</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, [])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">onHandleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">     <span class="title function_">toDownloadApp</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Download&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;onHandleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/*  @ts-ignore */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">wx-open-launch-app</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">ref</span>=<span class="string">&#123;wxRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">appid</span>=<span class="string">&quot;XXXX&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/wxtag-template&#x27;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                    <span class="tag">&lt;<span class="name">button</span>&gt;</span>App内查看<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/*  @ts-ignore */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">wx-open-launch-app</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="title class_">Download</span>);</span><br></pre></td></tr></table></figure><p>测试成功，demo 能跑通</p><h2 id="组件试点"><a href="#组件试点" class="headerlink" title="组件试点"></a>组件试点</h2><p>现在搞业务，以这个组件（Download）为试点展开，我要点击页面顶部的卡片（多个地方使用，抽离成 Download 组件），让其唤起 App，但是要判断其版本，如果版本过低，让其跳转至应用宝</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect, useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">LogoImg</span> <span class="keyword">from</span> <span class="string">&#x27;@/assets/images/logo.png&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; toDownloadApp, isWechat, getWeixinVersion &#125; <span class="keyword">from</span> <span class="string">&#x27;utils&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Download</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> wxRef = <span class="title function_">useRef</span>(<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">const</span> [enableLaunchWeapp, setEnableLaunchWeapp] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> wxVersion = <span class="title function_">isWechat</span>() &amp;&amp; <span class="title function_">getWeixinVersion</span>() || <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> (wxVersion) &#123;</span><br><span class="line">            <span class="keyword">let</span> v = wxVersion.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">Number</span>(v[<span class="number">0</span>]) &gt;= <span class="number">7</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title class_">Number</span>(v[<span class="number">1</span>]) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="title class_">Number</span>(v[<span class="number">2</span>]) &gt;= <span class="number">12</span>) &#123;</span><br><span class="line">                        <span class="title function_">setEnableLaunchWeapp</span>(<span class="literal">true</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (wxRef.<span class="property">current</span>) &#123;</span><br><span class="line">            <span class="comment">// @ts-ignore</span></span><br><span class="line">            wxRef.<span class="property">current</span>?.<span class="title function_">addEventListener</span>(<span class="string">&#x27;launch&#x27;</span>, <span class="keyword">function</span> (<span class="params">e: any</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// @ts-ignore</span></span><br><span class="line">            wxRef.<span class="property">current</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fail&#x27;</span>, e.<span class="property">detail</span>);</span><br><span class="line">                <span class="title function_">toDownloadApp</span>()</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, [])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">onHandleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (!enableLaunchWeapp) &#123;</span><br><span class="line">            <span class="title function_">toDownloadApp</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Download&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;onHandleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Download__logo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;LogoImg&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;logo&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Download__content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Download__content-title&quot;</span>&gt;</span>雅美App<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Download__content-desc&quot;</span>&gt;</span>长泽雅美服务专区<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Download__btn&quot;</span>&gt;</span>立即打开<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/*  @ts-ignore */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">wx-open-launch-app</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">ref</span>=<span class="string">&#123;wxRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">appid</span>=<span class="string">&quot;XXXXX&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">position:</span> &#x27;<span class="attr">fixed</span>&#x27;, <span class="attr">top:</span> <span class="attr">0</span>, <span class="attr">left:</span> <span class="attr">0</span>, <span class="attr">width:</span> &#x27;<span class="attr">100</span>%&#x27;, <span class="attr">height:</span> &#x27;<span class="attr">60px</span>&#x27;, <span class="attr">opacity:</span> <span class="attr">0.3</span>, <span class="attr">background:</span> &#x27;<span class="attr">blue</span>&#x27; &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/wxtag-template&#x27;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=</span></span><span class="template-variable">&#123;&#123; <span class="name">position:</span> <span class="string">&#x27;fixed&#x27;</span>, top: <span class="number">0</span>, left: <span class="number">0</span>, width: <span class="string">&#x27;90%&#x27;</span>, height: <span class="string">&#x27;100%&#x27;</span>, opacity: <span class="number">0.3</span>, background: <span class="string">&#x27;red&#x27;</span> &#125;&#125;</span><span class="language-xml"><span class="tag"> /&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/*  @ts-ignore */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">wx-open-launch-app</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="title class_">Download</span>);</span><br></pre></td></tr></table></figure><p>效果如下所示：</p><p><img src="https://i.loli.net/2021/09/16/i2AWbnCLugSVpXF.png" alt="点击范围"></p><p>思路逻辑参考：<a href="https://www.jianshu.com/p/262658b8d19c">wx-open-launch-weapp 样式问题</a>，我也给它配上颜色，方便后续观察</p><p>测试同步，能点击卡片跳转，好，下一步，在所有需要点击跳转页面的地方加入类似这样的代码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;wx-open-launch-app</span><br><span class="line">    ref=&#123;wxRef&#125;</span><br><span class="line">    appid=<span class="string">&quot;XXXX&quot;</span></span><br><span class="line">    style=&#123;&#123; <span class="attr">position</span>: <span class="string">&#x27;fixed&#x27;</span>, <span class="attr">top</span>: <span class="number">0</span>, <span class="attr">left</span>: <span class="number">0</span>, <span class="attr">width</span>: <span class="string">&#x27;100%&#x27;</span>, <span class="attr">height</span>: <span class="string">&#x27;60px&#x27;</span>, <span class="attr">opacity</span>: <span class="number">0.3</span>, <span class="attr">background</span>: <span class="string">&#x27;blue&#x27;</span> &#125;&#125;</span><br><span class="line">    &gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/wxtag-template&#x27;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=</span></span><span class="template-variable">&#123;&#123; <span class="name">position:</span> <span class="string">&#x27;fixed&#x27;</span>, top: <span class="number">0</span>, left: <span class="number">0</span>, width: <span class="string">&#x27;90%&#x27;</span>, height: <span class="string">&#x27;100%&#x27;</span>, opacity: <span class="number">0.3</span>, background: <span class="string">&#x27;red&#x27;</span> &#125;&#125;</span><span class="language-xml"><span class="tag"> /&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    &#123;<span class="comment">/*  @ts-ignore */</span>&#125;</span><br><span class="line">&lt;/wx-open-launch-app&gt;</span><br></pre></td></tr></table></figure><h2 id="封装组件-WxOpenLaunchApp"><a href="#封装组件-WxOpenLaunchApp" class="headerlink" title="封装组件 WxOpenLaunchApp"></a>封装组件 WxOpenLaunchApp</h2><p>如果是这样，就可以将其封装成一个组件了，起个名吧： <code>WxOpenLaunchApp</code></p><p>将唤起 App 的内容包装成一个组件，暴雷 children 和 style 两个 props，代码如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useRef, forwardRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; toDownloadApp &#125; <span class="keyword">from</span> <span class="string">&#x27;utils&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> interface <span class="title class_">WxOpenLaunchAppProps</span> &#123;</span><br><span class="line">    <span class="attr">children</span>: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">    style?: <span class="title class_">React</span>.<span class="property">CSSProperties</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">WxOpenLaunchApp</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">WxOpenLaunchAppProps</span>&gt; = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; style, children &#125; = props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> wxRef = <span class="title function_">useRef</span>(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (wxRef.<span class="property">current</span>) &#123;</span><br><span class="line">            <span class="comment">// @ts-ignore</span></span><br><span class="line">            wxRef.<span class="property">current</span>?.<span class="title function_">addEventListener</span>(<span class="string">&#x27;launch&#x27;</span>, <span class="keyword">function</span> (<span class="params">e: any</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// @ts-ignore</span></span><br><span class="line">            wxRef.<span class="property">current</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fail&#x27;</span>, e.<span class="property">detail</span>);</span><br><span class="line">                <span class="title function_">toDownloadApp</span>()</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, [])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;wx-open-launch-app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/*  @ts-ignore */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">wx-open-launch-app</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">ref</span>=<span class="string">&#123;wxRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">appid</span>=<span class="string">&quot;XXXX&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">style</span>=<span class="string">&#123;style&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/wxtag-template&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/*  @ts-ignore */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">wx-open-launch-app</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="title class_">WxOpenLaunchApp</span>);</span><br></pre></td></tr></table></figure><p>那么 Download 组件也就可以干净很多</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Download</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    ...</span><br><span class="line">        &lt;div className=<span class="string">&quot;Download__btn&quot;</span>&gt;立即打开&lt;/div&gt;</span><br><span class="line">            &#123;<span class="comment">/*  @ts-ignore */</span>&#125;</span><br><span class="line">            &lt;<span class="title class_">WxOpenLaunchApp</span> style=&#123;&#123; <span class="attr">position</span>: <span class="string">&#x27;fixed&#x27;</span>, <span class="attr">top</span>: <span class="number">0</span>, <span class="attr">left</span>: <span class="number">0</span>, <span class="attr">width</span>: <span class="string">&#x27;100%&#x27;</span>, <span class="attr">height</span>: <span class="string">&#x27;60px&#x27;</span>, <span class="attr">opacity</span>: <span class="number">0.3</span>, <span class="attr">background</span>: <span class="string">&#x27;blue&#x27;</span> &#125;&#125;&gt;</span><br><span class="line">                <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">position:</span> &#x27;<span class="attr">fixed</span>&#x27;, <span class="attr">top:</span> <span class="attr">0</span>, <span class="attr">left:</span> <span class="attr">0</span>, <span class="attr">width:</span> &#x27;<span class="attr">100</span>%&#x27;, <span class="attr">height:</span> &#x27;<span class="attr">100</span>%&#x27;, <span class="attr">opacity:</span> <span class="attr">0.3</span>, <span class="attr">background:</span> &#x27;<span class="attr">red</span>&#x27; &#125;&#125; /&gt;</span></span></span><br><span class="line">            &lt;/<span class="title class_">WxOpenLaunchApp</span>&gt;</span><br><span class="line">...</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="业务组件-OpenAppPopup"><a href="#业务组件-OpenAppPopup" class="headerlink" title="业务组件 OpenAppPopup"></a>业务组件 OpenAppPopup</h2><p>回到需求点，每个点击的地方都要弹出弹出框，点击 <code>打开 App</code> ，再唤起 App，这样的话，弹出框 + WxOpenLaunchApp 就可以结合成一个组件，放出来供页面调用，名字就叫 <code>OpenAppPopup</code> ，代码如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="variable constant_">FC</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Popup</span>, <span class="title class_">WxOpenLaunchApp</span>, <span class="title class_">Toast</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;components&#x27;</span>; <span class="comment">// 此乃公司自研组件库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> interface <span class="title class_">OpenAppPopupProps</span> &#123;</span><br><span class="line">    <span class="attr">show</span>: boolean;</span><br><span class="line">    <span class="attr">onCancel</span>: <span class="function">() =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">    <span class="attr">onSubmit</span>: <span class="function">() =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">OpenAppPopup</span>: <span class="variable constant_">FC</span>&lt;<span class="title class_">OpenAppPopupProps</span>&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; show, onCancel, onSubmit &#125; = props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">Popup.Group</span> <span class="attr">show</span>=<span class="string">&#123;show&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Popup.Confirm</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">title</span>=<span class="string">&quot;抱歉，此功能需在雅美App中使用&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">btnSubmitText</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    &lt;<span class="attr">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">position:</span> &#x27;<span class="attr">relative</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                        打开App</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">WxOpenLaunchApp</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">position:</span> &#x27;<span class="attr">absolute</span>&#x27;, <span class="attr">top:</span> <span class="attr">0</span>, <span class="attr">left:</span> <span class="attr">0</span>, <span class="attr">width:</span> &#x27;<span class="attr">100</span>%&#x27;, <span class="attr">height:</span> &#x27;<span class="attr">100</span>%&#x27;, <span class="attr">opacity:</span> <span class="attr">0.3</span>, <span class="attr">background:</span> &#x27;<span class="attr">blue</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">position:</span> &#x27;<span class="attr">absolute</span>&#x27;, <span class="attr">top:</span> <span class="attr">0</span>, <span class="attr">left:</span> <span class="attr">0</span>, <span class="attr">width:</span> &#x27;<span class="attr">100</span>%&#x27;, <span class="attr">height:</span> &#x27;<span class="attr">100</span>%&#x27;, <span class="attr">opacity:</span> <span class="attr">0.6</span>, <span class="attr">background:</span> &#x27;<span class="attr">red</span>&#x27; &#125;&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">WxOpenLaunchApp</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#125;</span></span><br><span class="line"><span class="language-xml">                onCancel=&#123;onCancel&#125;</span></span><br><span class="line"><span class="language-xml">                onSubmit=&#123;onSubmit&#125;</span></span><br><span class="line"><span class="language-xml">            /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Popup.Group</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="title class_">OpenAppPopup</span>);</span><br></pre></td></tr></table></figure><p>示意图如下：</p><p><img src="https://i.loli.net/2021/09/16/GhcP6ubFXZC2mYf.png" alt="OpenAppPopup"></p><p>接着在所有有跳转 App 的页面上用上这块逻辑即可</p><h2 id="封装-HOOK"><a href="#封装-HOOK" class="headerlink" title="封装 HOOK"></a>封装 HOOK</h2><p>每个页面点击类似 <code>下载App</code> 按钮时，会弹出 <code>OpenAppPopup</code>，点击 <code>打开App</code>，需要判断你的微信版本，是否达到 7.0.12，如果每个页面都要加上这段</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wxVersion = (<span class="title function_">isWechat</span>() &amp;&amp; <span class="title function_">getWeixinVersion</span>()) || <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (wxVersion) &#123;</span><br><span class="line">  <span class="keyword">let</span> v = wxVersion.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Number</span>(v[<span class="number">0</span>]) &gt;= <span class="number">7</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Number</span>(v[<span class="number">1</span>]) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Number</span>(v[<span class="number">2</span>]) &gt;= <span class="number">12</span>) &#123;</span><br><span class="line">        <span class="title function_">setEnableLaunchWeapp</span>(<span class="literal">true</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真的太恶心了，果断抽离成 hook。代码如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; isWechat, getWeixinVersion &#125; <span class="keyword">from</span> <span class="string">&#x27;utils&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useEnableLaunchWeapp</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> [enableLaunchWeapp, setEnableLaunchWeapp] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> wxVersion = <span class="title function_">isWechat</span>() &amp;&amp; <span class="title function_">getWeixinVersion</span>() || <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> (wxVersion) &#123;</span><br><span class="line">            <span class="keyword">let</span> v = wxVersion.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">Number</span>(v[<span class="number">0</span>]) &gt;= <span class="number">7</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title class_">Number</span>(v[<span class="number">1</span>]) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="title class_">Number</span>(v[<span class="number">2</span>]) &gt;= <span class="number">12</span>) &#123;</span><br><span class="line">                        <span class="title function_">setEnableLaunchWeapp</span>(<span class="literal">true</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, [])</span><br><span class="line">    <span class="keyword">return</span> enableLaunchWeapp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useEnableLaunchWeapp;</span><br></pre></td></tr></table></figure><p>逻辑也很简单，在刚加载时判断它是否可以点击，可以点击，就设置 <code>enableLaunchWeapp</code> 为 true。使用方法也很简单</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Dispatch</span>, <span class="title class_">History</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;umi&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;  <span class="title class_">OpenAppPopup</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;components&#x27;</span>;</span><br><span class="line">+<span class="keyword">import</span> &#123; useEnableLaunchWeapp &#125; <span class="keyword">from</span> <span class="string">&#x27;hooks&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; toDownloadApp &#125; <span class="keyword">from</span> <span class="string">&#x27;utils&#x27;</span>;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">KVProps</span> &#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title class_">History</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">KV</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">KVProps</span>&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; history &#125; = props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> [isShow, setIsShow] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    +<span class="keyword">const</span> enableLaunchWeapp = <span class="title function_">useEnableLaunchWeapp</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">onHandleClickToBuy</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="title function_">setIsShow</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">onHandleClickToSubmit</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        +<span class="keyword">if</span> (!enableLaunchWeapp) &#123;</span><br><span class="line">        +    <span class="title function_">toDownloadApp</span>()</span><br><span class="line">        +&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;KV&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">background:</span> <span class="attr">kvBgColor</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;KV__content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;img&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">OpenAppPopup</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">show</span>=<span class="string">&#123;isShow&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">onCancel</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">                    setIsShow(false);</span></span><br><span class="line"><span class="language-xml">                &#125;&#125;</span></span><br><span class="line"><span class="language-xml">                onSubmit=&#123;onHandleClickToSubmit&#125;</span></span><br><span class="line"><span class="language-xml">            /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="variable constant_">KV</span>);</span><br></pre></td></tr></table></figure><h2 id="与-App-交互"><a href="#与-App-交互" class="headerlink" title="与 App 交互"></a>与 App 交互</h2><p>需求点里说：要在所在页面跳转至 App 相对页面，文档上写的很明显，可以传参数 <code>extinfo=&quot;your-extinfo&quot;</code>，随便写了个让客户端同事先测试先</p><h3 id="未唤醒-App"><a href="#未唤醒-App" class="headerlink" title="未唤醒 App"></a>未唤醒 App</h3><p>我手机是 IOS 的，是可以唤起的，但是安卓同事调试的时候说，后台运行时，可以唤起 App，但是没有切换动作；如果杀掉进程，就无法唤起。而这问题，大概率是 SDK 配置的问题，同事看了半天没解决，扔给他 <a href="https://developers.weixin.qq.com/doc/oplatform/Mobile_App/Access_Guide/Android.html">Android 接入指南</a> 。我又看不懂 Android，只能看他了</p><p>如果测试成功，能跳过去，那么就把本页链接当作 extinfo 传过去，他那边接收到 extinfo 后，做个映射表，跳转至自身的页面即可，所以 WxOpenLaunchApp 需要改造，多一个 extinfo 参数。。。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>因为我们用的是 flutter，同事说，因为引入的第三方库不支持，所以跳不过去，所以这个功能要后置，等他搞定了我再做更新</p><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>除了在 WxOpenLaunchApp 组件中加入监听 error，错误就让它跳转至 App 外，还要做当微信或者系统版本不支持微信标签时，需要监听并进行回退兼容，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;WeixinOpenTagsError&#x27;</span>, <span class="keyword">function</span> (<span class="params">e: any</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(e.<span class="property">detail</span>.<span class="property">errMsg</span>) <span class="comment">// 无法使用开放标签的错误原因，需回退兼容。仅无法使用开发标签，JS-SDK其他功能不受影响</span></span><br><span class="line">  <span class="title function_">toDownloadApp</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>又复用就抽离成组件</p><p>必须要上生产环境，所以最好是有个预生产环境</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p><a href="https://developers.weixin.qq.com/community/homepage">微信开发社区</a></p></li><li><p><a href="https://juejin.cn/post/7000652887390945294#heading-0">使用微信 wx-open-launch-app 标签实现微信网页打开 App 记录</a></p></li><li><p><a href="https://developers.weixin.qq.com/community/develop/article/doc/0006e4bdccc9d83f8fba292a45b813">微信开放标签 wx-open-launch-app 样式设置技巧</a></p></li><li><p><a href="https://www.jianshu.com/p/262658b8d19c">wx-open-launch-weapp 样式问题</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 微信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
            <tag> 项目实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>张一鸣微博记录</title>
      <link href="/2021/09/05/2021-09-05-%E5%BC%A0%E4%B8%80%E9%B8%A3%E5%BE%AE%E5%8D%9A%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/09/05/2021-09-05-%E5%BC%A0%E4%B8%80%E9%B8%A3%E5%BE%AE%E5%8D%9A%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>这里记录张一鸣曾经在微博上说过的一些话，不全，仅记录对当前自己有用的东西</p><ol><li>年轻人不要试图追求安全感，特别是年轻的时候，周遭环境从来都不会有绝对的安全感，如果你觉得安全了，很有可能开始暗藏危机。真正的安全感， 来自你对自己的信心，是你每个阶段性目标的实现，而真正的归属感，在于你的内心深处，对自己命运的把控，因为你最大的对手永远是自己。</li></ol><p>2.稻盛要辞职离开快倒闭的公司，遭兄长棒喝：“在这样没人干活的公司你都做 不出点成绩来，你还能干什么？2.洛克菲勒感觉再也无法忍受日复一日枯燥的工 作，提出换岗，遭主管冷言“要么好好干、要么另谋出路”。同样的道理，不同 的说法，却像雷一样击中并成就了两个商业巨匠。还是那句，不抱怨、想方法。</p><p>3.关于消费：买书、健身、学习都属于资金成本边际成本很低，对于很多人，只要你能真正完成这些消费，资金都不是主要成本而值得大力投入的消费。综上，我非常建议大家买书、买电子书、ipad、智能手机、买健身卡、游泳卡。。。还 有类似的消费吗？</p><p>4.听说有人每天能看一本书，问题还不在看书速度，而是在知易行难，实践的速度赶不上所知的要求，欠账很多</p><p>5.研究聪明人如何犯错误，回报率很高。聪明人易犯错误包括：1 嫉妒他人成功；2 自命不凡：3 过于相信自己判断；4 停止学习；5 认为世界是静止的，生活在过去荣耀中；6 任何事情都有自己一套言之有据、且深信不疑的说法和理论：忘记了没有调查研究，就没有发言权。你符合吗？</p><p>6.坚持原则很多时候是经济的，可以看做是一种短期浮亏的长期受益的投资。</p><p>7.加强专注力训练，它是优先级管理的保证，同时持续专注力的一个基础是体力和精力，锻炼修炼。</p><p>8.昨天和朋友聊天，总结到：在这个信息流动越来越快越来越透明的社会，从经济的角度来看，做一个表里不一的人成本越来越高，龌龊的人会越来越倒霉，不装不但是一个道德品性优选，而且也是更经济的。很多人还未意识到这点。</p><p>9.上午北京大学周其仁教授发言非常精彩。他认为一个持久得到别人信任的人，收入就越高。有比知识、技能更加重要的东西，那就是信任。他们的团队在研究了农民工的收入以后发现，收入最高的人，往往并不是体力最好、技能最好的时候，而是最受信任的人。所以，成为一个受人信任的人，非常重要。</p><p>10.最近感想：口碑很重要，人品很重要，信用很重要，越老越重要，原则要坚定。</p><p>11.你们读了哪些传记？想起 2 年前朋友说：如果不知道让小孩阅读什么，最适合的就是传记。最近在思考与回忆：关于品格、理想、动机的形成，觉得确实如此。</p><p>12.今天手机报上有一段话:”独处是一次心灵按摩” 静坐在斗室里，漫步在小道上， 平躺在沙滩上 … 有意识的面对自己，和内心对话。喜欢独处的人，和别人在一 起时，往往也会处理的更好。交流和独处相辅相成，才能让内心成熟和强大。</p><p>13.凡事就怕不认真，不思考。好多问题我应该能知道的，只是之前没有认真看，认真想，想当然（不是没时间）。延迟满足感是一项长期修炼。</p><p>14.今天晚上的时候，每个周五晚上下班的时候，我常会和同事说：我明天假期我们再把 xxx 做好。每次突然想这句话矛盾啊，不能这样要求。嗯，生活工作要平衡。不过，别人腐败的时候我们在努力，别人消磨时光的时候我们在学习，那么延迟的满足一定会厚积薄发来到。</p><p>15.人不逼一下自己，永远不知道自己潜力有多大。很多事情非不能也，是不为也。</p><p>16.《如何阅读一本书》一书在谈在技能之外，更多的是讲学习的态度和沟通的方法。比如赞同和反对作者一章，其实标题亦可写为，关于沟通的赞同和反对</p><p>17.好的问题就是一半的的答案</p><p>18.乔布斯说 stayhungry，我以为饥渴有三个层次：贪婪、成就动机、好奇心 。三者分别关注：瞬间的结果，持续的过程，和远大的未知。三者也恰好对应了三种人：卑劣的投机者，艰辛的攀登者，与幸福的探索者</p><p>19.有不少留言说不理解这段话。研究快乐的专家告诉我们：快乐有三种：pleasure（欢乐）,passion（热情）,higherpurpose（理想、有意义）.其中欢乐是最短暂的，热情其次，而最长久的是理想</p><p>20.想学的东西很多，吾生有涯知无涯，以有涯追无涯，怠也。有两种理解，积极的理解是应该有优先级的规划学习。</p><p>21.现在年轻人部分流行把三四十岁退休作为理想，我不认同，我觉得理想是一直有机会创造、实现想法，有机会学习，修炼，创造到老。为什么会想退休？想退休 说明你认为现在是在“忍”。我还有很多很多想法想做，希望三四十岁更多条件去实现想法。</p><p>22.保证足够睡眠是积极高效的第一步</p><p>23.生活中不是缺少美，而是缺少分享</p><p>24.很多很好的想法自己都非常认真，现在都被人实现或者通往实现的路上了。真希望自己能分身体几个同时努力，这样人生多精确。但是分身是不可能的，所以只能 1、根据情况排优先级 2、找到志同道合的人</p><p>25.应届生应该推崇自信，诚实，努力，相信成功可通过学习和努力获得。别太讨巧，走捷径。事实上面试大多不是因为技能不行，而是人品和性格不行</p><p>26.通货膨胀正在洗劫你的钱包，同学问怎么办？三个办法，一是尽可能地提高家庭负债率，当今之世能借到钱的就是英雄；二是配置资源性财产，能够抵抗通涨的 只有三个东西，黄金房产和农产品；三是像傻瓜一样的长期持有，眼前的涨跌都是对耐心的考验。除非天下大乱，否则以上三条应是规律。</p><p>27.系统地运动锻炼需要抗身体的惰性，锻炼久了之后不但身体好而且锻炼的积极性 也好容易启动养成习惯，最近觉得读书学习也很类似</p><p>28.执行力到底是什么？我认为的执行力是：说到做到，不找借口，完成别人都能完成的事。而更强的人可以做到：完成别人完不成的事。同样的一件事，交给不同的员工，会有不同的结果，完不成的人都会有各种理由来说服自己说服领导，将 一个小困难由点到面扩大化看待。做一个 NB 的人，从此刻开始，不再找借口</p><p>29.平庸有重力，需要逃逸速度</p><p>30.不怕犯错误，不怕坏方法，甚至不怕坏习惯。只要你会会自我改正。你习惯改正吗？</p><p>31.快到 30 岁了，感觉这几年又再重新学习/补习本应在青少年时间学习的东西：如何阅读、如何了解自己、如何与人沟通沟通、如何安排时间、如何正确的看待别人意见、如何激励自己、如何写作、如何坚持锻炼身体、如何耐心</p><p>32.互联网让会学习爱学习的人和相反的差距拉的更大，这并不仅限于互联网行业。只不过互联网行业这种趋势先开始而已。现在好多初中生、高中生比大学生、博士生还博学。我见过 2 个中学生，自己用 wiki 整理所学过的，自学的各种知识。我怎么生的这么早</p><p>33.延迟满足感 和 坚决告别惰性 是“优秀”的最重要两块基石。</p><p>34.当某人开始深入认识自己、研究自己的时候，说明此人开始有了哲学的思考，预示着此人开始迈入一个新的人生阶段。</p><p>35.非常同意自控力（也就是反惰性）是优秀的标准。确实马拉松不是高标准，思维意识情绪的自控更难。</p><p>36.牛逼的人找方法，傻逼的人找借口</p><p>37.看年轻人的潜力，看他周末几点起，周末在干嘛，下班在干嘛。甚至不一定要干嘛，只要看想些什么</p><p>38.今天早点睡，明天早上起来看书。本周的学习计划快完不成了。创业过程中不断的学习又能尝试是感觉很好的体验</p><p>39.人欲望太强的时候就容易短视，太自我中心的时候就容易盲目</p><p>40.以前一直都没觉得找人自信很重要，现在发现越来越重要。惰性、依赖、拖拉、 保守很多也都是是不自信导致的。自信的人自然会和自我高要求联系起来</p><p>41.关于勤奋，就我所知，罕有成功者不是工作时间极长的：通用电气的 CEO 每周 工作一百小时，坚持了至少十年。巴菲特为了最早看到次日的华尔街日报，经常在凌晨四点去取报纸。勤奋不是一种形式，而是一种心理状态：享受挑战极限的过程，保持热情和好奇心，坚持不懈</p><p>42.哈佛有一个著名的理论：人的差别在于业余时间，而一个人的命运决定于晚上 8 点到 10 点之间。每晚抽出 2 个小时的时间用来阅读、进修、思考或参加有意的 演讲、讨论，你会发现，你的人生正在发生改变，坚持数年之后，成功会向你招手</p><p>43.人生的本质是追寻自我的提升。包括思想、能力、意志等等。这些发展好了，一切随之而来。偏偏 大多数人追求的是短期的公司、职位、薪水，运气好的能有所发展，运气差的会迷失方向流于平庸</p><p>44.聪明还耐心是有一些矛盾的优点，同时具备两点的人却非常优秀</p><p>45.习惯：把要做的事情迅速分配在 calendar 上，会变化没关系，多调整</p><p>46.别装，做个坦诚真实的人。团队中都是坦诚真实的人，沟通成本将小很多</p><p>47.据多家公司统计，团队淘汰个人的顺序往往如下：第一批，明显缺陷者、众人厌恶的说谎者；第二批，不愿交流者、不合群者；第三批，有能力但慵懒者、妄图 坐享其成者；第四批，居功自傲者，蔑视同僚者。</p><p>48.经常看到职位蛮漂亮的人，但细看发现他每次升职都是换工作的时候发生的。这会让我警惕，因为好的人，老板会加薪升职来挽留。如果一个人在同一公司多次 升职，让我会放心很多，因为比我了解他多得多的人看好他给他更多的责任，而 且他一次次胜任。换工作才升职，有可能是外强中干，忽悠了新老板</p><p>49.一个身价两百多亿的老板不作秀、不爬山、不吹牛、不打口水仗、不接 受采访、不上电视杂志，以身作则像一个基层员工一样每天脚踏实地测试产品， 无止境地改进产品的体验。这才是腾讯成功的最大原因。而被腾讯打败的 Loser 们始终没有认识到这一点，要么骂它靠抄袭，要么说它靠 QQ 才能成功</p><p>50.其实我挺想知道团队成员周末都在干嘛。。。总希望大家把时间充分有效利用了。。当然我说的不是只工作，是指优先利用学习、休息、娱乐、锻炼、交流，思考上。并且可以一起活动。 51.一个公司最强的敌人是什么？韦尔奇说，是“坦率”。深表认同。幸好，坦率是可以培育的</p><p>52.【职场】昨晚请多玩优秀员工吃饭，聊了几点职场体会。(1) 把自己当老板看， 象老板一样拼命干活，能力自然就提高了。有了能力，假如多玩不能给你好的回 报，其他公司一定会给。(2) 不是每次付出就一定有回报，但是不断付出就一定 会有回报。@李学凌 补充了一点：象你的老板一样思考，能力会提高得更快</p><p>53.有人问我如何突破自己的职业瓶颈，我说：你的瓶颈就在于你的心。你的心更宽， 心态更好，遇到问题将自己拨高一层去看问题，把你心里的那些小纠结小疑惑小算盘小私心，统统打破，你就没有瓶颈 54.最近大家 review 了九九房半年的进展并讨论每个人的总结和设想，对我们的信 心更加增强。和同事曾讨论：创业要经常自省，避免自我强化和催眠。所以要区别信心和“YY”，真正信心源于看到自己的进步和潜力，可以分成两个方面：1、 对事情本身判断的信心 2、对自己和团队的信心</p><p>55.这周面了十几个人终于确定一个实习生。最近一个多月可能面试了 50 多人，总共只有 2 个非常有意向的人选，其中失败一个，一个还在谈。每当想放低要求的 时候，我就提醒自己一定不能往低走而要往高走，我们要做的出彩，而不是完成 的事情。而尤其在早期，核心几个人的能力素质态度是最关键的</p><p>56.创业就要像生小孩一样：准备好体力，用长劲，快速换气；喊疼和抱怨没用，专注在努力，关键时候坚持再坚持一把！</p><p>57.如果你很有才华，在某些方面又有一技之长，请先不要急于露出锋芒，如果你只是以普通身份而不是以领导身份到新单位去的，那就更不能锋芒太露。一个人新到一个单位，就像一粒石子投入一潭平静的池水，往往会引入注目，一举一动， 一言一行，都在别人的视野之中</p>]]></content>
      
      
      <categories>
          
          <category> 有知有行 </category>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 张一鸣 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 Node 搭建最小实现脚手架</title>
      <link href="/2021/09/01/2021-09-01-%E7%94%A8%20Node%20%E6%90%AD%E5%BB%BA%E6%9C%80%E5%B0%8F%E5%AE%9E%E7%8E%B0%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
      <url>/2021/09/01/2021-09-01-%E7%94%A8%20Node%20%E6%90%AD%E5%BB%BA%E6%9C%80%E5%B0%8F%E5%AE%9E%E7%8E%B0%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文介绍使用 Node 做一个脚手架，便于快速开发项目。我们开发的是脚手架，而非项目，目前本人只有一个脚手架 <a href="https://github.com/johanazhu/koa-basic">Koa 脚手架</a> ，后续写到 React、webpack 时，会搭建属于自己的一套 H5 端的开发模板。本文以实现最小脚手架为出发点展开写作，后续也会在此基础上添砖加瓦</p><h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>A：大 B 哥，Node 能做什么？</p><p>B：搭建 Web 服务噜</p><p>A：不仅如此，它还能操作系统</p><p>B：怎么说？</p><p>A：知道 Webpack 吗？它就是用 Node 写的。还有像<a href="https://github.com/facebook/create-react-app"> create-react-app</a>、 <a href="https://github.com/vuejs/vue-cli">vue-cli</a>、<a href="https://github.com/NervJS/taro/tree/next/packages/taro-cli">@tarojs/cli</a> 这些，都是用 Node 写的，这些 cli 被称为脚手架，你只要使用一些命令就能下载模板快速开发</p><p>B：（各种羡慕、吹捧后），我也想做一套自己的脚手架</p><p>A：我教你啊</p><h2 id="一个脚手架的思路"><a href="#一个脚手架的思路" class="headerlink" title="一个脚手架的思路"></a>一个脚手架的思路</h2><p>看 <a href="https://github.com/facebook/create-react-app"> create-react-app</a>、 <a href="https://github.com/vuejs/vue-cli">vue-cli</a>、<a href="https://github.com/NervJS/taro/tree/next/packages/taro-cli">@tarojs/cli</a> 的各自的仓库，我们能得出一些共同点，例如多套模板、友好的交互、优美的 UI 等等。我们这里以 taro 为例，先用用，看看，再仿着做一个</p><p><img src="https://i.loli.net/2021/08/31/8NhJZHDseSbmncq.png" alt="使用Taro-cli创建项目"></p><p>它是怎么做到选择不同的模板，能生成不同的文件呢？明明只有一个基础模板啊，选择 scss 就生成 scss 文件，选择 TypeScript 生成 TS 文件，现在还看不懂源码，以后写完 webpack 再来看看，我们这里只先做一个最简单的脚手架</p><h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> azhu-cli</span><br><span class="line"><span class="built_in">cd</span> azhu-cli</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>然后在 package.json 中写点项目信息</p><h2 id="需要安装的-npm-包"><a href="#需要安装的-npm-包" class="headerlink" title="需要安装的 npm 包"></a>需要安装的 npm 包</h2><p>我们先列个表格，查看一下各个 npm 包是什么，有什么用，后续在写代码时一步步添加进去</p><table><thead><tr><th>包名称</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://www.npmjs.com/package/commander">commander</a></td><td>执行复杂的命令</td></tr><tr><td><a href="https://www.npmjs.com/package/inquirer">inquirer</a></td><td>问答交互</td></tr><tr><td><a href="https://www.npmjs.com/package/download-git-repo">download-git-repo</a></td><td>下载远程模板</td></tr><tr><td><a href="https://www.npmjs.com/package/chalk">chalk</a></td><td>让你 console.log 出来的字带颜色，比如成功时的绿色字</td></tr><tr><td><a href="https://www.npmjs.com/package/ora">ora</a></td><td>loading</td></tr></tbody></table><h2 id="创建一个命令"><a href="#创建一个命令" class="headerlink" title="创建一个命令"></a>创建一个命令</h2><p>先创建 <code>index.js</code>，在代码中写入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在终端中运行 node 程序，输入 node 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node index.js</span><br></pre></td></tr></table></figure><p>可以正确输出 <code>hello world</code> ，代码顶部的 <code>#!/usr/bin/env node</code> 是告诉终端，这个文件要使用 node 去执行</p><p>一般 cli 都有一个特定的命令，例如 <code>taro</code>，<code>git</code> 等，我们设置我们的命令—— <code>azhu</code>。如何让终端识别这个命令呢？很简单，在 package.json 文件中添加一个字段 <code>bin</code>，并且声明一个命令关键字和对应执行的文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># package.json</span><br><span class="line">...</span><br><span class="line"><span class="attr">&quot;bin&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;azhu&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>然后我们测试一番，在终端中输入 <code>azhu</code>，会提示：</p><p><img src="https://i.loli.net/2021/08/31/Ua9hHfQcjwxYAV3.png" alt="azhu错误"></p><p>为什么会这样呢？通常我们在使用 cli 工具时，都需要先安装它，比如 vue-cli，@tarojs/cli，使用前需要全局安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-cli -g</span><br><span class="line">npm i @tarojs/cli -g</span><br></pre></td></tr></table></figure><p>而我们的 azhu-cli 并没有发布到 npm 上，当然也没有安装过，所以终端现在还不认识这个命令。通常我们想本地测试一个 npm 包，可以使用 <code>npm link</code> 这个命令，本地安装这个包，我们执行一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="built_in">link</span></span><br></pre></td></tr></table></figure><p>再执行 <code>azhu</code> 命令，就看到 <code>hello world</code> 了</p><blockquote><p>注：npm unlink 卸载本地包</p></blockquote><h2 id="执行复杂的命令"><a href="#执行复杂的命令" class="headerlink" title="执行复杂的命令"></a>执行复杂的命令</h2><p>commander：处理命令行交互</p><ul><li>自带了 -V，-h 交互</li><li>可以通过 <code>program.command</code> 添加交互</li><li><code>program.parse</code> 将命令参数传入 commander 管道中，一般放在最后执行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i commander --save</span><br></pre></td></tr></table></figure><p>改造 <code>index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">&#x27;commander&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> package = <span class="built_in">require</span>(<span class="string">&#x27;./package.json&#x27;</span>);</span><br><span class="line">program.<span class="title function_">version</span>(package.<span class="property">version</span>);</span><br><span class="line">program.<span class="title function_">parse</span>(process.<span class="property">argv</span>);</span><br></pre></td></tr></table></figure><p>运行 <code>azhu -h</code></p><p><img src="https://i.loli.net/2021/08/31/a2B5ng9rfWT8zks.png" alt="commander处理"></p><h2 id="添加问答操作"><a href="#添加问答操作" class="headerlink" title="添加问答操作"></a>添加问答操作</h2><p>inquirer 添加问答操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i inquirer --save</span><br></pre></td></tr></table></figure><p>语法很简单，直接看代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">inquirer</span><br><span class="line">  .<span class="title function_">prompt</span>([</span><br><span class="line">    &#123; <span class="attr">type</span>: <span class="string">&#x27;input&#x27;</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入项目名称&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;name&#x27;</span> &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;list&#x27;</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;请选择项目模板&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;template&#x27;</span>,</span><br><span class="line">      <span class="attr">choices</span>: [<span class="string">&#x27;koa-basic&#x27;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  ])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">answers</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;answers&#x27;</span>, answers);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>每个选项中的 name 为答案输出的值</p><p><img src="https://i.loli.net/2021/09/01/5dD3YqCer76Pmzl.png" alt="inquirer"></p><h2 id="克隆模板"><a href="#克隆模板" class="headerlink" title="克隆模板"></a>克隆模板</h2><p>download-git-repo</p><ul><li>下载远程模板</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i download-git-repo --save</span><br></pre></td></tr></table></figure><p>原本使用 bashjs，但是死活下载不下来，只能选择另一个工具</p><p>当我们下载写好项目名字，选择好模板后，下一步就要从远程仓库上把模板下载过来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">answers</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;正在拷贝项目，请稍等&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> remote = <span class="string">&#x27;https://github.com:johanazhu/koa-basic#master&#x27;</span></span><br><span class="line">      <span class="keyword">const</span> tarName = answers.<span class="property">name</span></span><br><span class="line">      <span class="title function_">download</span>(remote, tarName, &#123; <span class="attr">clone</span>: <span class="literal">true</span> &#125;, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="添加-UI-交互"><a href="#添加-UI-交互" class="headerlink" title="添加 UI 交互"></a>添加 UI 交互</h2><p>有时候下载远程仓库时会花很多时间，我们必须为了体验，需要加一些 UI 效果优化体验</p><p>chalk &amp; ora</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i chalk ora --save</span><br></pre></td></tr></table></figure><p>chalk 是给 console 加颜色</p><p>ora 是加 loading 效果的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">answers</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;正在拷贝项目，请稍等&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> remote = <span class="string">&#x27;https://github.com:johanazhu/koa-basic#master&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> tarName = answers.<span class="property">name</span></span><br><span class="line">    + <span class="keyword">const</span> spinner = <span class="title function_">ora</span>(<span class="string">&#x27;download template......&#x27;</span>).<span class="title function_">start</span>()</span><br><span class="line">    <span class="title function_">download</span>(remote, tarName, &#123; <span class="attr">clone</span>: <span class="literal">true</span> &#125;, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            + <span class="variable language_">console</span>.<span class="title function_">log</span>(chalk.<span class="title function_">red</span>(err))</span><br><span class="line">            spinner.<span class="title function_">fail</span>()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            + <span class="variable language_">console</span>.<span class="title function_">log</span>(chalk.<span class="title function_">green</span>(<span class="string">&#x27;成功&#x27;</span>))</span><br><span class="line">            spinner.<span class="title function_">succeed</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://i.loli.net/2021/09/01/tTVFrSi431Xy6dH.png" alt="chalk&amp;ora"></p><h2 id="发布-npm"><a href="#发布-npm" class="headerlink" title="发布 npm"></a>发布 npm</h2><p>先登录 npm，再发布</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm login</span><br><span class="line">...</span><br><span class="line">npm publish</span><br></pre></td></tr></table></figure><h2 id="额外知识点"><a href="#额外知识点" class="headerlink" title="额外知识点"></a>额外知识点</h2><h3 id="包管理方式"><a href="#包管理方式" class="headerlink" title="包管理方式"></a>包管理方式</h3><p><img src="https://i.loli.net/2021/08/31/BbwqCXi4p2h7Ttd.png" alt="包管理方式对比"></p><h4 id="monorepo"><a href="#monorepo" class="headerlink" title="monorepo"></a>monorepo</h4><ul><li><p>将多个项目代码存储在一个仓库里的软件开发策略</p></li><li><p>把所有的项目相关都放在一个仓库（比如 React，Babel，Umi，Taro）</p></li><li><p>集中管理</p></li><li><p>优势</p><ul><li>统一工作流</li><li>降低基建成本</li><li>提高团队协作效率</li></ul></li><li><p>劣势</p><ul><li>体积问题</li><li>权限问题</li><li>版本控制</li></ul></li></ul><h4 id="multirepo"><a href="#multirepo" class="headerlink" title="multirepo"></a>multirepo</h4><ul><li>按模块放在为多个仓库（webpack、rollup）</li><li>优势<ul><li>灵活</li><li>安全</li></ul></li><li>劣势<ul><li>代码复用</li><li>版本管理</li><li>开发调试</li><li>搭建基础架构</li></ul></li></ul><p>大的项目可以使用 monorepo，独立性比较强的可以采用 multirepo</p><p>我个人更喜欢 multirepo 的哲学</p><p>有人上升到哲学层面，其实俺觉得不同的项目应采用合适自己的管理方式，像 webpack、rollup 之类，项目独立性比较强，就可以用使用 multirepo ，而像 React，Umi，Taro 之类的框架，它首先要拆分功能点，其次每个子库之间需要与主库有所依赖，如果采用 multirepo 方式，关联起来会很麻烦，采用统一管理的方式能节省很多时间</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>一：使用 <code>bashjs</code> 常有报错，暂时解决不了，所以用 <code>download-git-repo</code> 这种方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable to access <span class="string">&#x27;https://github.com/johanazhu/koa-basic/&#x27;</span>: OpenSSL SSL_read: Connection was reset, errno 10054</span><br></pre></td></tr></table></figure><p>解决方案</p><p>打开 Git 命令页面，执行 git 命令脚本：修改设置，解除 ssl 验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.sslVerify <span class="string">&quot;false&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：git config –list 查看你的 config 信息</p></blockquote><p>二：<code>download-git-repo</code> 报错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;git clone&#x27;</span> failed with status 128</span><br></pre></td></tr></table></figure><p>解决方案：<a href="https://github.com/wuqiong7/Note/issues/17">https://github.com/wuqiong7/Note/issues/17</a></p><p>我将 remote 地址改成：<a href="https://github.com:johanazhu/koa-basic#master">https://github.com:johanazhu/koa-basic#master</a> 就好了</p><p>Github 已发布：<a href="https://github.com/johanazhu/azhu-cli">https://github.com/johanazhu/azhu-cli</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p><a href="https://github.com/imaoda/js-front-end-practice/blob/master/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%84%9A%E6%89%8B%E6%9E%B6.md">搭建一个企业级脚手架</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/CO6La0NCHnsfXN4MHgiBag">从零开发一个 node 命令行工具</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚手架 </tag>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一步一步来：手写Koa2</title>
      <link href="/2021/08/30/2021-08-30-%E6%89%8B%E5%86%99Koa2/"/>
      <url>/2021/08/30/2021-08-30-%E6%89%8B%E5%86%99Koa2/</url>
      
        <content type="html"><![CDATA[<p>之前讲过<a href="https://blog.azhubaby.com/2021/08/24/2021-08-24-Koa2%E4%BB%8E%E9%9B%B6%E5%88%B0%E8%84%9A%E6%89%8B%E6%9E%B6/">Koa2从零到脚手架</a>，以及<a href="https://blog.azhubaby.com/2021/08/27/2021-08-27-Koa2%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/">源码解读</a></p><p>这篇文章讲解如何手写一个 Koa2</p><h2 id="Step-1：封装-HTTP-服务和创建-Koa-构造函数"><a href="#Step-1：封装-HTTP-服务和创建-Koa-构造函数" class="headerlink" title="Step 1：封装 HTTP 服务和创建 Koa 构造函数"></a>Step 1：封装 HTTP 服务和创建 Koa 构造函数</h2><p>之前阅读 Koa2 的源码得知， Koa 的服务应用是基于 Node 原生的 HTTP 模块，对其进行封装形成的，我们先用原生 Node 实现 HTTP 服务</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">writeHead</span>(<span class="number">200</span>)</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;监听3000端口&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>再看看用 Koa2 实现 HTTP 服务</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;Koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000请求成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>实现 Koa 的第一步，就是对 原生 HTTP 服务进行封装，我们按照 Koa 源码的结构，新建 <code>lib/application.js</code> 文件，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbackFunc</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">listen</span>(<span class="params">port</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="variable language_">this</span>.<span class="title function_">callback</span>())</span><br><span class="line">    server.<span class="title function_">listen</span>(port)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">use</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbackFunc</span> = fn</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">callback</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">req, res</span>) =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">callbackFunc</span>(req, res)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Application</span></span><br></pre></td></tr></table></figure><p>我们引入手写的 Koa，并写个 demo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;./lib/application&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">writeHead</span>(<span class="number">200</span>)</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000请求成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>启动服务后，在浏览器中输入 <code>http://localhost:3000</code>，内容显示”Hello，World“</p><p>接着我们有两个方向，一是简化 <code>res.writeHead(200)、res.end(&#39;Hello world&#39;)</code> ；二是做塞入多个中间件。要想做第一个点需要先写 context，response，request 文件。做第二点其实做到后面也需要依赖 context，所以我们先做简化原生 response、request，以及将它集成到 context（ctx）对象上</p><h2 id="Step-2：构建-request、response、context-对象"><a href="#Step-2：构建-request、response、context-对象" class="headerlink" title="Step 2：构建 request、response、context 对象"></a>Step 2：构建 request、response、context 对象</h2><p>request、response、context 对象分别对应 request.js、response.js、context.js，request.js 处理请求体，response.js 处理响应体，context 集成了 request 和 response</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// request</span></span><br><span class="line"><span class="keyword">let</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">query</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> url.<span class="title function_">parse</span>(<span class="variable language_">this</span>.<span class="property">req</span>.<span class="property">url</span>, <span class="literal">true</span>).<span class="property">query</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// response</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exporrs</span> = &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">body</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_body</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">body</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_body</span> = data</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">status</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">res</span>.<span class="property">statusCode</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">status</span>(<span class="params">statusCode</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> statusCode !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;statusCode must be a number&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">res</span>.<span class="property">statusCode</span> = statusCode</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们在 request 中只做了 query 处理，在 response 中只做了 body、status 的处理。无论是 request 还是 response，我们都使用了 ES6 的 get、set，简单来说，get/set 就是能对一个 key 进行取值和赋值</p><p>现在我们已经实现了 request、response，获取了 request、response 对象和它们的封装方法，接下来我们来写 context。我们在源码分析时曾经说过，context 继承了 request 和 response 对象的参数，既有请求体中的方法，又有响应体中的方法，例如既能 ctx.query 查询请求体中 url 上的参数，又能通过 ctx.body 返回数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">query</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">request</span>.<span class="property">query</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">body</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">response</span>.<span class="property">body</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">body</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">response</span>.<span class="property">body</span> = data</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">status</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">response</span>.<span class="property">status</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">status</span>(<span class="params">statusCode</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">response</span>.<span class="property">status</span> = statusCode</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在源码中使用了 delegate，把 context 中的 context.request、context.response 上的方法代理到了 context 上，即 context.request.query === context.query; context.response.body === context.body。而 context.request，context.response 则是在 application 中挂载</p><p>总结一下：request.js 负责简化请求体的代码，response.js 负责简化响应体的代码，context.js 把请求体和响应体集成在一个对象上，并且都在 application 上生成，修改 application.js 文件，添加代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> context = <span class="built_in">require</span>(<span class="string">&#x27;context&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> response = <span class="built_in">require</span>(<span class="string">&#x27;response&#x27;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">callbackFunc</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">context</span> = context</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">request</span> = request</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">response</span> = response</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="title function_">createConext</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> ctx = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property">context</span>)</span><br><span class="line">        ctx.<span class="property">request</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property">request</span>)</span><br><span class="line">        ctx.<span class="property">response</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property">response</span>)</span><br><span class="line">        ctx.<span class="property">req</span> = ctx.<span class="property">request</span>.<span class="property">req</span> = req</span><br><span class="line">        ctx.<span class="property">res</span> = ctx.<span class="property">response</span>.<span class="property">res</span> = res</span><br><span class="line">        <span class="keyword">return</span> ctx</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为 context、request、response 在其他方法中要用到，所以我们在构造器中就把他们分别赋值为 this.context、this.request、this.response 。我们实现了上下文 ctx ，现在我们回到之前的问题，简写 <code>res.writeHead(200)、res.end(&#39;Hello world&#39;)</code></p><p>我们要想把 <code>res.writeHead(200)、res.end(&#39;Hello world&#39;)</code> 简化为 <code>ctx.body = &#39;Hello world&#39;</code>，该怎么做呢？</p><p><code>res.writeHead(200)、res.end(&#39;Hello world&#39;)</code> 是原生的， <code>ctx.body = &#39;Hello world&#39;</code> 是 Koa 的使用方法，我们要对 <code>ctx.body = &#39;Hello world&#39;</code> 做解析并转换为 <code>res.writeHead(200)、res.end(&#39;Hello world&#39;)</code> 。好在 ctx 已经通过 createContext 获取，那么再创建一个方法来封装 res.end，用 ctx.body 来表示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">responseBody</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> context = ctx.<span class="property">body</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> context === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    ctx.<span class="property">res</span>.<span class="title function_">end</span>(context)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> context === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    ctx.<span class="property">res</span>.<span class="title function_">end</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(context))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后我们修改 callback 方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   callback() &#123;</span></span><br><span class="line"><span class="comment">//     return (req, res) =&gt; this.callbackFunc(req, res)</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="title function_">callback</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 把原生 req,res 封装为 ctx</span></span><br><span class="line">      <span class="keyword">const</span> ctx = <span class="variable language_">this</span>.<span class="title function_">createContext</span>(req, res)</span><br><span class="line">      <span class="comment">// 执行 use 中的函数, ctx.body 赋值</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">callbackFunc</span>(ctx)</span><br><span class="line">      <span class="comment">// 封装 res.end，用 ctx.body 表示</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">responseBody</span>(ctx)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>PS：具体代码：请看仓库中的 Step 2</p></blockquote><h2 id="Step-3：中间件机制和洋葱模型"><a href="#Step-3：中间件机制和洋葱模型" class="headerlink" title="Step 3：中间件机制和洋葱模型"></a>Step 3：中间件机制和洋葱模型</h2><p>我们知道， Koa2 中最重要的功能是中间件，它的表现形式是可以用多个 use，每一个 use 方法中的函数就是一个中间件，通过第二个参数 next 来表示传递给下一个中间件，例如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 结果 123456</span></span><br></pre></td></tr></table></figure><p>所以，我们的中间件是个数组，其次，通过 next ，执行和暂停执行。一 next ，就暂停本中间件的执行，去执行下一个中间件。</p><p>Koa 的洋葱模型在 Koa1 中是用 generator + co.js 实现的， Koa2 则使用了 async/await + Promise 去实现。这次我们也是用 async/await + Promise 来实现</p><p>在源码分析时，我们就说了 Koa2 的中间件合成是独立成一个库，即 koa-compose，它的核心代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compose</span>(<span class="params">middleware</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">context, next</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">dispatch</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">dispatch</span>(<span class="params">i</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &lt;= index)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;next() called multiple times&#x27;</span>))</span><br><span class="line">      index = i</span><br><span class="line">      <span class="keyword">let</span> fn = middleware[i]</span><br><span class="line">      <span class="keyword">if</span> (i === middleware.<span class="property">length</span>) fn = next</span><br><span class="line">      <span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title function_">fn</span>(context, dispatch.<span class="title function_">bind</span>(<span class="literal">null</span>, i + <span class="number">1</span>)))</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体解读可以去源码分析上查看，这里我们不做探究</p><p>这里贴两种解决方案，其实都是递归它</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">componse</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">createNext</span>(<span class="params">middleware, oldNext</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">          <span class="keyword">await</span> <span class="title function_">middleware</span>(ctx, oldNext)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> len = <span class="variable language_">this</span>.<span class="property">middlewares</span>.<span class="property">length</span></span><br><span class="line">      <span class="keyword">let</span> <span class="title function_">next</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">let</span> currentMiddleware = <span class="variable language_">this</span>.<span class="property">middlewares</span>[i]</span><br><span class="line">        next = <span class="title function_">createNext</span>(currentMiddleware, next)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一种就是源码，关于 compose 函数，笔者还不能很好的写出个所以然，读者们请自行理解</p><h2 id="Step-4：错误捕获与监听机制"><a href="#Step-4：错误捕获与监听机制" class="headerlink" title="Step 4：错误捕获与监听机制"></a>Step 4：错误捕获与监听机制</h2><p>中间件中的错误代码如何捕获，因为中间件返回的是 Promise 实例，所以我们只需要 catch 错误处理就好，添加 onerror 方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onerror</span>(<span class="params">err, ctx</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err.<span class="property">code</span> === <span class="string">&#x27;ENOENT&#x27;</span>) &#123;</span><br><span class="line">      ctx.<span class="property">status</span> = <span class="number">404</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ctx.<span class="property">status</span> = <span class="number">500</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> msg = ctx.<span class="property">message</span> || <span class="string">&#x27;Internal error&#x27;</span></span><br><span class="line">    ctx.<span class="property">res</span>.<span class="title function_">end</span>(msg)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">emit</span>(<span class="string">&#x27;error&#x27;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">callback</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> ctx = <span class="variable language_">this</span>.<span class="title function_">createContext</span>(req, res)</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">respond</span> = (<span class="params"></span>) =&gt; <span class="variable language_">this</span>.<span class="title function_">responseBody</span>(ctx)</span><br><span class="line">      + <span class="keyword">const</span> <span class="title function_">onerror</span> = (<span class="params">err</span>) =&gt; <span class="variable language_">this</span>.<span class="title function_">onerror</span>(err, ctx)</span><br><span class="line">      <span class="keyword">let</span> fn = <span class="variable language_">this</span>.<span class="title function_">componse</span>()</span><br><span class="line">      + <span class="keyword">return</span> <span class="title function_">fn</span>(ctx).<span class="title function_">then</span>(respond).<span class="title function_">catch</span>(onerror)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们现在只是对中间件部分做了错误捕获，但是如果其他地方写错了代码，怎么知道以及通知给开发者，Node 提供了一个原生模块——events，我们的 Application 类继承它就能获取到监听功能，这样，当服务器上有错误发生时就能全部捕获</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们先读了 Koa2 的源码，知道后其数据结构及使用方式后，再渐进式手写了一个，这里特别感谢<a href="https://segmentfault.com/u/diyimingdexiao">第一名小蝌蚪</a>的 KOA2 框架原理解析和实现，他的这篇文章是我写 Koa2 文章的依据。说回 Koa2，它的功能特别简单，就是对原生 req，res 做了处理，让开发者能更容易地写代码；除此之外，引入中间件概念，这就像插件，引入即可使用，不需要时能减少代码，轻量大概就是 Koa2 的关键字吧</p><p>GitHub 地址：<a href="https://github.com/johanazhu/jo-koa2">https://github.com/johanazhu/jo-koa2</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://segmentfault.com/a/1190000018488597">KOA2 框架原理解析和实现</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> Koa2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Koa2 </tag>
            
            <tag> 手写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从浅入深了解Koa2源码</title>
      <link href="/2021/08/27/2021-08-27-Koa2%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2021/08/27/2021-08-27-Koa2%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>在前文我们介绍过什么是 <a href="https://fe.azhubaby.com/Koa2/Koa2%E5%9F%BA%E7%A1%80.html">Koa2 的基础</a></p><h2 id="简单回顾下"><a href="#简单回顾下" class="headerlink" title="简单回顾下"></a>简单回顾下</h2><h3 id="什么是-koa2"><a href="#什么是-koa2" class="headerlink" title="什么是 koa2"></a>什么是 koa2</h3><ol><li>NodeJS 的 web 开发框架</li><li>Koa 可被视为 nodejs 的 HTTP 模块的抽象</li></ol><h3 id="源码重点"><a href="#源码重点" class="headerlink" title="源码重点"></a>源码重点</h3><p>中间件机制</p><p>洋葱模型</p><p>compose</p><h2 id="源码结构"><a href="#源码结构" class="headerlink" title="源码结构"></a>源码结构</h2><p>Koa2 的源码地址：<a href="https://github.com/koajs/koa">https://github.com/koajs/koa</a></p><p>其中 lib 为其源码</p><p><img src="https://i.loli.net/2021/08/26/toxOpd5H6XEwaQj.png" alt="koa2源码"></p><p>可以看出，只有四个文件：<code>application.js</code>、<code>context.js</code>、<code>request.js</code>、<code>response.js</code></p><h2 id="application"><a href="#application" class="headerlink" title="application"></a>application</h2><p>为入口文件，它继承了 Emitter 模块，Emitter 模块是 NodeJS 原生的模块，简单来说，Emitter 模块能实现事件监听和事件触发能力</p><p><img src="https://i.loli.net/2021/08/26/JqloRhD7zLaCSdm.png" alt="application1"></p><p>删掉注释，从整理看 <code>Application</code> 构造函数</p><p><img src="https://i.loli.net/2021/08/26/swAqmIGTVCuZ2M6.png" alt="Application构造函数"></p><p>Application 在其原型上提供了 listen、toJSON、inspect、use、callback、handleRequest、createContext、onerror 等八个方法，其中</p><ul><li>listen：提供 HTTP 服务</li><li>use：中间件挂载</li><li>callback：获取 http server 所需要的 callback 函数</li><li>handleRequest：处理请求体</li><li>createContext：构造 ctx，合并 node 的 req、res，构造 Koa 的 参数——ctx</li><li>onerror：错误处理</li></ul><p>其他的先不要在意，我们再来看看 构造器 <code>constructor</code></p><p><img src="https://i.loli.net/2021/08/26/Emlw8daN3ZTuDvJ.png" alt="Application的构造器"></p><p>晕，这都啥和啥，我们启动一个最简单的服务，看看实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;Koa&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000请求成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(app)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/26/kda3JfI9AoCPpVt.png" alt="实例"></p><p>能看出来，我们的实例和构造器一一对应，</p><p>打断点看原型</p><p><img src="https://i.loli.net/2021/08/26/WJzLP3FAKqTwy96.png" alt="断点"></p><p>哦了，除去非关键字段，我们只关注重点</p><p>Koa 的构造器上的 this.middleware、 this.context、 this.request、this.response</p><p>原型上有：listen、use、callback、handleRequest、createContext、onerror</p><blockquote><p>注：以下代码都是删除异常和非关键代码</p></blockquote><h3 id="先看-listen"><a href="#先看-listen" class="headerlink" title="先看 listen"></a>先看 listen</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="title function_">listen</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="variable language_">this</span>.<span class="title function_">callback</span>())</span><br><span class="line">    <span class="keyword">return</span> server.<span class="title function_">listen</span>(...args)</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可以看出 listen 就是用 http 模块封装了一个 http 服务，重点是传入的 <code>this.callback()</code>。好，我们现在就去看 callback 方法</p><h3 id="callback"><a href="#callback" class="headerlink" title="callback"></a>callback</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">callback</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="title function_">compose</span>(<span class="variable language_">this</span>.<span class="property">middleware</span>)</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleRequest</span> = (<span class="params">req, res</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> ctx = <span class="variable language_">this</span>.<span class="title function_">createContext</span>(req, res)</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">handleRequest</span>(ctx, fn)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> handleRequest</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它包含了中间件的合并，上下文的处理，以及 res 的特殊处理</p><h4 id="中间件的合并"><a href="#中间件的合并" class="headerlink" title="中间件的合并"></a>中间件的合并</h4><p>使用了 <code>koa-compose</code> 来合并中间件，这也是洋葱模型的关键，koa-compose 的源码地址：<a href="https://github.com/koajs/compose%E3%80%82%E8%BF%99%E4%BB%A3%E7%A0%81%E5%B7%B2%E7%BB%8F%E4%B8%89%E5%B9%B4%E6%B2%A1%E5%8A%A8%E4%BA%86%EF%BC%8C%E7%A8%B3%E7%9A%84%E4%B8%80%E9%80%BC">https://github.com/koajs/compose。这代码已经三年没动了，稳的一逼</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compose</span>(<span class="params">middleware</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">context, next</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">dispatch</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">dispatch</span>(<span class="params">i</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &lt;= index)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;next() called multiple times&#x27;</span>))</span><br><span class="line">      index = i</span><br><span class="line">      <span class="keyword">let</span> fn = middleware[i]</span><br><span class="line">      <span class="keyword">if</span> (i === middleware.<span class="property">length</span>) fn = next</span><br><span class="line">      <span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title function_">fn</span>(context, dispatch.<span class="title function_">bind</span>(<span class="literal">null</span>, i + <span class="number">1</span>)))</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一晃眼是看不明白的，我们需要先明白 middleware 是什么，即中间件数组，那它是怎么来的呢，构造器中有 this.middleware，谁使用到了—— use 方法</p><p>我们先跳出去先看 use 方法</p><h4 id="use"><a href="#use" class="headerlink" title="use"></a>use</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">use</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">middleware</span>.<span class="title function_">push</span>(fn)</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除去异常处理，关键是这两步，<code>this.middleware</code> 是一个数组，第一步往 <code>this.middleware</code> 中 push 中间件；第二步返回 this 让其可以链式调用，当初本人被面试如何做 promise 的链式调用，懵逼脸，没想到在这里看到了</p><p>回过头来看 koa-compose 源码，设想一下这种场景</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">&#125;);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>我们知道 它的运行是 123456</p><p>它的 this.middleware 的构成是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">middleware</span> = [</span><br><span class="line">  <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>不要感到奇怪，函数也是对象之一，是对象就可以传值</p><p><code>const fn = compose(this.middleware)</code></p><p>我们将其 JavaScript 化，其他不用改，只需要把最后一个函数改成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">  -ctx.<span class="property">body</span> = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">  +<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/26/bSfzDjPWnVx6JCU.png" alt="测试compose"></p><p><img src="https://i.loli.net/2021/08/26/rSN5GpudU2KimLW.png" alt="测试compose2"></p><h4 id="逐行解析-koa-compose"><a href="#逐行解析-koa-compose" class="headerlink" title="逐行解析 koa-compose"></a>逐行解析 koa-compose</h4><p>这一段很重要，面试的时候常考，让你手写一个 compose ，淦它</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. async (ctx, next) =&gt; &#123; console.log(1); await next(); console.log(6); &#125; 中间件</span></span><br><span class="line"><span class="comment">//2. const fn = compose(this.middleware) 合并中间件</span></span><br><span class="line"><span class="comment">//3. fn() 执行中间件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">compose</span>(<span class="params">middleware</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">context, next</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> index = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">dispatch</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">dispatch</span>(<span class="params">i</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt;= index)</span><br><span class="line">                <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;next() called multiple times&#x27;</span>),</span><br><span class="line">                );</span><br><span class="line">            index = i;</span><br><span class="line">            <span class="keyword">let</span> fn = middleware[i];</span><br><span class="line">            <span class="keyword">if</span> (i === middleware.<span class="property">length</span>) fn = next;</span><br><span class="line">            <span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title function_">fn</span>(context, dispatch.<span class="title function_">bind</span>(<span class="literal">null</span>, i + <span class="number">1</span>)));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行 <code>const fn = compose(this.middleware)</code>，即如下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="keyword">function</span> (<span class="params">context, next</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">dispatch</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">dispatch</span> (i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &lt;= index) <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;next() called multiple times&#x27;</span>))</span><br><span class="line">      index = i</span><br><span class="line">      <span class="keyword">let</span> fn = middleware[i]</span><br><span class="line">      <span class="keyword">if</span> (i === middleware.<span class="property">length</span>) fn = next</span><br><span class="line">      <span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title function_">fn</span>(context, dispatch.<span class="title function_">bind</span>(<span class="literal">null</span>, i + <span class="number">1</span>)))</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行 <code>fn()</code>，即如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="keyword">function</span> (<span class="params">context, next</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">dispatch</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">dispatch</span> (i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &lt;= index) <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;next() called multiple times&#x27;</span>))</span><br><span class="line">      index = i<span class="comment">// index = 0</span></span><br><span class="line">      <span class="keyword">let</span> fn = middleware[i] <span class="comment">// fn 为第一个中间件</span></span><br><span class="line">      <span class="keyword">if</span> (i === middleware.<span class="property">length</span>) fn = next <span class="comment">// 当弄到最后一个中间件时，最后一个中间件赋值为 fn</span></span><br><span class="line">      <span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title function_">fn</span>(context, dispatch.<span class="title function_">bind</span>(<span class="literal">null</span>, i + <span class="number">1</span>)))</span><br><span class="line">          <span class="comment">// 返回一个 Promise 实例，执行 递归执行 dispatch(1)</span></span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是第一个中间件，要先等第二个中间件执行完才返回，第二个要等第三个执行完才返回，直到中间件执行执行完毕</p><p><code>Promise.resolve</code> 就是个 Promise 实例，之所以使用 <code>Promise.resolve</code> 是为了解决异步</p><p>抛去 <code>Promise.resolve</code>，我们先看一下递归的使用，执行以下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">dispatch</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">dispatch</span>(<span class="params">i</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">3</span>) <span class="keyword">return</span>;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">dispatch</span>(i++);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">// 1,2,3,4</span></span><br></pre></td></tr></table></figure><p>回过头来再看一次 compose，代码类似于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设 this.middleware = [fn1, fn2, fn3]</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">context, next</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i === middleware.<span class="property">length</span>) fn = next <span class="comment">// fn3 没有 next</span></span><br><span class="line">    <span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>() <span class="comment">// 因为 fn 为空，执行这一行</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">dispatch</span> (<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title function_">fn</span>(context, <span class="keyword">function</span> <span class="title function_">dispatch</span>(<span class="params"><span class="number">1</span></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title function_">fn</span>(context, <span class="keyword">function</span> <span class="title function_">dispatch</span>(<span class="params"><span class="number">2</span></span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">            &#125;))</span><br><span class="line">        &#125;))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种递归的方式类似执行栈，先进先出</p><p><img src="https://i.loli.net/2021/08/27/jHTlILthfZJGdcR.png" alt="执行栈"></p><p>这里要多思考一下，递归的使用，对 Promise.resolve 不用太在意</p><h4 id="上下文的处理"><a href="#上下文的处理" class="headerlink" title="上下文的处理"></a>上下文的处理</h4><p>上下文的处理即调用了 createContext</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">createContext</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> context = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property">context</span>)</span><br><span class="line">    <span class="keyword">const</span> request = (context.<span class="property">request</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property">request</span>))</span><br><span class="line">    <span class="keyword">const</span> response = (context.<span class="property">response</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property">response</span>))</span><br><span class="line">    context.<span class="property">app</span> = request.<span class="property">app</span> = response.<span class="property">app</span> = <span class="variable language_">this</span></span><br><span class="line">    context.<span class="property">req</span> = request.<span class="property">req</span> = response.<span class="property">req</span> = req</span><br><span class="line">    context.<span class="property">res</span> = request.<span class="property">res</span> = response.<span class="property">res</span> = res</span><br><span class="line">    request.<span class="property">ctx</span> = response.<span class="property">ctx</span> = context</span><br><span class="line">    request.<span class="property">response</span> = response</span><br><span class="line">    response.<span class="property">request</span> = request</span><br><span class="line">    context.<span class="property">originalUrl</span> = request.<span class="property">originalUrl</span> = req.<span class="property">url</span></span><br><span class="line">    context.<span class="property">state</span> = &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> context</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入原生的 request 和 response，返回一个 上下文——context，代码很清晰，不解释</p><h4 id="res-的特殊处理"><a href="#res-的特殊处理" class="headerlink" title="res 的特殊处理"></a>res 的特殊处理</h4><p>callback 中是先执行 this.createContext，拿到上下文后，再去执行 handleRequest，先看代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">handleRequest</span>(<span class="params">ctx, fnMiddleware</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = ctx.<span class="property">res</span></span><br><span class="line">    res.<span class="property">statusCode</span> = <span class="number">404</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">onerror</span> = (<span class="params">err</span>) =&gt; ctx.<span class="title function_">onerror</span>(err)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleResponse</span> = (<span class="params"></span>) =&gt; <span class="title function_">respond</span>(ctx)</span><br><span class="line">    <span class="title function_">onFinished</span>(res, onerror)</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fnMiddleware</span>(ctx).<span class="title function_">then</span>(handleResponse).<span class="title function_">catch</span>(onerror)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一切都清晰了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;Koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app&#x27;</span>, app);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000请求成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样一段代码，实例化后，获得了 this.middleware、this.context、this.request、this.response 四大将，你使用 app.use() 时，将其中的函数推到 this.middleware。再使用 app.listen() 时，相当于起了一个 HTTP 服务，它合并了中间件，获取了上下文，并对 res 进行了特殊处理</p><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onerror</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(err <span class="keyword">instanceof</span> <span class="title class_">Error</span>))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(util.<span class="title function_">format</span>(<span class="string">&#x27;non-error thrown: %j&#x27;</span>, err))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">404</span> == err.<span class="property">status</span> || err.<span class="property">expose</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">silent</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> msg = err.<span class="property">stack</span> || err.<span class="title function_">toString</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(msg.<span class="title function_">replace</span>(<span class="regexp">/^/gm</span>, <span class="string">&#x27;  &#x27;</span>))</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="context-js"><a href="#context-js" class="headerlink" title="context.js"></a>context.js</h2><p>映入我眼帘的是两个东西</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.</span></span><br><span class="line"><span class="keyword">const</span> proto = <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="title function_">inspect</span>(<span class="params"></span>)&#123;...&#125;,</span><br><span class="line">    <span class="title function_">toJSON</span>(<span class="params"></span>)&#123;...&#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line"><span class="title function_">delegate</span>(proto, <span class="string">&#x27;response&#x27;</span>)</span><br><span class="line">  .<span class="title function_">method</span>(<span class="string">&#x27;attachment&#x27;</span>)</span><br><span class="line">  .<span class="title function_">access</span>(<span class="string">&#x27;status&#x27;</span>)</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>第一个可以理解为，const proto = { inspect() {…} …}，并且 module.exports 导出这个对象</p><p>第二个可以这么看，delegate 就是代理，这是为了方便开发者而设计的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将内部对象 response 的属性，委托至暴露在外的 proto 上</span></span><br><span class="line"><span class="title function_">delegate</span>(proto, <span class="string">&#x27;response&#x27;</span>)</span><br><span class="line">  .<span class="title function_">method</span>(<span class="string">&#x27;redirect&#x27;</span>)</span><br><span class="line">  .<span class="title function_">method</span>(<span class="string">&#x27;vary&#x27;</span>)</span><br><span class="line">  .<span class="title function_">access</span>(<span class="string">&#x27;status&#x27;</span>)</span><br><span class="line">  .<span class="title function_">access</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">  .<span class="title function_">getter</span>(<span class="string">&#x27;headerSent&#x27;</span>)</span><br><span class="line">  .<span class="title function_">getter</span>(<span class="string">&#x27;writable&#x27;</span>);</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>而使用 <code>delegate(proto, &#39;response&#39;).access(&#39;status&#39;)...</code>，就是在 context.js 导出的文件，把 proto.response 上的各个参数都代理到 proto 上，那 proto.response 是什么？就是 context.response，context.response 哪来的？</p><p>回顾一下， 在 createContext 中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">createContext</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> context = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property">context</span>)</span><br><span class="line">    <span class="keyword">const</span> request = (context.<span class="property">request</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property">request</span>))</span><br><span class="line">    <span class="keyword">const</span> response = (context.<span class="property">response</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property">response</span>))</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>context.response 有了，就明了了， context.response = this.response，因为 delegate，所以 context.response 上的参数代理到了 context 上了，举个例子</p><ul><li>ctx.header 是 ctx.request.header 上代理的</li><li>ctx.body 是 ctx.response.body 上代理的</li></ul><h2 id="request-js-和-response-js"><a href="#request-js-和-response-js" class="headerlink" title="request.js 和 response.js"></a>request.js 和 response.js</h2><p>一个处理请求对象，一个处理返回对象，基本上是对原生 req、res 的简化处理，大量使用了 ES6 中的 get 和 post 语法</p><p>大概就是这样，了解了这么多，怎么手写一个 Koa2 呢，请看下一篇——手写 Koa2</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p><a href="https://segmentfault.com/a/1190000018488597">KOA2 框架原理解析和实现</a></p></li><li><p><a href="https://developers.weixin.qq.com/community/develop/article/doc/0000e4c9290bc069f3380e7645b813">可能是目前最全的 koa 源码解析指南</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> Koa2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Koa2 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Koa2从零到脚手架</title>
      <link href="/2021/08/24/2021-08-24-Koa2%E4%BB%8E%E9%9B%B6%E5%88%B0%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
      <url>/2021/08/24/2021-08-24-Koa2%E4%BB%8E%E9%9B%B6%E5%88%B0%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-Koa2"><a href="#什么是-Koa2" class="headerlink" title="什么是 Koa2"></a>什么是 Koa2</h2><p>由 Express 原班人马打造的新生代 Node.js Web 框架，它的代码很简单，没有像 Express 那样，提供路由、静态服务等等，它是为了解决 Node 问题（简化了 Node 中操作）并取代之，它本身是一个简单的中间件框架，需要配合各个中间件才能使用</p><p><a href="https://koajs.com/">文档</a></p><p><a href="https://koa.bootcss.com/">中文文档</a> (野生)</p><h2 id="最简单的-Koa-服务器"><a href="#最简单的-Koa-服务器" class="headerlink" title="最简单的 Koa 服务器"></a>最简单的 Koa 服务器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000端口已启动&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="洋葱模型"><a href="#洋葱模型" class="headerlink" title="洋葱模型"></a>洋葱模型</h2><p><img src="https://i.loli.net/2021/08/22/HBG3YuUs6Pn48AO.png" alt="洋葱模型"></p><p>这是 Koa 的洋葱模型</p><p>看看 Express 的中间件是什么样的：</p><p><img src="https://i.loli.net/2021/08/22/hMleGoU2NwQtYqO.png" alt="Express的中间件"></p><p>请求（Request）直接依次贯穿各个中间件，最后通过请求处理函数返回响应（Response）。再来看看 Koa 的中间件是什么样的：</p><p><img src="https://i.loli.net/2021/08/22/clE2NI1svCihqQm.png" alt="koa的中间件"></p><p>可以看出，Koa 中间件不像 Express 中间件那样在请求通过了之后就完成自己的使命；相反，中间件的执行清晰地分为两个阶段。我们看看 Koa 中间件具体是什么样的</p><h2 id="Koa-中间件的定义"><a href="#Koa-中间件的定义" class="headerlink" title="Koa 中间件的定义"></a>Koa 中间件的定义</h2><p>Koa 的中间件是这样一个函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">middleware</span>(<span class="params">ctx, next</span>) &#123;</span><br><span class="line">  <span class="comment">// 先做什么</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">  <span class="comment">// 后做什么</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个参数是 Koa Context，也就是上图中贯穿中间件和请求处理函数的绿色箭头所传递的内容，里面封装了请求体和响应体（实际上还有其他属性），分别可以通过 <code>ctx.request</code> 和 <code>ctx.response</code> 来获取，以下是一些常用的属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">url</span>; <span class="comment">// 相当于 ctx.request.url</span></span><br><span class="line">ctx.<span class="property">body</span>; <span class="comment">// 相当于 ctx.response.boby</span></span><br><span class="line">ctx.<span class="property">status</span>; <span class="comment">// 相当于 ctx.response.status</span></span><br></pre></td></tr></table></figure><blockquote><p>更多 Context 属性请参考 <a href="https://github.com/koajs/koa/blob/master/docs/api/context.md">Context API 文档</a></p></blockquote><p>中间件的第二个参数便是 <code>next</code> 函数：用来把控制权转交给下一个中间件。但它与 Express 的 <code>next</code> 函数本质的区别在于， <strong>Koa 的 <code>next</code> 函数返回的是一个 Promise</strong> ，在这个 Promise 进入完成状态（Fulfilled）后，就会去执行中间件中第二个阶段的代码。</p><h2 id="有哪些常见的中间件"><a href="#有哪些常见的中间件" class="headerlink" title="有哪些常见的中间件"></a>有哪些常见的中间件</h2><h3 id="路由中间件——koa-router-或-koa-router"><a href="#路由中间件——koa-router-或-koa-router" class="headerlink" title="路由中间件——koa-router 或@koa/router"></a>路由中间件——koa-router 或@koa/router</h3><h4 id="下载-npm-包"><a href="#下载-npm-包" class="headerlink" title="下载 npm 包"></a>下载 npm 包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install koa-router --save</span><br></pre></td></tr></table></figure><blockquote><p>有些教程使用 <code>@koa/router</code>，现如今这两个库由同一个人维护，代码也一致。即 koa-router === @koa/router（写自 2021 年 8 月 23 日）</p></blockquote><p>NPM 包地址：<a href="https://www.npmjs.com/package/koa-router">koa-router</a> 、<a href="https://www.npmjs.com/package/@koa/router">@koa/router</a></p><h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><p>在根目录下创建 controllers 目录，用来存放控制器有关的代码。首先是 HomeController，创建 controllers/home.js，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HomeController</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">home</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;Login Controller&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">register</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;Register Controller&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">HomeController</span>;</span><br></pre></td></tr></table></figure><h4 id="实现路由"><a href="#实现路由" class="headerlink" title="实现路由"></a>实现路由</h4><p>再创建 routes 文件夹，用于把控制器挂载到对应的路由上面，创建 home.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Router</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; home, login, register &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../controllers/home&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, home);</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, login);</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/register&#x27;</span>, register);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><h4 id="注册路由"><a href="#注册路由" class="headerlink" title="注册路由"></a>注册路由</h4><p>在 routes 中创建 index.js，以后所有的路由都放入 routes，我们创建 index.js 的目的是为了让结构更加整齐，index.js 负责所有路由的注册，它的兄弟文件负责各自的路由</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.<span class="title function_">readdirSync</span>(__dirname).<span class="title function_">forEach</span>(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (file === <span class="string">&#x27;index.js&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> route = <span class="built_in">require</span>(<span class="string">`./<span class="subst">$&#123;file&#125;</span>`</span>);</span><br><span class="line">    app.<span class="title function_">use</span>(route.<span class="title function_">routes</span>()).<span class="title function_">use</span>(route.<span class="title function_">allowedMethods</span>());</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>注：allowedMethods 的作用</p><ol><li>响应 option 方法，告诉它所支持的请求方法</li><li>相应地返回 405 （不允许）和 501 （没实现）</li></ol><p>注：可以看到 <code>@koa/router</code> 的使用方式基本上与 Express Router 保持一致</p></blockquote><h4 id="引入路由"><a href="#引入路由" class="headerlink" title="引入路由"></a>引入路由</h4><p>最后我们需要将 router 注册为中间件，新建 <code>index.js</code>，编写代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> routing = <span class="built_in">require</span>(<span class="string">&#x27;./routes&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 Koa 应用实例</span></span><br><span class="line">consr app = <span class="keyword">new</span> <span class="title class_">Koa</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册中间件</span></span><br><span class="line"><span class="comment">// 相应用户请求</span></span><br><span class="line"><span class="title function_">routing</span>(app)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>使用 postman 测试一下</p><p><img src="https://i.loli.net/2021/08/24/PFnyfjLORIZ1imC.png" alt="测试路由"></p><h3 id="其他中间件"><a href="#其他中间件" class="headerlink" title="其他中间件"></a>其他中间件</h3><ul><li>koa-bodyparser ——请求体解析</li><li>koa-static —— 提供静态资源服务</li><li>@koa/cors —— 跨域</li><li>koa-json-error —— 处理错误</li><li>koa-parameter —— 参数校验</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cnpm i koa-bodyparser -S</span><br><span class="line">cnpm i koa-static -S</span><br><span class="line">cnpm i @koa/cors -S</span><br><span class="line">cnpm i koa-json-error -S</span><br><span class="line">cnpm i koa-parameter -S</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bobyParser = <span class="built_in">require</span>(<span class="string">&#x27;koa-bodyparser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> koaStatic = <span class="built_in">require</span>(<span class="string">&#x27;koa-static&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;@koa/cors&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> error = <span class="built_in">require</span>(<span class="string">&#x27;koa-json-error&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> parameter = <span class="built_in">require</span>(<span class="string">&#x27;koa-parameter&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> routing = <span class="built_in">require</span>(<span class="string">&#x27;./routes&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(</span><br><span class="line">  <span class="title function_">error</span>(&#123;</span><br><span class="line">    <span class="attr">postFormat</span>: <span class="function">(<span class="params">e, &#123; stack, ...rest &#125;</span>) =&gt;</span></span><br><span class="line">      process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span> ? rest : &#123; stack, ...rest &#125;,</span><br><span class="line">  &#125;),</span><br><span class="line">);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">bobyParser</span>());</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">koaStatic</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>());</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">parameter</span>(app));</span><br><span class="line"><span class="title function_">routing</span>(app);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000端口已启动&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="实现-JWT-鉴权"><a href="#实现-JWT-鉴权" class="headerlink" title="实现 JWT 鉴权"></a>实现 JWT 鉴权</h2><p>JSON Web Token（JWT）是一种流行的 RESTful API 鉴权方案</p><p>先安装相关的 npm 包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install koa-jwt jsonwebtoken -S</span><br></pre></td></tr></table></figure><p>创建 <code>config/index.js</code> ，用来存放 JWT Secret 常量，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">JWT_SECRET</span> = <span class="string">&#x27;secret&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="variable constant_">JWT_SECRET</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>有些路由我们希望只有已登录的用户才有权查看（受保护路由），而另一些路由则是所有请求都可以访问（不受保护的路由）。在 Koa 的洋葱模型中，我们可以这样实现：</p><p><img src="https://i.loli.net/2021/08/23/J5LYKBUTFIm4Q87.png" alt="加入JWT后的洋葱模型"></p><p>可以看出，所有的请求都可以直接访问未受保护的路由，但是受保护的路由都放在 JWT 中间件的后面，我们需要再创建几个文件来做 JWT 的实验</p><p>我们知道，所谓的用户（users）是个最常见的需要鉴权的路由，所以我们现在 controllers 中创建 user.js ，写下如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">create</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;create&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">find</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;find&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">findById</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;findById&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">update</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;update&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">delete</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;delete&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">UserController</span>;</span><br></pre></td></tr></table></figure><h4 id="注册-JWT-中间件"><a href="#注册-JWT-中间件" class="headerlink" title="注册 JWT 中间件"></a>注册 JWT 中间件</h4><p>用户的增删改查都安排上了，语义很明显了，其次我们在 routes 文件中创建 user.js，这里展示与 users 路由相关的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Router</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;koa-jwt&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  create,</span><br><span class="line">  find,</span><br><span class="line">  findById,</span><br><span class="line">  update,</span><br><span class="line">  <span class="attr">delete</span>: del,</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">&#x27;../controllers/user&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>(&#123; <span class="attr">prefix</span>: <span class="string">&#x27;/users&#x27;</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="variable constant_">JWT_SECRET</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../config/&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> auth = <span class="title function_">jwt</span>(&#123; <span class="variable constant_">JWT_SECRET</span> &#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, create);</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, find);</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/:id&#x27;</span>, findById);</span><br><span class="line">router.<span class="title function_">put</span>(<span class="string">&#x27;/:id&#x27;</span>, auth, update);</span><br><span class="line">router.<span class="title function_">delete</span>(<span class="string">&#x27;/:id&#x27;</span>, auth, del);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><p>综上代码，routes 文件下的 home.js 都不需要 JWT 中间件的保护，user.js 中的 更新和删除需要 JWT 的保护</p><p>测试一下，能看出 JWT 已经起作用了</p><p><img src="https://i.loli.net/2021/08/24/HEt9xDV8WQUnKcJ.png" alt="测试JWT"></p><p>我们到目前为止，完成了对 JWT 的验证，但是验证的前提是先签发 JWT，怎么签发，你登录的时候我给你一个签好名的 token，要更新/删除时在请求头中带上 token，我就能校验…</p><p>这里牵扯到登录，我们先暂停一下，先补充数据库的知识，让项目更加完整</p><h2 id="Mongoose-加入战场"><a href="#Mongoose-加入战场" class="headerlink" title="Mongoose 加入战场"></a>Mongoose 加入战场</h2><p>如果要做一个完整的项目，数据库是必不可少的，与 Node 匹配的较好的是 NoSql 数据库，其中以 Mongodb 为代表，当然如果我们要使用这一数据库，需要按照相应的库，而这个库就是 mongoose</p><h3 id="下载-mongoose"><a href="#下载-mongoose" class="headerlink" title="下载 mongoose"></a>下载 mongoose</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i mongoose -S</span><br></pre></td></tr></table></figure><h3 id="连接及配置"><a href="#连接及配置" class="headerlink" title="连接及配置"></a>连接及配置</h3><p>在 <code>config/index.js</code> 中添加 connectionStr 变量，代表 mongoose 连接的数据库地址</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">JWT_SECRET</span> = <span class="string">&#x27;secret&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> connectionStr = <span class="string">&#x27;mongodb://127.0.0.1:27017/basic&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="variable constant_">JWT_SECRET</span>,</span><br><span class="line">  connectionStr,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>创建 <code>db/index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; connectionStr &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../config/&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">connect</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    mongoose.<span class="title function_">connect</span>(connectionStr, &#123;</span><br><span class="line">      <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    mongoose.<span class="property">connection</span>.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    mongoose.<span class="property">connection</span>.<span class="title function_">on</span>(<span class="string">&#x27;open&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Mongoose连接成功&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>进入主文件 <code>index.js</code>，修改配置并启动</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">&#x27;./db/&#x27;</span>)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">db.<span class="title function_">connect</span>()</span><br></pre></td></tr></table></figure><p>启动服务 <code>npm run serve</code>，即 <code>nodemon index.js</code>，能看出 mongoose 已经连接成功了</p><p><img src="https://i.loli.net/2021/08/23/LQcboKAC8sZXMFh.png" alt="nodemon"></p><h3 id="创建数据模型定义"><a href="#创建数据模型定义" class="headerlink" title="创建数据模型定义"></a>创建数据模型定义</h3><p>在根目录下创建 <code>models</code> 目录，用来存放数据模型定义文件，在其中创建 <code>User.js</code>，代表用户模型，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> schema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">username</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span> &#125;,</span><br><span class="line">  <span class="attr">password</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span> &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;User&#x27;</span>, schema);</span><br></pre></td></tr></table></figure><p>具体可以看看 <a href="https://fe.azhubaby.com/Node/Mongoose.html">Mongoose</a> 这篇文章，这里我们就看行为，以上代码表示建立了一个数据对象，供操作器来操作数据库</p><h3 id="在-Controller-中操作数据库"><a href="#在-Controller-中操作数据库" class="headerlink" title="在 Controller 中操作数据库"></a>在 Controller 中操作数据库</h3><p>然后就可以在 Controller 中进行数据的增删改查操作。首先我们打开 <code>constrollers/user.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = <span class="built_in">require</span>(<span class="string">&#x27;../models/User&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">create</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; username, password &#125; = ctx.<span class="property">request</span>.<span class="property">body</span>;</span><br><span class="line">    <span class="keyword">const</span> model = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">create</span>(&#123; username, password &#125;);</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = model;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">find</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> model = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">find</span>();</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = model;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">findById</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> model = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findById</span>(ctx.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = model;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">update</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> model = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findByIdAndUpdate</span>(ctx.<span class="property">params</span>.<span class="property">id</span>, ctx.<span class="property">request</span>.<span class="property">body</span>);</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = model;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">delete</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findByIdAndDelete</span>(ctx.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">204</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">UserController</span>;</span><br></pre></td></tr></table></figure><p>以上代码中，</p><ul><li>User.create({xxx})：在 User 表中创建一个数据</li><li>User.find()：查看所有的 User 表中的数据</li><li>User.findById(id)：查看 User 表中的其中一个</li><li>User.findByIdAndUpdate(id, body)：更新 User 表中的其中一个数据</li><li>User.findByIdAndDelete(id)：删除 User 表中的其中一个数据</li></ul><p>以上就是对数据库的<strong>增删改查</strong></p><h2 id="加盐"><a href="#加盐" class="headerlink" title="加盐"></a>加盐</h2><p>这个我们需要对密码进行一下加密，无它，安全。</p><p>进数据库一查，就能看到密码，这说明数据对开发人员是公开的，开发人员可以拿着用户的账号密码做任何事，这是不被允许的</p><p><img src="https://i.loli.net/2021/08/24/iJZhb8D297e4Tjl.png" alt="数据库中的用户表"></p><h3 id="下载-npm-包——bcrypt"><a href="#下载-npm-包——bcrypt" class="headerlink" title="下载 npm 包——bcrypt"></a>下载 npm 包——bcrypt</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i bcrypt --save</span><br></pre></td></tr></table></figure><p>我们前往 <code>models/User.js</code> 中，对其进行改造</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> schema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">username</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span> &#125;,</span><br><span class="line">  <span class="attr">password</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">select</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">val</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">&#x27;bcrypt&#x27;</span>).<span class="title function_">hashSync</span>(val, <span class="number">10</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>添加 select：false 不可见，set(val) 对值进行加密，我们来测试一下</p><p><img src="https://i.loli.net/2021/08/24/JoHQ5XICL2Bh1St.png" alt="创建李四"></p><p>能看到 password 被加密了，即使在数据库里，也看不出用户的密码，那用户输入的密码难道输入这么一串密码，显然不是，用户要是输入的话，我们要对其进行验证，例如我们的登录</p><p>我们进入 <code>constrollers/home</code> 文件中，对其进行改造，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HomeController</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; username, password &#125; = ctx.<span class="property">request</span>.<span class="property">body</span></span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findOne</span>(&#123; username &#125;).<span class="title function_">select</span>(<span class="string">&#x27;+password&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> isValid = <span class="built_in">require</span>(<span class="string">&#x27;bcrypt&#x27;</span>).<span class="title function_">compareSync</span>(password, user.<span class="property">password</span>)</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span></span><br><span class="line">    ctx.<span class="property">body</span> = isValid</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>User.findOne({ username }) 能查到到没有 password 的数据，因为我们人为的把 select 设为 false，如果要看，加上 select(‘+password’) 即可</li><li>require(‘bcrypt’).compareSync(password, user.password) 将用户输入的明文密码和数据库中的加密密码进行验证，为 true 是正确，false 为密码不正确</li></ul><p>回到 JWT</p><h2 id="在-Login-中签发-JWT-Token"><a href="#在-Login-中签发-JWT-Token" class="headerlink" title="在 Login 中签发 JWT Token"></a>在 Login 中签发 JWT Token</h2><p>我们需要提供一个 API 端口让用户可以获取到 JWT Token，最合适的当然是登录接口 <code>/login</code> ，打开 <code>controllers/home.js</code>，在 <code>login</code> 控制器中实现签发 JWT Token 的逻辑，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = <span class="built_in">require</span>(<span class="string">&#x27;../models/User&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="variable constant_">JWT_SECRET</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../config/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HomeController</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; username, password &#125; = ctx.<span class="property">request</span>.<span class="property">body</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.根据用户名找用户</span></span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findOne</span>(&#123; username &#125;).<span class="title function_">select</span>(<span class="string">&#x27;+password&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">      ctx.<span class="property">status</span> = <span class="number">422</span></span><br><span class="line">      ctx.<span class="property">body</span> = &#123; <span class="attr">message</span>: <span class="string">&#x27;用户名不存在&#x27;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.校验密码</span></span><br><span class="line">    <span class="keyword">const</span> isValid = <span class="built_in">require</span>(<span class="string">&#x27;bcrypt&#x27;</span>).<span class="title function_">compareSync</span>(password, user.<span class="property">password</span>)</span><br><span class="line">    <span class="keyword">if</span> (isValid) &#123;</span><br><span class="line">      <span class="keyword">const</span> token = jwt.<span class="title function_">sign</span>(&#123; <span class="attr">id</span>: user.<span class="property">_id</span> &#125;, <span class="variable constant_">JWT_SECRET</span>)</span><br><span class="line">      ctx.<span class="property">status</span> = <span class="number">200</span></span><br><span class="line">      ctx.<span class="property">body</span> = token</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ctx.<span class="property">status</span> = <span class="number">401</span></span><br><span class="line">      ctx.<span class="property">body</span> = &#123; <span class="attr">message</span>: <span class="string">&#x27;密码错误&#x27;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>login</code> 中，我们首先根据用户名（请求体中的 <code>name</code> 字段）查询对应的用户，如果该用户不存在，则直接返回 401；存在的话再通过 <code>(bcrypt&#39;).compareSync</code> 来验证请求体中的明文密码 <code>password</code> 是否和数据库中存储的加密密码是否一致，如果一致则通过 <code>jwt.sign</code> 签发 Token，如果不一致则还是返回 401。</p><h2 id="在-User-控制器中添加访问控制"><a href="#在-User-控制器中添加访问控制" class="headerlink" title="在 User 控制器中添加访问控制"></a>在 User 控制器中添加访问控制</h2><p>Token 的中间件和签发都搞定之后，最后一步就是在合适的地方校验用户的 Token，确认其是否有足够的权限。最典型的场景便是，在更新或删除用户时，我们要<strong>确保是用户本人在操作</strong>。打开 <code>controllers/user.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = <span class="built_in">require</span>(<span class="string">&#x27;../models/User&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">update</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> userId = ctx.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line">    <span class="keyword">if</span> (userId !== ctx.<span class="property">state</span>.<span class="property">user</span>.<span class="property">id</span>) &#123;</span><br><span class="line">      ctx.<span class="property">status</span> = <span class="number">403</span></span><br><span class="line">      ctx.<span class="property">body</span> = &#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;无权进行此操作&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> model = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findByIdAndUpdate</span>(ctx.<span class="property">params</span>.<span class="property">id</span>, ctx.<span class="property">request</span>.<span class="property">body</span>)</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span></span><br><span class="line">    ctx.<span class="property">body</span> = model</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">delete</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> userId = ctx.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (userId !== ctx.<span class="property">state</span>.<span class="property">user</span>.<span class="property">id</span>) &#123;</span><br><span class="line">      ctx.<span class="property">status</span> = <span class="number">403</span></span><br><span class="line">      ctx.<span class="property">body</span> = &#123; <span class="attr">message</span>: <span class="string">&#x27;无权进行此操作&#x27;</span> &#125;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findByIdAndDelete</span>(ctx.<span class="property">params</span>.<span class="property">id</span>)</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">204</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">UserController</span></span><br></pre></td></tr></table></figure><p>添加了一些用户并登录，将 Token 添加到请求头中，使用 DELETE 删除用户，能看到 状态码变成 204，删除成功</p><p><img src="https://i.loli.net/2021/08/24/TgPnXmwVZF8vYNQ.png" alt="删除用户操作"></p><h2 id="断言处理"><a href="#断言处理" class="headerlink" title="断言处理"></a>断言处理</h2><p>在做登录时、更新用户信息、删除用户时，我们需要 if else 来判断，这看起来很蠢，如果我们能用断言来处理，代码在看上去会优雅很多，这个时候 <code>http-assert</code> 就出来了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// constrollers/home.js</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">&#x27;http-assert&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HomeController</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; username, password &#125; = ctx.<span class="property">request</span>.<span class="property">body</span></span><br><span class="line">    <span class="comment">// 1.根据用户名找用户</span></span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findOne</span>(&#123; username &#125;).<span class="title function_">select</span>(<span class="string">&#x27;+password&#x27;</span>)</span><br><span class="line">    <span class="comment">// if (!user) &#123;</span></span><br><span class="line">    <span class="comment">//   ctx.status = 401</span></span><br><span class="line">    <span class="comment">//   ctx.body = &#123; message: &#x27;用户名不存在&#x27; &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="title function_">assert</span>(user, <span class="number">422</span>, <span class="string">&#x27;用户不存在&#x27;</span>)</span><br><span class="line">    <span class="comment">// 2.校验密码</span></span><br><span class="line">    <span class="keyword">const</span> isValid = <span class="built_in">require</span>(<span class="string">&#x27;bcrypt&#x27;</span>).<span class="title function_">compareSync</span>(password, user.<span class="property">password</span>)</span><br><span class="line">    <span class="title function_">assert</span>(isValid, <span class="number">422</span>, <span class="string">&#x27;密码错误&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> token = jwt.<span class="title function_">sign</span>(&#123; <span class="attr">id</span>: user.<span class="property">_id</span> &#125;, <span class="variable constant_">JWT_SECRET</span>)</span><br><span class="line">    ctx.<span class="property">body</span> = &#123; token &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理，处理 <code>controllers/user</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">update</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> userId = ctx.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line">    <span class="title function_">assert</span>(userId === ctx.<span class="property">state</span>.<span class="property">user</span>.<span class="property">id</span>, <span class="number">403</span>, <span class="string">&#x27;无权进行此操作&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> model = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findByIdAndUpdate</span>(ctx.<span class="property">params</span>.<span class="property">id</span>, ctx.<span class="property">request</span>.<span class="property">body</span>)</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span></span><br><span class="line">    ctx.<span class="property">body</span> = model</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">delete</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> userId = ctx.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line">    <span class="title function_">assert</span>(userId === ctx.<span class="property">state</span>.<span class="property">user</span>.<span class="property">id</span>, <span class="number">403</span>, <span class="string">&#x27;无权进行此操作&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findByIdAndDelete</span>(ctx.<span class="property">params</span>.<span class="property">id</span>)</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">204</span></span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>代码看起来就是整洁清爽</p><h2 id="参数校验"><a href="#参数校验" class="headerlink" title="参数校验"></a>参数校验</h2><p>之前我们加了一个中间件——<code>koa-parameter</code>，我们当初只是注册了这个中间件，但是未使用，我们在创建用户时需要判断用户名和密码的数据类型为 String 类型且必填，进入 <code>controllers/user.js</code> 添加代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">createUser</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    ctx.<span class="title function_">verifyParams</span>(&#123;</span><br><span class="line">      <span class="attr">username</span>: &#123; <span class="attr">type</span>: <span class="string">&#x27;string&#x27;</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      <span class="attr">password</span>: &#123; <span class="attr">type</span>: <span class="string">&#x27;string&#x27;</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> &#123; username, password &#125; = ctx.<span class="property">request</span>.<span class="property">body</span></span><br><span class="line">    <span class="keyword">const</span> model = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">create</span>(&#123; username, password &#125;)</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span></span><br><span class="line">    ctx.<span class="property">body</span> = model</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Github 地址：<a href="https://github.com/johanazhu/koa-basic">koa-basic</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://tuture.co/2020/05/22/fac8401/">一杯茶的时间，上手 Koa2 + MySQL 开发</a></p>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> Koa2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Koa2 </tag>
            
            <tag> 脚手架 </tag>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub Actions + Github Page</title>
      <link href="/2021/08/19/2021-08-19-GitHubActions+GitHubPage/"/>
      <url>/2021/08/19/2021-08-19-GitHubActions+GitHubPage/</url>
      
        <content type="html"><![CDATA[<p>主要用到了 Github Actions 中的别人写的好的动作</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  https://github.com/crazy-max/ghaction-github-pages</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">GitHub</span> <span class="string">Pages</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">JamesIves/github-pages-deploy-action@3.7.1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">          <span class="attr">ACCESS_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># 部署到 gh-pages 分支</span></span><br><span class="line">          <span class="attr">BRANCH:</span> <span class="string">gh-pages</span></span><br><span class="line">          <span class="comment"># 部署目录当前目录</span></span><br><span class="line">          <span class="attr">FOLDER:</span> <span class="string">.</span></span><br></pre></td></tr></table></figure><p>共两步，先配置 main.yml，再配置 ACCESS_TOKEN，就可以<br>先配置 ACCESS_TOKEN</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>如果我要做 css 效果、做一个 Demo 供别人看，最好是放在网站上，其中 GitHub Page 是最好的选择<br>做好 Github Actions，就能做到即写即看，而且能一直保留到 GitHub 关门为止</p><blockquote><p>注：其实还可以用 codepen 之类在线编码</p></blockquote><p>在 gh-pages 上加上 CNAME，会将 CNAME 中的 gh-pages 指向 CNAME 中的域名，当然前提是你需要在域名解析那里把你的域名指向 github.com</p><p>所以只能放在另一个自己的二级域名上， <a href="https://github.azhubaby.com/">https://github.azhubaby.com</a></p><p>随便一说，我这域名买了 10 年，2030 年才到期，所以很长一段时间内是有效的</p><h2 id="成功案例"><a href="#成功案例" class="headerlink" title="成功案例"></a>成功案例</h2><p>我的 demo 集合： <a href="https://demo.azhubaby.com/">https://demo.azhubaby.com</a></p><p>项目 Github 地址： <a href="https://github.com/johanazhu/github-actions-github-pages">github-actions-github-pages</a></p>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub Actions 部署前端项目</title>
      <link href="/2021/08/19/2021-08-19-GitHubActions-%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
      <url>/2021/08/19/2021-08-19-GitHubActions-%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>我要部署一个项目，我大喊！！</p><p>怎么做？</p><p>先把代码 <code>npm run build</code>，把生成的 <code>dist</code> 拿来，登录服务器，到指定目录页面，打开 ftp，手动上传 dist 中的文件</p><p>其中你要开启你的 nginx 服务</p><p>你每一次想部署项目，就要先在本地打包，然后登录服务器，再打开 ftp 服务，再手动上传，这一来一回太麻烦，而且这种情况不利于多人开发，依赖的环境也许受操作系统的影响等等</p><p>总之，这不便于开发者以及不科学</p><p>我们需要持续集成</p><p>在公司中我们可以搭建 GitLab 亦或是 用 Jenkins，但是对个人，独立开发者或者只有五人以下的小公司来说，有什么可以帮我们实现自动化工作流的呢？</p><p>Github 推出了 Github Actions</p><h2 id="GitHub-Actions-是什么"><a href="#GitHub-Actions-是什么" class="headerlink" title="GitHub Actions 是什么"></a>GitHub Actions 是什么</h2><p><a href="https://github.com/features/actions">GitHub Actions</a> 是 GitHub 的<a href="https://www.ruanyifeng.com/blog/2015/09/continuous-integration.html">持续集成服务</a>，于 2018 年 10 月<a href="https://github.blog/changelog/2018-10-16-github-actions-limited-beta/">推出</a>。</p><p>持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。GitHub 把这些操作就称为 actions</p><p>GitHub 做了一个<a href="https://github.com/marketplace?type=actions">官方市场</a>，可以搜索到他人提交的 actions。另外，还有一个 <a href="https://github.com/sdras/awesome-actions">awesome actions</a> 的仓库，也可以找到不少 action。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>GitHub Actions 有一些自己的术语。</p><p>（1）<strong>workflow</strong> （工作流程）：持续集成一次运行的过程，就是一个 workflow。</p><p>（2）<strong>job</strong> （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。</p><p>（3）<strong>step</strong>（步骤）：每个 job 由多个 step 构成，一步步完成。</p><p>（4）<strong>action</strong> （动作）：每个 step 可以依次执行一个或多个命令（action）。</p><p>具体可以前往 阮一峰的这篇 <a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">GitHub Actions 入门教程</a> 了解一二</p><h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><p>我们的目的，通过 Github Action 把一个单页面应用部署到 云服务器上</p><p>具体可参考 <a href="https://zhuanlan.zhihu.com/p/107545396">使用 Github Action 部署项目到云服务器</a> 中的操作，我讲讲在使用这位大哥写的 <code>SFTP-Deploy-Action@v1.0</code> action 时遇到的坑</p><h2 id="常见问题："><a href="#常见问题：" class="headerlink" title="常见问题："></a>常见问题：</h2><p>首先遇到 <code>Load key &quot;../private_key.pem&quot;: invalid format</code> 的错误。</p><p>解决方案 <code>ssh-keygen -m PEM</code> 生成 新 key</p><p>我遇到类似的问题，以为要更新我的私钥，后来发现不是，是因为我的私钥是 openssh，改成 rsa 就没报这个错误了</p><h3 id="错误二：Permission-denied-publickey-gssapi-keyex-gssapi-with-mic-password"><a href="#错误二：Permission-denied-publickey-gssapi-keyex-gssapi-with-mic-password" class="headerlink" title="错误二：Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password)."></a>错误二：<code>Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).</code></h3><p>免登录问题</p><p>具体步骤较多，简单来说，就是 <code>.ssh</code> 文件下新建一个 authorized_keys 文件，将公钥放到其中</p><p>并去 <code>/etc/ssh/sshd_config</code> 中修改一些配置，实现免登录</p><p>这里不细讲，具体可以 Google 查一下</p><h3 id="错误三："><a href="#错误三：" class="headerlink" title="错误三："></a>错误三：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Warning: Permanently added <span class="string">&#x27;_\*\*&#x27;</span> (ECDSA) to the list of known hosts.</span><br><span class="line">sftp&gt; put -r ./build/_ /home/johan/www/react-app</span><br><span class="line">Multiple paths match, but destination <span class="string">&quot;/home/johan/www/react-app&quot;</span> is not a directory</span><br></pre></td></tr></table></figure><p>文件路径不对</p><h3 id="错误四："><a href="#错误四：" class="headerlink" title="错误四："></a>错误四：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Couldn<span class="string">&#x27;t canonicalize: No such file or directory</span></span><br><span class="line"><span class="string">Unable to canonicalize path &quot;/home/johan/www/react-app/static&quot;</span></span><br></pre></td></tr></table></figure><p>找不到 static 文件，新生成的 static 文件不能放入项目中，那就新建一个</p><p>去项目目录下 <code>mkdir static</code></p><p>再编译，成功</p><p><img src="https://i.loli.net/2021/08/24/ShPCcvQqxViWrpu.png" alt="编译成功"></p><p>附上 Github 地址：<a href="https://github.com/johanazhu/React-Deploy">React-Deploy</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p><a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">GitHub Actions 入门教程</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/107545396">使用 Github Action 部署项目到云服务器</a></p></li><li><p><a href="https://segmentfault.com/a/1190000039818913">手把手教你用 Github Actions 部署前端项目</a></p></li><li><p><a href="https://frostming.com/2020/04-26/github-actions-deploy/">使用 GitHub Actions 实现博客自动化部署</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux安装node</title>
      <link href="/2021/08/18/2021-08-18-linux%E5%AE%89%E8%A3%85node/"/>
      <url>/2021/08/18/2021-08-18-linux%E5%AE%89%E8%A3%85node/</url>
      
        <content type="html"><![CDATA[<p>在 Linux 上安装 node ，方便以后部署 node 服务</p><h2 id="一、下载并解压-node"><a href="#一、下载并解压-node" class="headerlink" title="一、下载并解压 node"></a>一、下载并解压 node</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd /usr/local/src</span></span><br><span class="line"><span class="comment"># wget https://nodejs.org/dist/v14.16.1/node-v14.16.1-linux-x64.tar.xz</span></span><br><span class="line"><span class="comment"># tar node-v14.16.1-linux-x64.tar.xz</span></span><br><span class="line"><span class="comment"># cd node-v14.16.1-linux-x64/</span></span><br><span class="line"><span class="comment"># ./bin/node -v</span></span><br><span class="line">v14.16.1</span><br></pre></td></tr></table></figure><p>下载地址：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p><h2 id="二、对-node-、npm-设置软连接"><a href="#二、对-node-、npm-设置软连接" class="headerlink" title="二、对 node 、npm 设置软连接"></a>二、对 node 、npm 设置软连接</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ln -s /usr/local/src/node-v14.16.1-linux-x64/bin/node /usr/bin/node</span></span><br><span class="line"><span class="comment"># node -v</span></span><br><span class="line">v14.16.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># ln -s /usr/local/src/node-v14.16.1-linux-x64/bin/npm /usr/bin/npm</span></span><br><span class="line"><span class="comment"># npm -v</span></span><br><span class="line">6.14.12</span><br></pre></td></tr></table></figure><h2 id="三、下载-cnpm、pm2-并设置软连接"><a href="#三、下载-cnpm、pm2-并设置软连接" class="headerlink" title="三、下载 cnpm、pm2 并设置软连接"></a>三、下载 cnpm、pm2 并设置软连接</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm install -g cnpm --registry=https://registry.npm.taobao.org</span></span><br><span class="line"><span class="comment"># npm install -g pm2 --registry=https://registry.npm.taobao.org</span></span><br><span class="line"><span class="comment"># ln -s /usr/local/src/node-v14.16.1-linux-x64/bin/cnpm /usr/bin/cnpm</span></span><br><span class="line"><span class="comment"># ln -s /usr/local/src/node-v14.16.1-linux-x64/bin/pm2 /usr/bin/pm2</span></span><br></pre></td></tr></table></figure><p>注意：如果你的软连接设置错了，即报”ln: failed to create symbolic link ‘/usr/local/bin/npm’: File exists“</p><p>可以使用 <strong>ln -sf</strong> 来重新设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ln -sf /usr/local/src/node-v14.16.1-linux-x64/bin/npm /usr/bin/npm</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里、得物、涂鸦、途虎面试心得（二）</title>
      <link href="/2021/08/17/2021-08-17-%E9%98%BF%E9%87%8C%E3%80%81%E5%BE%97%E7%89%A9%E3%80%81%E6%B6%82%E9%B8%A6%E3%80%81%E9%80%94%E8%99%8E%E9%9D%A2%E8%AF%95%E5%BF%83%E5%BE%97%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2021/08/17/2021-08-17-%E9%98%BF%E9%87%8C%E3%80%81%E5%BE%97%E7%89%A9%E3%80%81%E6%B6%82%E9%B8%A6%E3%80%81%E9%80%94%E8%99%8E%E9%9D%A2%E8%AF%95%E5%BF%83%E5%BE%97%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>之前在 <a href="/2021/08/17/2021-08-17-%E9%98%BF%E9%87%8C%E3%80%81%E5%BE%97%E7%89%A9%E3%80%81%E6%B6%82%E9%B8%A6%E3%80%81%E9%80%94%E8%99%8E%E9%9D%A2%E8%AF%95%E5%BF%83%E5%BE%97/" title="阿里、得物、涂鸦、途虎面试心得">阿里、得物、涂鸦、途虎面试心得</a> 里说了面试的考点，这篇主要是讲面试官，个人认为一个好的面试官应该是按照简历展开面试，针对简历上的技能点来展开，这样能从面试者最熟悉的点切入，由浅入深全方位的考量一个面试者</p><h2 id="得物一面男"><a href="#得物一面男" class="headerlink" title="得物一面男"></a>得物一面男</h2><p>看打扮就明白不是组长级别的，后得知是同事面，问了比较详细，从简历上的种种到部署，可以看出是个面试生手，因为一个熟手不会像他这样一直问一些技术点，生怕我不会一样</p><h2 id="得物二面男"><a href="#得物二面男" class="headerlink" title="得物二面男"></a>得物二面男</h2><p>是个 30 多岁的说话比较快、发音不标准的男人。和他对话后，我不太喜欢在他底下做事。他会问一些开放型的题目，比如他们要用微前端（我只知道这个技术，但没用过），问我为什么要用微前端，我针对微前端展开，说了几点。他不满意，说微前端最好的好处是方便运营人员，避免他们在两个系统里跳来跳去。惊了，原来是让我跳出程序员的思维，早说，后面就引着这个思路乱说，到现在一个问题印象也没有，因为大多数在临时起意胡说的</p><h2 id="涂鸦电话面（女）"><a href="#涂鸦电话面（女）" class="headerlink" title="涂鸦电话面（女）"></a>涂鸦电话面（女）</h2><p>我当时有点傻，去了涂鸦上海本地，明明是电话面试，竟然没注意到，去了之后没前台，联系 HR，说是约电话面，ok，我蠢。到楼下看有没有充电宝，电不到 20%，找不到出门找全家，没想到电话来了，让我自我介绍，左右为难下回到大楼坐在沙发上打电话</p><p>与她交流，能看出她的实力，她是个很会抓知识点的面试官</p><p>开始讲针对项目中登录的问题，简单交流，后续只见她问</p><p>她问：“你们怎么做到锁单，就像用户进去下单页后，点击下单后锁单，你们怎么做？”</p><p>我说：后端会把这个用户 id 和商品 id 关联锁住，（我知道她想考前端要做什么事情）前端方面会在请求点击后就把按钮置灰并让他不能点击，而且还可以通过防抖、节流优化</p><p>她问：“那这个场景是用防抖还是节流？”</p><p>我想了想说：“节流”</p><p>她说：“那你能手写一个节流吗？“</p><p>我无语了，我 TM 都在准备手写节流，让我口喷，怎么喷，吞吞吐吐下说的很差，但说到几个关键字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait, flag</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">if</span> (timer &amp;&amp; flag) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        func.<span class="title function_">apply</span>(args)</span><br><span class="line">      &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      func.<span class="title function_">apply</span>(args)</span><br><span class="line">    &#125;, wait)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>PS：差不多就是上面的回答，<strong>错的，错的，错的</strong></p></blockquote><p>她说：ok，你回答里说到三个点，你能说说三个点是什么吗？</p><p>我说：展开运算符，他的用法是能让数组的值展开</p><p>她问：除了数字，还能展开哪些数据类型</p><p>我开始不知道了，没想到 ES6 还有这么多讲究，我胡扯到 String 类型，Object 类型</p><p>她说：String ？你确定吗？</p><p>我怂了，这个知识点我不知道</p><p>她问你刚才说的 setTimeout 中用箭头函数，你能说说箭头函数与普通函数的区别吗？</p><p>这个题在得物二面的时候就问到了，我回答</p><h2 id="阿里面试官"><a href="#阿里面试官" class="headerlink" title="阿里面试官"></a>阿里面试官</h2><p>与他聊天更像是在与监考老师打交道</p><p>阿里：我先问你几个 CSS 方面的问题</p><p>我：好…</p><p>阿里：我再问你几个 React 方面的问题</p><p>我：巴拉巴拉</p><p>阿里：最后问你一个 JS 方面的问题</p><p>我：</p><h2 id="途虎面试官"><a href="#途虎面试官" class="headerlink" title="途虎面试官"></a>途虎面试官</h2><p>react 方面</p><p>this.setState</p><p>异步还是同步？</p><p>出题 class C</p><p>其中有 promise</p><p>链式调用</p><p>出题 链式调用</p><p>简单化的 链式调用</p><p>了解 Fiber 吗</p><p>说完 fiber 后，是多了调度器</p><p>调度的顺序是如何？</p><p>谁的优先级在前，谁的优先级在后</p><p>最后一个问题</p><p>性能优化怎么做</p><p>我说从工程方面讲，webpack 的打包</p><p>从 React 方面讲，有 React.memo 、React.useCallback 等代码优化的点</p><p>从 网络方面考虑，做 缓存 机制</p><p>这里说了下强缓存、协商缓存</p><p>又问我图片懒加载怎么做</p><p>不知道？</p><p>引导</p><p>通过图片本身距离顶部的距离，通过监听 scroll …</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里、得物、涂鸦、途虎面试心得</title>
      <link href="/2021/08/17/2021-08-17-%E9%98%BF%E9%87%8C%E3%80%81%E5%BE%97%E7%89%A9%E3%80%81%E6%B6%82%E9%B8%A6%E3%80%81%E9%80%94%E8%99%8E%E9%9D%A2%E8%AF%95%E5%BF%83%E5%BE%97/"/>
      <url>/2021/08/17/2021-08-17-%E9%98%BF%E9%87%8C%E3%80%81%E5%BE%97%E7%89%A9%E3%80%81%E6%B6%82%E9%B8%A6%E3%80%81%E9%80%94%E8%99%8E%E9%9D%A2%E8%AF%95%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<p>五月份搬到安静、相对较大的房间后，决定每天早起来复习，在这之前我是通过下班后待公司里学习和晚上在家复习的方式学习，这种方式不合理，因为经过一天的工作自身精力已经消耗的七七八八了，再去学习，效率已经不高了</p><p>经过三个月的努力，于 8 月 8 日奥运结束后，我投了简历，这次共投了 6 家公司，分别为阿里、得物、涂鸦、途虎、拼多多、TapTap。其中 TapTap 是想去的，其他五家各有千秋，属于可以拿到 offer 等待公司</p><p>其中阿里、得物、涂鸦、途虎四家给了面试机会。周五下午得物面试，面完后电话面试涂鸦，周六阿里电话面试，周一晚上途虎视频面试，结果是都被刷下去了。问过得物的两个面试官”觉得自己今天的表现如何“，一面面试官（同事面）说觉得一般，简历写的不好，应该把自己项目中有用到的技术都写进技能点里，而不是让面试官去找；二面（组长面）说优点是涉猎面广，但是对原理不够深入</p><p>虽然没有被面上，但或许是一个好事，因为这次面试透露出我的一些短板。例如对知识的表达，说到底还是对这块知识不了解</p><h2 id="面试考点"><a href="#面试考点" class="headerlink" title="面试考点"></a>面试考点</h2><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><ul><li><p><input disabled="" type="checkbox">  防抖与节流</p><p>口喷不出来，之前做过准备，手写可以，但是没喷出来，还是对原理什么的理解的不够深刻</p></li><li><p><input disabled="" type="checkbox">  捕获错误怎么做？</p><p>知道 try catch，但是没说来，面试官引导到后面才明白要我说这个</p></li><li><p><input disabled="" type="checkbox">  图片懒加载</p><p>没做准备，PASS</p></li><li><p><input disabled="" type="checkbox">  类数组与数组的区别</p><p>说不出个所以来</p></li><li><p><input checked="" disabled="" type="checkbox">  如何释放闭包</p><p>把引用的闭包设为 null</p></li><li><p><input checked="" disabled="" type="checkbox">  事件循环</p><p>这题高频</p></li><li><p><input checked="" disabled="" type="checkbox">  HTTP 缓存</p><p>就途虎的面试官问了，之前做过这方面的准备</p></li></ul><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ul><li><p><input disabled="" type="checkbox">  BFC 是什么？</p><p>阿里面试官问的，老掉牙的问题，但是他一直让我说，我说了几个点还不够，要说全，触发 BFC 的元素有哪些，我当时说了四五个，他说还有呢？淦</p></li><li><p><input disabled="" type="checkbox">  flex: 1 表示什么</p><p>MD，flex-grow 读错了，英语口语还是重要</p></li><li><p><input disabled="" type="checkbox">  左边宽度已知、右边自适应方案</p><p>阿里面试官问的，说了四种，问还有吗</p></li></ul><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><ul><li><p><input disabled="" type="checkbox">  函数式组件与 class 组件的区别</p><p>这竟然是最常见的问题，说了好几个点，没抓到重要，重点是 函数式组件能捕获每次渲染时的值，这个俗称 Capture Value。React 的主要开发者 Dan 写过一篇文章<a href="https://overreacted.io/zh-hans/how-are-function-components-different-from-classes/">函数式组件与类组件有何不同？</a></p><p>周五面试得物、涂鸦，都问到了这个问题</p></li><li><p><input disabled="" type="checkbox">  为什么不能在循环中调用 hooks？react 中为什么不能在 for 循环、if 语句里使用 hooks，说下 react hooks 实现原理。</p></li><li><p><input disabled="" type="checkbox">  虚拟列表，1000 条数据 插入不卡的那种</p></li><li><p><input disabled="" type="checkbox">  Fiber 是什么？</p><ul><li><input disabled="" type="checkbox"> 多了调度器，有优先级，优先级的顺序是怎么个排序？</li></ul></li></ul><ul><li><p><input disabled="" type="checkbox">  React.memo、React.useCallback、React.usememo 的作用</p></li><li><p><input disabled="" type="checkbox">  this.setState 是异步还是同步？为什么？</p><ul><li><input disabled="" type="checkbox"> 什么事件可以触发异步，什么会触发同步</li></ul></li></ul><ul><li><input disabled="" type="checkbox"> 如下的代码，它的 a 的值是多少？又 render 了几次</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class C extends Component &#123;</span><br><span class="line">   this.state = &#123;</span><br><span class="line">       a: 0;</span><br><span class="line">   &#125;</span><br><span class="line">   componentDidMount() &#123;</span><br><span class="line">       this.setState(&#123; a: 1 &#125;)</span><br><span class="line">       setTimeout(() =&gt; &#123;</span><br><span class="line">           this.setState(&#123;a: 2&#125;)</span><br><span class="line">       &#125;, 0)</span><br><span class="line">       new Promise((resolve) =&gt; &#123;</span><br><span class="line">           resolve(this.setState(&#123; a: 3&#125;))</span><br><span class="line">       &#125;).then(() =&gt; &#123; this.setState(&#123;a:4&#125;) &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> useState 中的值是个对象，改变对象中的值，demo 会渲染吗？如果用 React.memo() 包裹住呢</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function demo() &#123;</span><br><span class="line">    const [data, setData] = useState(&#123; foo: &#123; bar: &#123; baz: 1&#125;&#125;&#125;)</span><br><span class="line">    return (</span><br><span class="line">    &lt;div onClick=&#123;() =&gt; setData(1)&#125;&gt;改变&lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><input checked="" disabled="" type="checkbox">  react 从本页面跳转至其他站点页是否会执行 unmount？为什么</p><p>A：不会，但不知道为什么</p></li><li><p><input disabled="" type="checkbox">  react 中的 错误捕获</p></li><li><p><input disabled="" type="checkbox">  React.Router 的模式</p><p>手写一个</p><p>三种模式</p></li><li><p><input disabled="" type="checkbox">  Dva 中与 namespce 同层的参数有哪些</p></li></ul><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><ul><li><p><input disabled="" type="checkbox">  Promise 链式调用</p><ul><li>链式调用怎么写</li></ul></li><li><p><input disabled="" type="checkbox">  展开运算符的特性</p><ul><li>能展开 string、array、object</li></ul></li><li><p><input checked="" disabled="" type="checkbox">  commonJS 与 ES 模块的区别</p></li><li><p><input disabled="" type="checkbox">  webpack 打包后，commonJS 中的引用会被引用吗？ES6 模块的呢？为什么</p></li></ul><h2 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h2><ul><li><p><input disabled="" type="checkbox">  适配方案</p></li><li><p><input checked="" disabled="" type="checkbox">  JsBridge</p></li><li><p><input disabled="" type="checkbox">  移动端 ios 输入时 input 被挡住， 安卓键盘回落后留白问题</p></li><li><p><input disabled="" type="checkbox">  弹出款滚动问题（没人问，但是我想写一篇）</p></li></ul><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ul><li><input disabled="" type="checkbox"> 主题色</li></ul><h2 id="TS"><a href="#TS" class="headerlink" title="TS"></a>TS</h2><ul><li><input disabled="" type="checkbox"> any 用的多吗？什么时候会用 any？什么时候不用</li></ul><h2 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h2><ul><li><p><input disabled="" type="checkbox">  webpack 打包后，commonJS 中的引用会被引用吗？ES6 模块的呢？为什么</p></li><li><p><input disabled="" type="checkbox">  split code 代码分割的原理是什么</p></li></ul><h2 id="CI-CD"><a href="#CI-CD" class="headerlink" title="CI/CD"></a>CI/CD</h2><ul><li><p><input checked="" disabled="" type="checkbox">  你是如何打包项目的</p><p>A：我的情况是，项目在本地打包，然后把 dist 文件提交到 git 上，再登录服务器，手动 git pull</p><p>我当然知道确定这种方式不科学，公司不提供服务器，没资源，组长也不愿意做变化</p><p>我上家公司是把代码放在 gitlab 上，也方便各位 review 代码</p></li></ul><p>目前看，我后续会把个人开发者如何利用 GitHub 来做 CI/CD，可以看看这篇 <a href="/2021/08/19/2021-08-19-GitHubActions-%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE/" title="GitHub Actions 部署前端项目">GitHub Actions 部署前端项目</a> 以及 这篇 <a href="/2021/08/19/2021-08-19-GitHubActions+GitHubPage/" title="GitHub Actions + Github Page">GitHub Actions + Github Page</a></p><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><ul><li><p><input checked="" disabled="" type="checkbox">  dockerfile 中的参数有哪些</p><p>FROM、RUN、BUILD…</p></li></ul><hr><h2 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h2><p>很神奇，五个面试官都没有问原型、闭包、作用域、执行上下文之类的问题，也许是因为现在是高级前端开发面，所以不问这些基础的？</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>女朋友看到我努力了三个月，每天早上 6 点起来学习，周末也会抽出时间来看一些技术方面的知识，但还是没有面上。</p><p>她对我说：<strong>你的经历让我看到不是所有的努力都会有回报，所以让我觉得努力没用</strong>。</p><p>我不懂这有什么好伤感的。面试，面不上，很正常，毕竟不是小公司，对人的要求本身就很高，我已经在这次经历中知道自己的不足，这很重要，美团还没面，这也很重要，我也有时间可以复习，再进步，这就足够了…</p><p>不是努力有没有用的问题，是成长。能进大厂是结果，学到知识是过程。而且去了大厂我还是会每天早起学习，这是拉开人与人之间距离最好的方式，别人在休息的时候你再学习，你学习时间比别人多，勤能补拙。不要觉得”勤能补拙“这个词有多么不好，我觉得很好。做到勤就比很多人优秀了</p><p>但我也不是什么奋斗逼，口号喊得很响亮，但是身体却没力行，面试-不足-克服，就像打游戏一样，打不过 BOOS，先去打大头兵，涨经验，就这么简单</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一道关于解构赋值和参数默认值的编程题</title>
      <link href="/2021/05/18/2021-05-18-%E4%B8%80%E9%81%93%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC%E5%92%8C%E5%8F%82%E6%95%B0%E9%BB%98%E8%AE%A4%E5%80%BC%E7%9A%84%E7%BC%96%E7%A8%8B%E9%A2%98/"/>
      <url>/2021/05/18/2021-05-18-%E4%B8%80%E9%81%93%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC%E5%92%8C%E5%8F%82%E6%95%B0%E9%BB%98%E8%AE%A4%E5%80%BC%E7%9A%84%E7%BC%96%E7%A8%8B%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在<a href="126274877">前端俱乐部QQ群</a>中，有朋友发出这样的题目，说最近面试中遇到了，如下所示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"> ? </span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;a,b&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fun</span>( )) <span class="comment">// &#123;a:1,b:2&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fun</span>(&#123;<span class="attr">a</span>:<span class="number">3</span>&#125;)) <span class="comment">// &#123;a:3,b:456&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fun</span>(&#123;&#125;)) <span class="comment">// &#123;a:123,b:456&#125;</span></span><br></pre></td></tr></table></figure><p>问，fun 的参数应该填什么？</p><p>提示：利用结构赋值和参数默认值</p><p>经过我一番测试，其结果如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">&#123; a = <span class="number">123</span>, b = <span class="number">456</span> &#125; = &#123; a: <span class="number">1</span>, b: <span class="number">2</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; a, b &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>先看第一个执行： <code>console.log(fun( )) // &#123;a:1,b:2&#125;</code></p><p><code>fun()</code> 不传参数，直接执行，结果 a 为 1，b 为 2。说明默认值为 a : 1，b : 2。</p><p>可以得出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">a = <span class="number">1</span>, b = <span class="number">2</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; a, b &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看第二个执行：<code>console.log(fun(&#123;a:3&#125;)) // &#123;a:3,b:456&#125;</code></p><p><code>fun(&#123;a: 3&#125;)</code> ，参数传入一个对象，对象中 a 为 3，其结果 a 为 3，b 为 456。说明其参数默认值为一个对象，对象中的值又有默认参数 a 与 b。</p><p>结合“执行 1”，如果不传参数，默认用 <code>a = 1, b = 2</code> 的选项；如果传入参数；则用对象中的默认参数。即</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">&#123; a = XX, b = <span class="number">456</span> &#125; = &#123; a: <span class="number">1</span>, b: <span class="number">2</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; a, b &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后看第三个执行：<code>console.log(fun(&#123;&#125;)) // &#123;a:123,b:456&#125;</code></p><p>很明显，我们还不知道对象中的默认 a 代表什么。第三个执行告诉我们它为 123</p><p>所以最后我们的答案是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">&#123; a = <span class="number">123</span>, b = <span class="number">456</span> &#125; = &#123; a: <span class="number">1</span>, b: <span class="number">2</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; a, b &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h2><p>在做这道题的时候，我被赋值的 <code>=</code> 和 <code>:</code> 迷惑了。这里做笔记记录</p><ul><li><p><code>:</code> 针对对象赋值</p></li><li><p><code>=</code> 为默认值</p></li></ul><p>如图所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">d</span>: <span class="number">4</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> &#123; a, b &#125; = obj <span class="comment">// 解构赋值 a,b, a为1，b为2</span></span><br><span class="line"><span class="keyword">const</span> &#123; a = <span class="number">11</span>, b = <span class="number">21</span>, e = <span class="number">51</span> &#125; = obj <span class="comment">// 给解构赋值的 设置默认值，a为1，b为2，e为51，得默认值是当你对象中没有值时，赋予该变量的默认值</span></span><br></pre></td></tr></table></figure><p><code>=</code> 赋予变量默认值</p><p>那么 <code>:</code> 何处使用，<strong>当解构赋值中的值为一个对象的时，设置对象中的值就用<code>：</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: &#123;</span><br><span class="line">    <span class="attr">aa</span>: <span class="number">11</span>,</span><br><span class="line">    <span class="attr">bb</span>: <span class="number">22</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">d</span>: <span class="number">4</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> &#123; a, b &#125; = obj <span class="comment">// a=&#123;aa: 11, bb: 22&#125; b=2</span></span><br><span class="line"><span class="keyword">const</span> &#123; a = &#123; <span class="attr">aa</span>: <span class="number">111</span>, <span class="attr">bb</span>: <span class="number">222</span> &#125;, b = <span class="number">22</span>, e = &#123; <span class="attr">aa</span>: <span class="number">111</span>, <span class="attr">bb</span>: <span class="number">222</span> &#125; &#125; = obj</span><br><span class="line"><span class="comment">// a=&#123;aa: 11, bb: 22&#125;,b = 22, e=&#123;aa: 111, bb: 222&#125;</span></span><br></pre></td></tr></table></figure><p>这里我们要注意：当解构的值在对象中，即使设置默认值，还是会以值为准；如果解构的值不在对象中，则会以默认值的形式出现在结果值中。</p><h2 id="回头看题"><a href="#回头看题" class="headerlink" title="回头看题"></a>回头看题</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"> ? </span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;a,b&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fun</span>( )) <span class="comment">// &#123;a:1,b:2&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fun</span>(&#123;<span class="attr">a</span>:<span class="number">3</span>&#125;)) <span class="comment">// &#123;a:3,b:456&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fun</span>(&#123;&#125;)) <span class="comment">// &#123;a:123,b:456&#125;</span></span><br></pre></td></tr></table></figure><p>为什么 a = 123, b = 456 要用等于号<code>=</code>，而不是用冒号<code>:</code>呢，因为它原本是”键“，只能赋予默认值而不能将键重命名</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>解构赋值时，冒号<code>:</code> 是重命名，等于号<code>=</code> 是赋值默认值</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端疑难杂症(持续更新)</title>
      <link href="/2021/04/19/2021-04-19-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98%E5%90%88%E9%9B%86/"/>
      <url>/2021/04/19/2021-04-19-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本来记录在印象笔记中，但放着老是不看，为加深印象以及搜索方便，立一文统一记录移动端的兼容性问题</p><h2 id="前人总结"><a href="#前人总结" class="headerlink" title="前人总结"></a>前人总结</h2><p><a href="https://github.com/RubyLouvre/mobileHack">司徒正美-mobileHack</a></p><p><a href="https://segmentfault.com/a/1190000022115177">总结几个移动端 H5 软键盘的大坑</a></p><h2 id="input-中输入不要有空格"><a href="#input-中输入不要有空格" class="headerlink" title="input 中输入不要有空格"></a>input 中输入不要有空格</h2><p><code>onChange(replace(/\s+/g, &#39;&#39;)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input onChange=&#123; onChange(e.target.value.replace(/\s+/g, &#x27;&#x27;))  &#125; /&gt;</span><br></pre></td></tr></table></figure><h2 id="input-去除-ios-端输入法首字母大写状态"><a href="#input-去除-ios-端输入法首字母大写状态" class="headerlink" title="input 去除 ios 端输入法首字母大写状态"></a>input 去除 ios 端输入法首字母大写状态</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">autocapitalize</span>=<span class="string">&quot;off&quot;</span> <span class="attr">autocorrect</span>=<span class="string">&quot;off&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="css-一行省略"><a href="#css-一行省略" class="headerlink" title="css 一行省略"></a>css 一行省略</h2><h3 id="普通版本"><a href="#普通版本" class="headerlink" title="普通版本"></a>普通版本</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br></pre></td></tr></table></figure><h3 id="有赞版本"><a href="#有赞版本" class="headerlink" title="有赞版本"></a>有赞版本</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">-webkit-line-clamp: <span class="number">1</span>;</span><br><span class="line">-webkit-box-orient: vertical;</span><br></pre></td></tr></table></figure><h2 id="CSS-多行省略"><a href="#CSS-多行省略" class="headerlink" title="CSS 多行省略"></a>CSS 多行省略</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-webkit-line-clamp: <span class="number">3</span>; // 文本行数</span><br><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line">-webkit-box-orient: vertical;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="attribute">word-break</span>: break-all;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br></pre></td></tr></table></figure><h2 id="ios-使用-border-radius-时失效"><a href="#ios-使用-border-radius-时失效" class="headerlink" title="ios 使用 border-radius 时失效"></a>ios 使用 border-radius 时失效</h2><p>原因：ios 端，该元素使用 transform 属性会导致 border-radius 失效</p><p>解决方法：在使用动画效果（使用 transform）元素的上一级的 css 上加上以下属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br></pre></td></tr></table></figure><h2 id="开发H5营销页面遇到的问题"><a href="#开发H5营销页面遇到的问题" class="headerlink" title="开发H5营销页面遇到的问题"></a>开发H5营销页面遇到的问题</h2><p>ios端不能自动播放音乐、视频（但之前看过一个网易云音乐的 H5 能自动播放音乐）</p><p>微信里打开的H5不支持点击下载，需要长按保存</p><h2 id="ios-端高度超过一屏，input-输入完后不回弹"><a href="#ios-端高度超过一屏，input-输入完后不回弹" class="headerlink" title="ios 端高度超过一屏，input 输入完后不回弹"></a>ios 端高度超过一屏，input 输入完后不回弹</h2><p>这个问题老生常谈，但目前我的 iPhone X 手机 ios 15系统未遇到这种情况，而 iPhone 7 手机遇到了这个问题。猜测是老的手机用的 webview 的 bug，解决方法是在监听 input 的 onblur 事件，在失去焦点的时候，拿到它滑动后的高度，使用 window.scrollTo 回到原来的 scrollHeight</p><p>如代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">    type=<span class="string">&quot;text&quot;</span></span><br><span class="line">    onBlur=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (util.<span class="property">system</span>.<span class="property">ios</span>) &#123;</span><br><span class="line">               <span class="keyword">const</span> scrollHeight = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> || <span class="number">0</span></span><br><span class="line">               <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="title class_">Math</span>.<span class="title function_">max</span>(scrollHeight - <span class="number">1</span>, <span class="number">0</span>))</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;, <span class="number">100</span>);</span><br><span class="line">   &#125;&#125; /&gt;</span><br></pre></td></tr></table></figure><blockquote><p>看网上答疑：在 IOS12 ，微信版本 v6.7.4 及以上，输入框获取焦点，键盘弹起，页面（webview）整体往上滚动，当键盘收起后，不会到原位，导致键盘原来所在位置是空白的</p></blockquote><h2 id="安卓手机键盘弹出，希望表单跟着向上移动"><a href="#安卓手机键盘弹出，希望表单跟着向上移动" class="headerlink" title="安卓手机键盘弹出，希望表单跟着向上移动"></a>安卓手机键盘弹出，希望表单跟着向上移动</h2><p>ios 手机会跟着选中目标后滚动到中间位置，但是安卓系统不会，但你点击下方的表单时，表单不会向上滚动，键盘弹出后会遮住目标表单</p><p>安卓中的可视高度=我们看到的页面高度+软键盘的高度，而 IOS 的可视高度与软键盘无关</p><p>在 componentDidMount 或者   useEffect 中监听 resize，以 函数式组件为例</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> originHeight = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientHeight</span>;</span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, resizeWindow)</span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;resize&quot;</span>, resizeWindow)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, [])</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resizeWindow</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (util.<span class="property">system</span>.<span class="property">android</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> resizeHeight = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientHeight</span>;</span><br><span class="line">            <span class="keyword">const</span> activeElement = <span class="variable language_">document</span>.<span class="property">activeElement</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (resizeHeight &lt; originHeight) &#123;</span><br><span class="line">                <span class="keyword">if</span> (activeElement &amp;&amp; (activeElement.<span class="property">tagName</span> === <span class="string">&#x27;INPUT&#x27;</span>)) &#123;</span><br><span class="line">                    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        activeElement.<span class="title function_">scrollIntoView</span>(&#123; <span class="attr">block</span>: <span class="string">&#x27;center&#x27;</span> &#125;)</span><br><span class="line">                    &#125;, <span class="number">100</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路如下：</p><p>在组件初始化时监听 resize 事件，如果在 android 系统的话，获取文档调整后的高度以及选择的组件，通过对比原先高度，如果文档调整后的高度小于原先的高度，意味着有键盘弹出，我们就使用scrollIntoView，让目标选中组件滚动到页面中间</p><p>更多H5软键盘兼容性问题可以看看这这个帖子：<a href="https://segmentfault.com/a/1190000018959389">可能这些是你想要的H5软键盘兼容方案</a></p><h2 id="如何实现页面刷新后不定位到之前的滚动位置"><a href="#如何实现页面刷新后不定位到之前的滚动位置" class="headerlink" title="如何实现页面刷新后不定位到之前的滚动位置"></a>如何实现页面刷新后不定位到之前的滚动位置</h2><p>history.scrollRestoration</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (history.<span class="property">scrollRestoration</span>) &#123;</span><br><span class="line">  history.<span class="property">scrollRestoration</span> = <span class="string">&#x27;manual&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源自：<a href="https://www.zhangxinxu.com/wordpress/2022/05/history-scrollrestoration/">https://www.zhangxinxu.com/wordpress/2022/05/history-scrollrestoration/</a></p><p>检测 <code>passive</code> 是否支持</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> passiveSupported = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> options = <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(&#123;&#125;, <span class="string">&quot;passive&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      passiveSupported = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;test&quot;</span>, <span class="literal">null</span>, options);</span><br><span class="line">&#125; <span class="keyword">catch</span>(err) &#123;&#125;</span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener">https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener</a></p><p>Input 几个有趣的属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">       <span class="attr">autoComplete</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">autoCorrect</span>=<span class="string">&quot;off&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">autoCapitalize</span>=<span class="string">&quot;off&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">autoFocus</span>=<span class="string">false/</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <code>autoComplete=&quot;false&quot;</code>：自动记录输入的值</p><p>浏览器不允许为此字段自动输入或选择一个值</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes/autocomplete">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes/autocomplete</a></p><p><code> autoCorrect=&quot;off&quot;</code>：自动纠错</p><p><code> autoCapitalize=&quot;off&quot;</code>：自动大小写</p><p>控制用户输入/编辑文本输入时文本输入是否自动大写，以及如何自动大写</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/autocapitalize">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/autocapitalize</a></p><p><code>autoFocus=false</code>：自动对焦</p><p>自动对焦</p><h2 id="微信开发"><a href="#微信开发" class="headerlink" title="微信开发"></a>微信开发</h2><p>ios右上角消失</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;WeixinJSBridgeReady&#x27;</span>, <span class="keyword">function</span> <span class="title function_">onBridgeReady</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">WeixinJSBridge</span>.<span class="title function_">call</span>(<span class="string">&#x27;showOptionMenu&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://qydev.weixin.qq.com/wiki/index.php?title=%E5%BE%AE%E4%BF%A1_JS%E6%8E%A5%E5%8F%A3">https://qydev.weixin.qq.com/wiki/index.php?title=%E5%BE%AE%E4%BF%A1_JS%E6%8E%A5%E5%8F%A3</a></p><p>微信开发</p><p>最新版的微信已经不支持通过 debugx5.qq.com 打开 vconsole 了。要调试H5可以通过chrome远程：</p><p>① 把手机和电脑用usb连起来<br>② 在手机微信中访问  http://[喵喵] debugxweb.qq.com/?inspector=true<br>③ 在电脑浏览器中访问 chrome://inspect/#devices </p><p>隐藏微信网页右上角的按钮</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;WeixinJSBridgeReady&#x27;</span>,<span class="keyword">function</span> <span class="title function_">onBridgeReady</span>(<span class="params"></span>) &#123;<span class="string">`</span></span><br><span class="line"><span class="string">// 通过下面这个API隐藏右上角按钮`</span></span><br><span class="line"><span class="title class_">WeixinJSBridge</span>.<span class="title function_">call</span>(<span class="string">&#x27;hideOptionMenu&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;WeixinJSBridgeReady&#x27;</span>,<span class="keyword">function</span> <span class="title function_">onBridgeReady</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过下面这个API显示右上角按钮`</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">WeixinJSBridge</span>.<span class="title function_">call</span>(<span class="string">&#x27;showOptionMenu&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/d7f5f5131783">https://www.jianshu.com/p/d7f5f5131783</a></p><p>input ios端高度问题</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 移动端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>张潇雨的人生信念笔记</title>
      <link href="/2021/04/06/2021-04-06-%E5%BC%A0%E6%BD%87%E9%9B%A8%E7%9A%84%E4%BA%BA%E7%94%9F%E4%BF%A1%E5%BF%B5%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/04/06/2021-04-06-%E5%BC%A0%E6%BD%87%E9%9B%A8%E7%9A%84%E4%BA%BA%E7%94%9F%E4%BF%A1%E5%BF%B5%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>1.无论如何定义[成功]，能达到这个状态的人都是极少数</p><p>2.一个人是 TA 打交道最多的五个人的平均水平</p><p>3.一个人水平的下限由 TA 学习的最差的五个对象决定</p><p>4.只向最好的人学习，其他人都不知道自己在干什么，不要理会它们的[建议]<br>心得：听自己敬佩的人的建议，其他人不用听。父母也好，朋友也罢，不要因为这层关系加重判断，要听，就听成功的人的意见，并放大此人意见的权重</p><span id="more"></span><p>打个比方，一个男生和一个女生，男生小镇青年，家境普通，学历普通，身高长相也普通。女生城市户口，父母公务员，学历比男生高，长相尚可（从小就有人追）。这样一对比，大多数网友的第一反应是不门当户对，这就是网友的意见。多数人靠着提供者提供的信息来分析事物，如果提供信息者隐藏或者没意识到重要信息导致没说出来，那么人给出的意见就不同。<br>所以微博上的热搜，这类事不用太较真，真真假假，假假真真。公说公有理，婆说婆有理<br>遇到人生重大事情时该怎么做？这让我想起了《白鹿原》里主角白嘉轩，他每次遇到决定不了的事情时，就会去请教姐夫朱先生，朱先生是私塾老师，是小说中的灵魂人物。姐夫每每点几句，白嘉轩就知道怎么做了<br>当你遇到一个重要事情时，不妨问问你敬佩的人，客观描述事情，让他分析。不要感情用事，不要代入，不要带有色眼镜</p><p>5.在没达到信息手机两的门槛之前，不轻易做判断和决策。多对自己和他人说[我不知道]</p><p>6.不是生活中的每一个问题都要解决，和问题共处是人生常态。把精力用在重要的事情上</p><p>7.寻找 [非对称回报] 的机会，即那种 [失败了损失很低，单一旦成功回报巨大] 的机会</p><p>8.更好的机会是 [失败了有一点线性回报，但成功理由巨大的指数回报]，当然这中机会会非常稀少；</p><p>9.人境遇的改变往往是非线性的。积累和等待的过程很难熬，这是很多人无法改变的原因之一</p><p>10.耐心是非常值得拥有的品质</p><p>11.一个人的境遇绝大部分都受运气支配，但运气是可以被影响的</p><p>12.人很难靠出卖自己的单位时间获得财富</p><p>13.财富来自于对杠杆的使用，常见的杠杆有：互联网、人力、资本、声望、时间等等</p><p>14.财富的积累来源自不可代替性。学者让自己很难被替代，就像公司要建立自己的护城河。<br>心得：成为解决问题的人</p><p>15.很多时候最好的竞争优势就是 [别人觉得麻烦而你不觉得]</p><p>16.凡是都反过来想：想要投资成功，先弄清什么让人投资失败；想要生活幸福，先看什么事会导致人生不幸福。</p><p>17.在混沌、开放、随机的系统内，努力 [减少错误] 要比 [追求正确] 有效得多</p><p>18.人是无法用一套思维方式正确认知世界的。广泛地吸收知识，建立多远思维模型是成功的前提</p><p>19.当两件事看起来有些矛盾的时候，几乎总有一个更高层面的东西把它们统一起来。不断寻找，你就可以发现游戏的元规则是什么</p><p>20.将大部分的时间用在掌握游戏的元规则上</p><p>21.详细大数定律。一件事哪怕只有 10% 的把握，连试 20 次之后成功了也有九城</p><p>22.大多数的所谓心情问题、状态问题、创造力问题，都是身体健康和精力的问题<br>心得：大多数人不会主动解决，但身体会给你反馈<br>我检验精力是否饱满的两个技巧，<br>一在地铁上坐着看视频，精力指数小于 10，无论看什么都会发困，以至于闭上眼睛就能睡着<br>二找个安静的地方（图书馆或者半夜）看书，精力指数小于 50 就会打哈气<br>一般早上的精力比较好，所以早上的效率会比下午，晚上高</p><p>23.吃得健康、持续锻炼、保证睡眠，几乎可以待人走出任何困境</p><p>24.日常中积累小的信息和正反馈，这样在大的选择面前就会更加从容淡定</p><p>25.意志力这种东西几乎不存在。与其努力提高自己的意志力，不如给自己创造更好的环境于试无需调用意志力<br>心得：鄙人就是，一个好的环境对自己很重要<br>所以才想和女友搬到一起，这样能省下时间去学习</p><p>26.多和 [真、善、美]的东西在一起。它们的珍贵程度叶恒实这个顺序</p><p>27.在解决生存问题之后，人的幸福感主要由身边关系 的质量决定</p><p>28.爱不是一种情侣之间特有的东西，而是一种生命状态，也是你选择与世界沟通的方式</p><p>29.[对自己诚实]试最被低估的品质。一个人如果嫉妒坦诚，TA 就是无坚不催的</p><p>30.学会不带评判地自我觉察，这是一切改变的起点</p><p>31.人们懂得很多道理但仍然无法改变，是因为 [大脑知道] 和 [身体知道] 完全是两件事<br>心得：韩寒的“听过很多道理，依然过不好这一生”也是大脑知道。如果通过一些小事让自己觉知很重要</p>]]></content>
      
      
      <categories>
          
          <category> 有知有行 </category>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生信念 </tag>
            
            <tag> 张潇雨 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this 关键字</title>
      <link href="/2021/02/18/2021-02-18-this%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2021/02/18/2021-02-18-this%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>先说结论：<strong>谁调用它，this就指向谁</strong>。</p><p>前言：在讲作用域的时候，我们讲到了this，因为JavaScript中的作用域是词法作用域，在哪里定义，就在那里形成作用域。而与词法作用域相对应的还有一个作用域叫动态作用域，调用时去寻找它所处的位置。那个时候我就说道 this机制 和动态作用域很像。</p><h2 id="关于this"><a href="#关于this" class="headerlink" title="关于this"></a>关于this</h2><h3 id="为什么使用-this"><a href="#为什么使用-this" class="headerlink" title="为什么使用 this"></a>为什么使用 this</h3><p>我们解释一下为什么要使用this，用一个例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">identify</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>.<span class="title function_">toUpperCase</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> greeting = <span class="string">&quot;Hello, I&#x27;m&quot;</span> + identify.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(greeting)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> me = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;johan&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> you = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;elaine&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">identify.<span class="title function_">call</span>(me) <span class="comment">// JOHAN</span></span><br><span class="line">identify.<span class="title function_">call</span>(you) <span class="comment">// ELAINE</span></span><br><span class="line"></span><br><span class="line">speak.<span class="title function_">call</span>(me) <span class="comment">// Hello, I&#x27;m JOHAN</span></span><br><span class="line">speak.<span class="title function_">call</span>(you) <span class="comment">// Hello, I&#x27;m ELAINE</span></span><br></pre></td></tr></table></figure><p>这段代码可以在不同的上下文对象（me 和 you）中重复使用函数identity() 和 speak()，不用针对每个对象编写不同版本的函数</p><p>如果不适用 this，那就需要给identify() 和 speak() 显式传入一个上下文对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">identify</span>(<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> context.<span class="property">name</span>.<span class="title function_">toUpperCase</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">speak</span>(<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> greeting = <span class="string">&quot;Hello, I&#x27;m&quot;</span> + <span class="title function_">identify</span>(context)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(greeting)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">identify</span>(you) <span class="comment">// ELAINE</span></span><br><span class="line"><span class="title function_">speak</span>(me) <span class="comment">// Hello, I&#x27;m JOHAN</span></span><br></pre></td></tr></table></figure><p>看到这里你也许明白了，this 是一种更为优雅的”传递”对象引用的方式。这个例子还过于简单，当你遇到7.8个甚至10几个函数（或叫方法）之间的调用时，显式传值无疑会变得混乱。除此之外，在原型中，函数自动引入合适的上下文对象是极为重要的，这个我们放在原型章中在讲。</p><h3 id="this到底是什么"><a href="#this到底是什么" class="headerlink" title="this到底是什么"></a>this到底是什么</h3><p>this到底是一种什么样的机制。</p><ol><li>this 是在运行时进行绑定的，并不是在编写时绑定，它的上下文取决于函数调用时的各种条件。</li><li>this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式</li><li>当一个函数被调用时，会创建一个活动记录（有时候也称为执行上下文）。这个记录会包含函数在哪里被调用（调用栈）、函数的调用方式、传入的参数等信息。this就是这个记录的一个属性，会在函数执行的过程中用到。</li></ol><h2 id="调用位置"><a href="#调用位置" class="headerlink" title="调用位置"></a>调用位置</h2><p>正如上面所讲，this是在运行时绑定的，它的上下文取决于函数调用时的各个条件。在JavaScript中函数的调用有以下几种方式：作为对象方法调用，作为函数调用，作为构造函数调用，和使用apply或者call调用。下面我们按照调用方式不同，分别讨论 this 的含义</p><h3 id="作为对象方法调用"><a href="#作为对象方法调用" class="headerlink" title="作为对象方法调用"></a>作为对象方法调用</h3><p>在 JavaScript中，函数也是对象，因此函数可以作为一个对象的属性，此时该函数被称为该对象的方法，在调用这种调用方式时，this 被自然绑定到该对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> people = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;elaine&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">26</span>,</span><br><span class="line">    <span class="attr">sayName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">people.<span class="title function_">sayName</span>() <span class="comment">// elaine</span></span><br></pre></td></tr></table></figure><h3 id="作为函数调用"><a href="#作为函数调用" class="headerlink" title="作为函数调用"></a>作为函数调用</h3><p>函数也可以直接被调用，此时 this 绑定到全局对象。在浏览器中，window 就是该全局对象。比如下面的例子：函数被调用时，this 被绑定到全局对象，接下来执行赋值语句，相当于隐式的声明了一个全局变量，这显然不是调用者希望的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayAge</span>(<span class="params">age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayAge</span>(<span class="number">5</span>)</span><br><span class="line"><span class="comment">// age 已经成为一个值为 5 的全局变量</span></span><br></pre></td></tr></table></figure><p>对于内部函数，即声明在另外一个函数体内的函数，这种绑定到全局对象的方式会产生另外一个问题。我们仍然以前提到的 people 对象为例，这次我们希望在 sayName 方法内定义一个函数，函数打印年龄。结果可能出乎大家意料，不仅年龄没有打印出，反而多了一个全局变量 age</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> people = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;elaine&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">26</span>,</span><br><span class="line">    <span class="attr">sayName</span>: <span class="keyword">function</span>(<span class="params">age</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> sayAge = <span class="keyword">function</span>(<span class="params">age</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">sayAge</span>(age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">people.<span class="title function_">sayName</span>(<span class="number">5</span>)</span><br><span class="line">people.<span class="property">age</span> <span class="comment">// 26</span></span><br><span class="line">age <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>这属于 JavaScript 的设计缺陷，正确的设计方式是内部函数的 this 应该绑定到其外层函数对应的对象上，为了规避这一设计缺陷，聪明的 JavaScript 程序员想出了变量代替的方式，约定俗成，该变量一般被称为 that</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> people = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;elaine&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">26</span>,</span><br><span class="line">    <span class="attr">sayName</span>: <span class="keyword">function</span>(<span class="params">age</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">var</span> sayAge = <span class="keyword">function</span>(<span class="params">age</span>) &#123;</span><br><span class="line">            that.<span class="property">age</span> = age</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">sayAge</span>(age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">people.<span class="title function_">sayName</span>(<span class="number">5</span>)</span><br><span class="line">people.<span class="property">age</span> <span class="comment">// 5</span></span><br><span class="line">age <span class="comment">// 没有定义</span></span><br></pre></td></tr></table></figure><p>当然，当我们使用ES6中的箭头函数时，我们会发现箭头函数也能做到相同的效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> people = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;elaine&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">26</span>,</span><br><span class="line">    <span class="attr">sayName</span>: <span class="function"><span class="params">age</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> sayAge = <span class="keyword">function</span>(<span class="params">age</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">sayAge</span>(age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">people.<span class="title function_">sayName</span>(<span class="number">5</span>)</span><br><span class="line">people.<span class="property">age</span> <span class="comment">// 26</span></span><br><span class="line">age <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>可答案却让我匪夷所思，箭头函数难道不应该把this指向它的上一层吗？这个我们在后面会解释</p><h3 id="作为构造函数调用"><a href="#作为构造函数调用" class="headerlink" title="作为构造函数调用"></a>作为构造函数调用</h3><p>JavaScript 支持面向对象式编程，与主流的面向对象式编程语言不同， JavaScript并没有类（Class）的概念，而是使用基于原型（prototype-base）的继承方式（ES6中的Class其实是原型继承的语法糖）。相应的，JavaScript中的构造函数也很特殊，如果不适用new调用，则和普通函数一样。作为又一项约定俗成的准则，构造函数以大写字母开头，提醒调用者使用正确的方式调用。如果调用正确，this绑定到新创建的对象上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">People</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-apply-或-call-调用"><a href="#使用-apply-或-call-调用" class="headerlink" title="使用 apply 或 call 调用"></a>使用 apply 或 call 调用</h3><p>让我们再一次重申，在 JavaScript 中函数也是对象，对象则有方法，apply 和 call 就是函数对象的方法。这两个方法异常强大，他们允许切换函数执行的上下文环境（context）,即 this 绑定的对象。很多 JavaScript 中的技巧以及类库都用到了该方法。让我们看一个具体的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">People</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> elaine = <span class="keyword">new</span> <span class="title class_">People</span>(<span class="string">&#x27;elaine&#x27;</span>, <span class="number">26</span>);</span><br><span class="line"><span class="keyword">var</span> johan = &#123;<span class="attr">name</span>: <span class="string">&#x27;johan&#x27;</span>, <span class="attr">age</span>: <span class="number">26</span>&#125;;</span><br><span class="line">elaine.<span class="title function_">sayName</span>(<span class="string">&#x27;elaine1&#x27;</span>, <span class="number">261</span>);</span><br><span class="line">elaine.<span class="property">sayName</span>.<span class="title function_">apply</span>(johan, [<span class="string">&#x27;johan1&#x27;</span>, <span class="number">261</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(elaine.<span class="property">name</span>) <span class="comment">// elaine1;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(elaine.<span class="property">age</span>) <span class="comment">// 261</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="params">johan</span>) &#123; <span class="attr">name</span>: <span class="string">&quot;johan1&quot;</span>, <span class="attr">age</span>: <span class="number">261</span> &#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，我们使用构造函数生成了一个对象elaine，该对象同时具有 sayName 方法；使用对象字面量创建了另一个对象 johan，我们看到使用apply 可以将 elaine 上的方法应用到 johan 上，这时候 this 也被绑定到对象 johan 上，另一个 call 也具备相同的功能，不同的是最后的参数不是作为一个数组统一传入，而是分开传入的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elaine.<span class="property">sayName</span>.<span class="title function_">call</span>(johan, <span class="string">&#x27;johan1&#x27;</span>, <span class="number">261</span>)</span><br></pre></td></tr></table></figure><p>回过头来看，apply 和 call 的语义就是 elaine 的方法 sayName 作用于 johan ，sayName 需要传入的参数，我从第二个参数开始传值；或者说 johan 调用 elaine 的 sayName 方法，从第二个参数开始传值</p><p><strong>call和apply具有掰弯this指向的能力</strong></p><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>与箭头函数相关的语法和特征我们会在ES6篇中着重描述，这里，我们只讲箭头函数与 this 的关系。在“作为函数调用”小节中我们使用箭头函数，试图让它绑定，但是却感觉错了</p><p>网上对箭头函数与this 关系的解释是：箭头函数会默认帮我们绑定外层 this 的值，所以在箭头函数中的this的值和外层的this是一样的。这个解释很困扰我，就好比你看高中政治课本，一谈到马克思主义思想浪潮时虽然文字都看的懂，但是连在一起却那么的神奇，让人疑惑不止。</p><p>其实箭头函数很简单，和我们之前说作用域时谈到的动态作用域和静态作用域（词法作用域）有关系。this本身的机制和动态作用域很像，而箭头函数的出现，某种程度上规避了JavaScript 的设计缺陷（正确的设计方式应该是内部函数的 this 应该绑定到其外层函数对应的对象上）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>; <span class="comment">// 严格模式下</span></span><br><span class="line"><span class="keyword">var</span> people = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;eliane&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">26</span>,</span><br><span class="line">    <span class="attr">sayName</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>, <span class="variable language_">this</span>),</span><br><span class="line">    <span class="attr">sayName2</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>, <span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">people.<span class="title function_">sayName</span>() <span class="comment">// undefined Window &#123;...&#125;</span></span><br><span class="line">people.<span class="title function_">sayName2</span>() <span class="comment">// elaine, peole &#123;...&#125;</span></span><br></pre></td></tr></table></figure><p>使用箭头函数后，就不用管调用者是谁，它只关心在哪里调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line"><span class="attr">bar</span>: &#123;</span><br><span class="line">        <span class="attr">a</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">foo.<span class="property">bar</span>.<span class="title function_">a</span>() <span class="comment">// window</span></span><br></pre></td></tr></table></figure><h2 id="函数的执行环境"><a href="#函数的执行环境" class="headerlink" title="函数的执行环境"></a>函数的执行环境</h2><p>我们之前一直在讲一件事，this是如何被调用的，也说了this是什么，那么我们来看看，一个函数被执行时会发生什么？</p><p>一个函数被执行时，会创建一个执行环境（或叫活动记录，或叫执行上下文，英文名 ExecutionContext），函数所有的行为都发生在此执行环境中，构建该执行环境时，JavaScript 首先会创建 arguments 变量，其中包含调用函数时传入的参数。接下来创建作用域链。然后初始化变量，首先初始化函数的形参表，值为 arguments 变量中对应的值，如果 arguments 变量中没有对应值，则该形参初始化为 undefined。如果该函数中含有内部函数，则初始化这些内部函数。如果没有，继续初始化该函数内定义的局部变量，需要注意的是此时这些变量初始化为 undefined，其赋值操作在执行环境（ ExecutionContext ）创建成功后，函数执行时才会执行，这点对于我们理解JavaScript中的变量作用域非常重要。</p><p>最后是 this 变量赋值，如前所述，会根据函数调用方式的不同，赋给 this 全局对象，当前对象等。至此函数的执行环境（ ExecutionContext ）创建成功，函数开始逐行执行，所需变量均从之前构建好的执行环境（  ExecutionContext ）中读取</p><h2 id="this有什么作用"><a href="#this有什么作用" class="headerlink" title="this有什么作用"></a>this有什么作用</h2><p>全局执行上下文中：this 指向了 <code>window</code> 对象，方便我们来调用全局 <code>window</code> 对象</p><p>函数执行上下文中：this 指向了调用该函数的对象，减少的参数的传递，原来如何需要在函数内部操作被调用对象，当然还需要将对象作为参数传递进去，而又了 <code>this</code>，就不需要了，直接拿 <code>this</code> 就可以操作该调用对象的属性</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>结语就留给后面的自己吧</p><p>构造函数就是个模式，this未来会指向new出来的对象。创建 Person 的实例时，this.name 将引用新创建的对象，并将一个名为 <code>name</code> 的属性放入新对象中。</p><p>this 其实很好理解，它就是一个代词，表示”这个“。</p><p>生活中遇到一些事物规律，我们归纳总结，得出结论，用一个名词代替这个规律，例如马太效应，墨菲定律，我们约定俗成，这个词就是表示这些意。这样一抽象，彼此信息消耗就减少了。this 其实很好理解，this 就是”这个“。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">bar</span>()</span><br></pre></td></tr></table></figure><p>调用函数bar，函数中的 this 就默认代指 window。window上没有value，那结果就是 undefined。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br><span class="line">bar.<span class="title function_">call</span>(foo)</span><br></pre></td></tr></table></figure><p>call 能硬核掰弯this指向，将this指向第一个参数，所以这段代码中，this 代指 foo ， foo 上有value，所以打印结果是 1</p><p>针对 js 中的 this 指向问题，知乎上有人曾经回答过：</p><p><a href="https://www.zhihu.com/question/412637481/answer/1539325572">https://www.zhihu.com/question/412637481/answer/1539325572</a></p><ul><li>this 的灵活指向，属于 JS 自己发明的语言</li><li>this 指向存在的问题是公认的</li><li>this 的这种设计既不利于代码可读性，也不利于性能优化，完全可对其世家强制性</li><li>this 设计问题的更远，是产品营销需求与设计师个人偏好之间的冲突</li></ul><p>this 是万恶之源，大家都是（词法）静态作用域，就他是动态的.</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxNzk1MjQ0Ng==&mid=2247484231&idx=1&sn=36db9c6d78b541e73a40cf3e496691fe&chksm=f9910596cee68c80f6d81196644fe5e2ebf84a6e66b11df36276542aa6ab11135affcc23d662&mpshare=1&scene=1&srcid=&sharer_sharetime=1567987883759&sharer_shareid=778ad5bf3b27e0078eb105d7277263f6#rd">重学 this 关键字</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzA3MTI3Mjk3NA==&mid=2247483660&idx=1&sn=4cc5c66b988e79f39587af46f51b9e95&chksm=9f315e6da846d77b89863afbab30e3dc5d0396bac49aad6e7c9da72882ba378e782a8cd8f61b&mpshare=1&scene=1&srcid=&sharer_sharetime=1566956479051&sharer_shareid=778ad5bf3b27e0078eb105d7277263f6#rd">完整梳理 this 指向</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzI1MDU0Mjc4Mg==&mid=2247484550&idx=1&sn=af613bef12e5bc102c18ddf676f07a34&chksm=e981eb57def66241ae4bb7cc5e13ec1da19366c4c91d3e2e165fd1c5b1bdfad6ac16a7cbbf56&mpshare=1&scene=1&srcid=1125l5w8RfTcp1c9J9kwF8J3&sharer_sharetime=1606309812635&sharer_shareid=778ad5bf3b27e0078eb105d7277263f6&key=ace5dede87a40e70e8ec3f2b27f8d5f648045f478663a9b5bdb970b747a925858c239a1fadb7a1e65e20df924ad496d9cba48daffdb2519236be9316b87a50632a9c4921dbea221ee67b52f84f84c40366c3eb9f76a65d5626d5b01457cd9c07c8c506d8797fa045ff7eb415daf60cd87275db57cee345515e5b12a43d76e811&ascene=1&uin=MTA0NTY0NDM2MQ==&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=AeAM2n1g++pt8l519bMnx0E=&pass_ticket=NobQ5TAx7Olw6LadlkMu5zuU5DSWS1XhNGE4KCNN4gFe7KsugULfw02vrvAelJJ5&wx_header=0">面试三板斧——this</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 箭头函数 </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>umi项目优化</title>
      <link href="/2020/11/29/2020-11-29-umi%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96/"/>
      <url>/2020/11/29/2020-11-29-umi%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>此场景在项目中遇见，一看<a href="https://umijs.org/zh-CN/guide/boost-compile-speed">文档</a>，二看 umi 开发社区中的<a href="https://zhuanlan.zhihu.com/p/157540425">大佬的优化</a>，三结合自己以前的 webpack 配置经验总结而出。</p><p>为防止文档链接失效，笔者准备有些必要时候能抄就抄，保存文章整体性。</p><p>注意：此项目主要是笔者的经验之谈以及代码大小优化部分。</p><span id="more"></span><p>介绍完毕，准备开干：</p><h2 id="查看包结构"><a href="#查看包结构" class="headerlink" title="查看包结构"></a>查看包结构</h2><p>首先，要查看代码尺寸，最直观的方式是 <code>build</code> 它，查看生成文件大小，不过 <code>umi</code> 中自带了查看包大小的 <code>webpack</code> 插件 <code>analyze</code>，所以我们需要在 <code>package.json</code> 中配置 <code>script</code> 脚本：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;script&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analyze&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env  ANALYZE=1 umi dev&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build:analyze&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env  ANALYZE=1 umi build&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>执行 <code>umi dev</code> 或 <code>umi build</code> 时，增加环境变量<code>ANALYZE=1</code> 可查看产物的依赖占比</p><h2 id="配置-externals"><a href="#配置-externals" class="headerlink" title="配置 externals"></a>配置 externals</h2><p>这个在 webpack 中常用到，就是比如基本库，可以通过 externals 的配置引入相关的 umd 文件，减少编译消耗</p><p>比如 react 和 react-dom：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 配置 external</span></span><br><span class="line">  <span class="attr">externals</span>: &#123;</span><br><span class="line">    <span class="attr">react</span>: <span class="string">&#x27;window.React&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;react-dom&#x27;</span>: <span class="string">&#x27;window.ReactDOM&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 引入被 external 库的 scripts</span></span><br><span class="line">  <span class="comment">// 区分 development 和 production，使用不同的产物</span></span><br><span class="line">  <span class="attr">scripts</span>:</span><br><span class="line">    process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span></span><br><span class="line">      ? [</span><br><span class="line">          <span class="string">&#x27;https://gw.alipayobjects.com/os/lib/react/16.8.6/umd/react.development.js&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;https://gw.alipayobjects.com/os/lib/react-dom/16.8.6/umd/react-dom.development.js&#x27;</span>,</span><br><span class="line">        ]</span><br><span class="line">      : [</span><br><span class="line">          <span class="string">&#x27;https://gw.alipayobjects.com/os/lib/react/16.8.6/umd/react.production.min.js&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;https://gw.alipayobjects.com/os/lib/react-dom/16.8.6/umd/react-dom.production.min.js&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="减少补丁尺寸"><a href="#减少补丁尺寸" class="headerlink" title="减少补丁尺寸"></a>减少补丁尺寸</h2><p>因为本项目为移动端项目，所以这块的配置如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">targets</span>: &#123;</span><br><span class="line">    <span class="attr">chrome</span>: <span class="number">49</span>,</span><br><span class="line">    <span class="attr">firefox</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="attr">safari</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">edge</span>: <span class="number">13</span>,</span><br><span class="line">    <span class="attr">ios</span>: <span class="number">10</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="调整-splitChunks-策略，减少整体尺寸"><a href="#调整-splitChunks-策略，减少整体尺寸" class="headerlink" title="调整 splitChunks 策略，减少整体尺寸"></a>调整 splitChunks 策略，减少整体尺寸</h2><p>做一块的前提是将<code>dynamicImport(按需加载)</code>，在没开启按需加载前，umi 只会生成一个 js 和一个 css，即 <code>umi.js</code> 和 <code>umi.css</code> 。优点是省心，部署方便，缺点是对用户来说初次打开网站会比较慢。这显然是要优化的，因为前端优化中按需加载是肯定要做的，具体如何做可以查看 UmiJS 的官网，这里不做描述。</p><p>但如果开了 dynamicImport，产物特别大，每个出口文件都包含了相同的依赖，比如 自己的 UI 库，可尝试通过 splitChunks 配置调整公共依赖的提取策略</p><p>比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">chunks</span>: [<span class="string">&#x27;vendors&#x27;</span>, <span class="string">&#x27;umi&#x27;</span>],</span><br><span class="line">  <span class="attr">chainWebpack</span>: <span class="keyword">function</span> (<span class="params">config, &#123; webpack &#125;</span>) &#123;</span><br><span class="line">    config.<span class="title function_">merge</span>(&#123;</span><br><span class="line">      <span class="attr">optimization</span>: &#123;</span><br><span class="line">        <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">          <span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">          <span class="attr">minSize</span>: <span class="number">30000</span>,</span><br><span class="line">          <span class="attr">minChunks</span>: <span class="number">3</span>,</span><br><span class="line">          <span class="attr">automaticNameDelimiter</span>: <span class="string">&#x27;.&#x27;</span>,</span><br><span class="line">          <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">            <span class="attr">vendor</span>: &#123;</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;vendors&#x27;</span>,</span><br><span class="line">              <span class="title function_">test</span>(<span class="params">&#123; resource &#125;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="regexp">/[\\/]node_modules[\\/]/</span>.<span class="title function_">test</span>(resource);</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">priority</span>: <span class="number">10</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="图片资源压缩"><a href="#图片资源压缩" class="headerlink" title="图片资源压缩"></a>图片资源压缩</h2><p>UI 提供图片素材后，可通过 TinyPNG(<a href="https://tinypng.com/">https://tinypng.com/</a>) 或者 pngquant 等网站对图片经验进一步压缩</p><h2 id="选用可替代的依赖库"><a href="#选用可替代的依赖库" class="headerlink" title="选用可替代的依赖库"></a>选用可替代的依赖库</h2><p>大的依赖包能换就换，例如 monent 库比较大，我们可以替换成 dayjs，或者如果只用到其中的几个方法（例如 lodash 中的防抖节流）完成可以自己写</p><h2 id="开启-gzip-压缩"><a href="#开启-gzip-压缩" class="headerlink" title="开启 gzip 压缩"></a>开启 gzip 压缩</h2><p>下载 webpack 插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i compression-webpack-plugin @types/compression-webpack-plugin --save</span><br></pre></td></tr></table></figure><p>进入 umi 的配置文件中，引入并配置 gzip 压缩</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">CompressionPlugin</span> <span class="keyword">from</span> <span class="string">&#x27;compression-webpack-plugin&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;umi&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> productionGzipExtensions = <span class="regexp">/\.(js|css|json|txt|html|ico|svg)(\?.*)?$/i</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="title function_">chainWebpack</span>(<span class="params">memo: any, args: any</span>) &#123;</span><br><span class="line">        memo.<span class="title function_">plugin</span>(<span class="string">&#x27;CompressionPlugin&#x27;</span>).<span class="title function_">use</span>(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">CompressionPlugin</span>(&#123;</span><br><span class="line">                <span class="attr">filename</span>: <span class="string">&#x27;[path].gz[query]&#x27;</span>,</span><br><span class="line">                <span class="attr">algorithm</span>: <span class="string">&#x27;gzip&#x27;</span>,</span><br><span class="line">                <span class="attr">test</span>: productionGzipExtensions,</span><br><span class="line">                <span class="attr">threshold</span>: <span class="number">10240</span>,</span><br><span class="line">                <span class="attr">minRatio</span>: <span class="number">0.8</span>,</span><br><span class="line">                <span class="attr">deleteOriginalAssets</span>: <span class="literal">false</span>,</span><br><span class="line">            &#125;),</span><br><span class="line">        );</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>以上就是 umi 项目的优化方案。</p><p>经过压缩后，30 个页面的代码从没优化前的 3M 代码，压缩到 2.5M(含 gzip)，虽然压缩大小没怎么变化，但是用户体验有了质的飞跃。</p><p>配合 nginx 的 gzip 压缩以及缓存策略，更能加快页面访问</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p><a href="https://umijs.org/zh-CN/guide/boost-compile-speed#%E6%9B%BF%E6%8D%A2%E5%8E%8B%E7%BC%A9%E5%99%A8%E4%B8%BA-esbuild">umi 官网网站</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/157540425">umi 维护者的文章</a></p></li><li><p><a href="https://blog.csdn.net/qq_32674347/article/details/105367389">umi 优化策略</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> umi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> umi </tag>
            
            <tag> 项目优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的 Git 命令</title>
      <link href="/2020/11/22/2020-11-22-%E5%B8%B8%E7%94%A8%E7%9A%84%20Git%20%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/11/22/2020-11-22-%E5%B8%B8%E7%94%A8%E7%9A%84%20Git%20%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="Git-的基本操作"><a href="#Git-的基本操作" class="headerlink" title="Git 的基本操作"></a>Git 的基本操作</h2><p>权当记录，方便查找</p><ul><li>git stash list 查看 stash 了哪些存储</li><li>回溯到其中的一个版本<ul><li>git reset –hard e32e81c0d6b922861e71a1c4fc5f73aa216f8b4b</li></ul></li><li>强推到远程分支 git push -f origin dev</li><li>跳过 git 提交钩子 git commit -m ‘XX’ —no-verify</li><li>查看所有提交的 commit 历史 git reflog</li><li>查看所有的线上的提交记录 git log</li><li>合并分支 git merge 分支名<ul><li>该分支先 git commit 到暂存盘上先</li></ul></li><li>查看远程仓库地址 git remote -v</li><li>查看所有的分支（包括远程仓库分支） git branch -a</li><li>修改远程仓库地址 git remote set-url orign [url]<ul><li>先删后加<ul><li>删除远程地址 git remote rm origin</li><li>添加远程地址 git remote add origin [url]</li></ul></li></ul></li><li>合并两个不同的项目（本地一个，远端仓库一个）git pull origin master —allow-unrelated-histories</li><li>获取所以分支 git fetch –all</li><li>回退版本至某一分支 git reset —hard 分支名</li><li>挑捡提交 git cherry-pick 分支名</li><li>查看分支存储在哪里 cat .git/HEAD</li><li>查看 tag git tag</li><li>给某个 commit 打 tag git tag test_tag [commit 名]</li><li>本地 tag 推送到线上 git push origin test_tag</li><li>本地删除 tag git tag -d test_tag</li><li>删除线上 tag git push origin :refs/tags/test_tag</li><li>删除分支名 git branch -d dev</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blog写作基本操作</title>
      <link href="/2020/11/20/2020-11-20-blog%E5%86%99%E4%BD%9C%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/11/20/2020-11-20-blog%E5%86%99%E4%BD%9C%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="封面-amp-缩略图"><a href="#封面-amp-缩略图" class="headerlink" title="封面 &amp; 缩略图"></a>封面 &amp; 缩略图</h2><p>若要为文章添加封面图，请在文章的 front-matter 中添加<code>cover</code>选项：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: 标题名</span><br><span class="line">cover: /gallery/covers/cover.jpg</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">内容 ...</span><br></pre></td></tr></table></figure><h2 id="写的基本的动作"><a href="#写的基本的动作" class="headerlink" title="写的基本的动作"></a>写的基本的动作</h2><h3 id="第一步：新建文章"><a href="#第一步：新建文章" class="headerlink" title="第一步：新建文章"></a>第一步：新建文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;文章名&quot;</span></span><br></pre></td></tr></table></figure><h3 id="第二步：按照这种形式写文章"><a href="#第二步：按照这种形式写文章" class="headerlink" title="第二步：按照这种形式写文章"></a>第二步：按照这种形式写文章</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章名</span><br><span class="line">date: # 自动生成</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">  -</span> 标签1</span><br><span class="line"><span class="bullet">  -</span> 标签2</span><br><span class="line">cover: # 头图 也可以不要</span><br><span class="line"><span class="section">thumbnail: # 缩略图</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><h3 id="第三步：写文章"><a href="#第三步：写文章" class="headerlink" title="第三步：写文章"></a>第三步：写文章</h3><p>使用 markdown 编辑器写文章</p><h3 id="第四步：清理缓存"><a href="#第四步：清理缓存" class="headerlink" title="第四步：清理缓存"></a>第四步：清理缓存</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run clean <span class="comment"># 清理缓存</span></span><br></pre></td></tr></table></figure><h3 id="第五步：发布"><a href="#第五步：发布" class="headerlink" title="第五步：发布"></a>第五步：发布</h3><p>先 build 生成静态文件，再往上推</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run deploy</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 有知有行 </category>
          
          <category> 写作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 写作 </tag>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
